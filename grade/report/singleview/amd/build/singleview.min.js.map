{"version":3,"file":"singleview.min.js","sources":["../src/singleview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow navigation through table cells using Ctrl + arrow keys and handle override toggles.\n *\n * @module    gradereport_singleview/singleview\n * @copyright The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst GradeReportSingleView = {\n    /**\n     * Indicates if the module has been initialized.\n     * @type {boolean}\n     */\n    initialised: false,\n\n    /**\n     * Initializes the module, setting up event listeners for table cell navigation and override toggles.\n     */\n    init() {\n        if (this.initialised) {\n            return;\n        }\n        this.initialised = true;\n\n        /**\n         * Helper function to get the column index of a cell.\n         *\n         * @param {HTMLElement} cell The table cell element.\n         * @returns {number} The index of the cell within its row.\n         */\n        const getColumnIndex = (cell) => {\n            const rowNode = cell.closest('tr');\n            if (!rowNode || !cell) {\n                return -1;\n            }\n            const cells = Array.from(rowNode.querySelectorAll('td, th'));\n            return cells.indexOf(cell);\n        };\n\n        /**\n         * Helper function to get the next cell in the table.\n         *\n         * @param {HTMLElement} cell The current table cell element.\n         * @returns {HTMLElement|null} The next navigable cell or null if none found.\n         */\n        const getNextCell = (cell) => {\n            const n = cell || document.activeElement;\n            const next = n.nextElementSibling?.matches('td.cell, th.cell') ? n.nextElementSibling : null;\n            if (!next) {\n                return null;\n            }\n            // Continue until we find a navigable cell\n            if (!next.querySelector('input:not([type=\"hidden\"]):not([disabled=\"DISABLED\"]), select, a')) {\n                return getNextCell(next);\n            }\n            return next;\n        };\n\n        /**\n         * Helper function to get the previous cell in the table.\n         *\n         * @param {HTMLElement} cell The current table cell element.\n         * @returns {*|Element|null}\n         */\n        const getPrevCell = (cell) => {\n            const n = cell || document.activeElement;\n            const prev = n.previousElementSibling?.matches('td.cell, th.cell') ? n.previousElementSibling : null;\n            if (!prev) {\n                return null;\n            }\n            // Continue until we find a navigable cell\n            if (!prev.querySelector('input:not([type=\"hidden\"]):not([disabled=\"DISABLED\"]), select, a')) {\n                return getPrevCell(prev);\n            }\n            return prev;\n        };\n\n        /**\n         * Helper function to get the cell above the current cell in the table.\n         *\n         * @param {HTMLElement} cell The current table cell element.\n         * @returns {HTMLElement|null} The cell above or null if none found.\n         */\n        const getAboveCell = (cell) => {\n            const n = cell || document.activeElement;\n            const tr = n.closest('tr').previousElementSibling;\n            const columnIndex = getColumnIndex(n);\n            if (!tr) {\n                return null;\n            }\n            const next = tr.querySelectorAll('td, th')[columnIndex];\n            // Continue until we find a navigable cell\n            if (!next?.querySelector('input:not([type=\"hidden\"]):not([disabled=\"DISABLED\"]), select, a')) {\n                return getAboveCell(next);\n            }\n            return next;\n        };\n\n        /**\n         * Helper function to get the cell below the current cell in the table.\n         *\n         * @param {HTMLElement} cell The current table cell element.\n         * @returns {HTMLElement|null} The cell below or null if none found.\n         */\n        const getBelowCell = (cell) => {\n            const n = cell || document.activeElement;\n            const tr = n.closest('tr').nextElementSibling;\n            const columnIndex = getColumnIndex(n);\n            if (!tr) {\n                return null;\n            }\n            const next = tr.querySelectorAll('td, th')[columnIndex];\n            // Continue until we find a navigable cell\n            if (!next?.querySelector('input:not([type=\"hidden\"]):not([disabled=\"DISABLED\"]), select, a')) {\n                return getBelowCell(next);\n            }\n            return next;\n        };\n\n        // Add ctrl+arrow controls for navigation.\n        document.body.addEventListener('keydown', (e) => {\n            if (!e.ctrlKey) {\n                return;\n            }\n\n            const activeElement = document.activeElement;\n            if (!activeElement.matches('table input, table select, table a')) {\n                return;\n            }\n\n            let next = null;\n            switch (e.keyCode) {\n                case 37: // Left arrow\n                    next = getPrevCell(activeElement.closest('td, th'));\n                    break;\n                case 38: // Up arrow\n                    next = getAboveCell(activeElement.closest('td, th'));\n                    break;\n                case 39: // Right arrow\n                    next = getNextCell(activeElement.closest('td, th'));\n                    break;\n                case 40: // Down arrow\n                    next = getBelowCell(activeElement.closest('td, th'));\n                    break;\n            }\n\n            if (next) {\n                e.preventDefault();\n                e.stopPropagation();\n                next.querySelector('input:not([type=\"hidden\"]):not([disabled=\"DISABLED\"]), select, a')?.focus();\n            } else {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        });\n\n        // Handle override toggles\n        document.querySelectorAll('input[name^=override_]').forEach(input => {\n            input.addEventListener('change', () => {\n                const checked = input.checked;\n                const [, itemid, userid] = input.getAttribute('name').split('_');\n                const interest = `_${itemid}_${userid}`;\n\n                // Handle text inputs\n                document.querySelectorAll(`input[name$='${interest}'][data-uielement='text']`)\n                    .forEach(text => {\n                        text.disabled = !checked;\n                    });\n\n                // Handle select elements\n                document.querySelectorAll(`select[name$='${interest}']`)\n                    .forEach(select => {\n                        select.disabled = !checked;\n                    });\n            });\n        });\n    }\n};\n\nexport default GradeReportSingleView;\n"],"names":["initialised","init","this","getColumnIndex","cell","rowNode","closest","Array","from","querySelectorAll","indexOf","getNextCell","n","document","activeElement","next","nextElementSibling","matches","querySelector","getPrevCell","prev","previousElementSibling","getAboveCell","tr","columnIndex","getBelowCell","body","addEventListener","e","ctrlKey","keyCode","preventDefault","stopPropagation","focus","forEach","input","checked","itemid","userid","getAttribute","split","interest","text","disabled","select"],"mappings":"wKAsB8B,CAK1BA,aAAa,EAKbC,UACQC,KAAKF,wBAGJA,aAAc,QAQbG,eAAkBC,aACdC,QAAUD,KAAKE,QAAQ,UACxBD,UAAYD,YACL,SAEEG,MAAMC,KAAKH,QAAQI,iBAAiB,WACrCC,QAAQN,OASnBO,YAAeP,uCACXQ,EAAIR,MAAQS,SAASC,cACrBC,mCAAOH,EAAEI,2EAAoBC,QAAQ,oBAAsBL,EAAEI,mBAAqB,YACnFD,KAIAA,KAAKG,cAAc,oEAGjBH,KAFIJ,YAAYI,MAJZ,MAeTI,YAAef,uCACXQ,EAAIR,MAAQS,SAASC,cACrBM,mCAAOR,EAAES,+EAAwBJ,QAAQ,oBAAsBL,EAAES,uBAAyB,YAC3FD,KAIAA,KAAKF,cAAc,oEAGjBE,KAFID,YAAYC,MAJZ,MAeTE,aAAgBlB,aACZQ,EAAIR,MAAQS,SAASC,cACrBS,GAAKX,EAAEN,QAAQ,MAAMe,uBACrBG,YAAcrB,eAAeS,OAC9BW,UACM,WAELR,KAAOQ,GAAGd,iBAAiB,UAAUe,oBAEtCT,MAAAA,MAAAA,KAAMG,cAAc,oEAGlBH,KAFIO,aAAaP,OAWtBU,aAAgBrB,aACZQ,EAAIR,MAAQS,SAASC,cACrBS,GAAKX,EAAEN,QAAQ,MAAMU,mBACrBQ,YAAcrB,eAAeS,OAC9BW,UACM,WAELR,KAAOQ,GAAGd,iBAAiB,UAAUe,oBAEtCT,MAAAA,MAAAA,KAAMG,cAAc,oEAGlBH,KAFIU,aAAaV,OAM5BF,SAASa,KAAKC,iBAAiB,WAAYC,QAClCA,EAAEC,qBAIDf,cAAgBD,SAASC,kBAC1BA,cAAcG,QAAQ,iDAIvBF,KAAO,YACHa,EAAEE,cACD,GACDf,KAAOI,YAAYL,cAAcR,QAAQ,sBAExC,GACDS,KAAOO,aAAaR,cAAcR,QAAQ,sBAEzC,GACDS,KAAOJ,YAAYG,cAAcR,QAAQ,sBAExC,GACDS,KAAOU,aAAaX,cAAcR,QAAQ,mCAI9CS,MACAa,EAAEG,iBACFH,EAAEI,8CACFjB,KAAKG,cAAc,wHAAqEe,UAExFL,EAAEG,iBACFH,EAAEI,sBAKVnB,SAASJ,iBAAiB,0BAA0ByB,SAAQC,QACxDA,MAAMR,iBAAiB,UAAU,WACvBS,QAAUD,MAAMC,UACbC,OAAQC,QAAUH,MAAMI,aAAa,QAAQC,MAAM,KACtDC,oBAAeJ,mBAAUC,QAG/BzB,SAASJ,wCAAiCgC,uCACrCP,SAAQQ,OACLA,KAAKC,UAAYP,WAIzBvB,SAASJ,yCAAkCgC,gBACtCP,SAAQU,SACLA,OAAOD,UAAYP"}