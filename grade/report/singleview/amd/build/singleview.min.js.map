{"version":3,"file":"singleview.min.js","sources":["../src/singleview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow navigation through table cells using Ctrl + arrow keys and handle override toggles.\n *\n * @module    gradereport_singleview/singleview\n * @copyright The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst selectors = {\n    cell: 'td.cell, th.cell',\n    col: 'td, th',\n    keyboardHandled: 'table input, table select, table a',\n    navigableCell: 'input:not([type=\"hidden\"]):not([disabled]), select, a',\n    override: 'input[name^=override_]',\n    row: 'tr',\n    // Dyanmic selectors.\n    input: (interest) => `input[name$='${interest}'][data-uielement='text']`,\n    select: (interest) => `select[name$='${interest}']`,\n};\n\nlet initialized = false;\n\n/**\n * Initializes the module, setting up event listeners for table cell navigation and override toggles.\n */\nexport function init() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n\n    // Add ctrl+arrow controls for navigation.\n    document.body.addEventListener('keydown', keydownHandler);\n\n    // Handle override toggles.\n    document.querySelectorAll(selectors.override).forEach(input => {\n        input.addEventListener('change', () => {\n            updateOverrideToggle(input);\n        });\n    });\n}\n\n/**\n * Handles control+arrow table navigation.\n *\n * @private\n * @param {KeyboardEvent} event The keydown event.\n */\nfunction keydownHandler(event) {\n    if (!event.ctrlKey) {\n        return;\n    }\n\n    const activeElement = document.activeElement;\n    if (!activeElement.matches(selectors.keyboardHandled)) {\n        return;\n    }\n\n    let next = null;\n    switch (event.key) {\n        case 'ArrowLeft':\n            next = getPrevCell(activeElement.closest(selectors.col));\n            break;\n        case 'ArrowUp':\n            next = getAboveCell(activeElement.closest(selectors.col));\n            break;\n        case 'ArrowRight':\n            next = getNextCell(activeElement.closest(selectors.col));\n            break;\n        case 'ArrowDown':\n            next = getBelowCell(activeElement.closest(selectors.col));\n            break;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (next) {\n        next.querySelector(selectors.navigableCell)?.focus();\n    }\n}\n\n/**\n * Handles changes to override toggles.\n *\n * @private\n * @param {HTMLInputElement} input The override toggle input element.\n */\nfunction updateOverrideToggle(input) {\n    const checked = input.checked;\n    const [, itemid, userid] = input.getAttribute('name').split('_');\n    const interest = `_${itemid}_${userid}`;\n\n    // Handle text inputs.\n    document.querySelectorAll(selectors.input(interest)).forEach(\n        text => {\n            text.disabled = !checked;\n        }\n    );\n\n    // Handle select elements.\n    document.querySelectorAll(selectors.select(interest)).forEach(\n        select => {\n            select.disabled = !checked;\n        }\n    );\n}\n\n/**\n * Helper function to get the next cell in the table.\n *\n * @private\n * @param {HTMLElement} cell\n * @returns {HTMLElement|null} The next navigable cell or null if none found.\n */\nfunction getNextCell(cell) {\n    const checkElement = cell || document.activeElement;\n    const next = checkElement.nextElementSibling?.matches(selectors.cell) ? checkElement.nextElementSibling : null;\n    if (!next) {\n        return null;\n    }\n    // Continue until we find a navigable cell\n    if (!next.querySelector(selectors.navigableCell)) {\n        return getNextCell(next);\n    }\n    return next;\n}\n\n/**\n * Helper function to get the previous cell in the table.\n *\n * @private\n * @param {HTMLElement} cell\n */\nfunction getPrevCell(cell) {\n    const checkElement = cell || document.activeElement;\n    const prev = checkElement.previousElementSibling?.matches(selectors.cell) ? checkElement.previousElementSibling : null;\n    if (!prev) {\n        return null;\n    }\n    // Continue until we find a navigable cell\n    if (!prev.querySelector(selectors.navigableCell)) {\n        return getPrevCell(prev);\n    }\n    return prev;\n}\n\n/**\n * Helper function to get the cell above the current cell in the table.\n *\n * @private\n * @param {HTMLElement} cell The current table cell element.\n * @returns {HTMLElement|null} The cell above or null if none found.\n */\nfunction getAboveCell(cell) {\n    const checkElement = cell || document.activeElement;\n    const tr = checkElement.closest(selectors.row).previousElementSibling;\n    const columnIndex = getColumnIndex(checkElement);\n    if (!tr) {\n        return null;\n    }\n    const next = tr.querySelectorAll(selectors.col)[columnIndex];\n    // Continue until we find a navigable cell\n    if (!next?.querySelector(selectors.navigableCell)) {\n        return getAboveCell(next);\n    }\n    return next;\n}\n\n/**\n * Helper function to get the cell below the current cell in the table.\n *\n * @private\n * @param {HTMLElement} cell The current table cell element.\n * @returns {HTMLElement|null} The cell below or null if none found.\n */\nfunction getBelowCell(cell) {\n    const checkElement = cell || document.activeElement;\n    const tr = checkElement.closest('tr').nextElementSibling;\n    const columnIndex = getColumnIndex(checkElement);\n    if (!tr) {\n        return null;\n    }\n    const next = tr.querySelectorAll('td, th')[columnIndex];\n    // Continue until we find a navigable cell\n    if (!next?.querySelector(selectors.navigableCell)) {\n        return getBelowCell(next);\n    }\n    return next;\n}\n\n/**\n * Helper function to get the column index of a cell.\n *\n * @param {HTMLElement} cell\n * @returns {number} The index of the cell within its row.\n */\nfunction getColumnIndex(cell) {\n    const rowNode = cell.closest(selectors.row);\n    if (!rowNode || !cell) {\n        return -1;\n    }\n    const cells = Array.from(rowNode.querySelectorAll(selectors.col));\n    return cells.indexOf(cell);\n}\n"],"names":["initialized","document","body","addEventListener","keydownHandler","querySelectorAll","selectors","forEach","input","checked","itemid","userid","getAttribute","split","interest","text","disabled","select","updateOverrideToggle","event","ctrlKey","activeElement","matches","next","key","getPrevCell","closest","getAboveCell","getNextCell","getBelowCell","preventDefault","stopPropagation","querySelector","focus","cell","checkElement","nextElementSibling","prev","previousElementSibling","tr","columnIndex","getColumnIndex","rowNode","Array","from","indexOf"],"mappings":"+JAyCQA,mBAGJA,aAAc,EAGdC,SAASC,KAAKC,iBAAiB,UAAWC,gBAG1CH,SAASI,iBAAiBC,oBAAoBC,SAAQC,QAClDA,MAAML,iBAAiB,UAAU,eAoDXK,aACpBC,QAAUD,MAAMC,UACbC,OAAQC,QAAUH,MAAMI,aAAa,QAAQC,MAAM,KACtDC,oBAAeJ,mBAAUC,QAG/BV,SAASI,iBAAiBC,gBAAgBQ,WAAWP,SACjDQ,OACIA,KAAKC,UAAYP,WAKzBR,SAASI,iBAAiBC,iBAAiBQ,WAAWP,SAClDU,SACIA,OAAOD,UAAYP,WAlEnBS,CAAqBV;;;;;;;;MA7B3BF,eACI,mBADJA,cAEG,SAFHA,0BAGe,qCAHfA,wBAIa,wDAJbA,mBAKQ,yBALRA,cAMG,KANHA,gBAQMQ,iCAA6BA,sCARnCR,iBASOQ,kCAA8BA,mBAGvCd,aAAc,WA4BTI,eAAee,WACfA,MAAMC,qBAILC,cAAgBpB,SAASoB,kBAC1BA,cAAcC,QAAQhB,sCAIvBiB,KAAO,YACHJ,MAAMK,SACL,YACDD,KAAOE,YAAYJ,cAAcK,QAAQpB,0BAExC,UACDiB,KAAOI,aAAaN,cAAcK,QAAQpB,0BAEzC,aACDiB,KAAOK,YAAYP,cAAcK,QAAQpB,0BAExC,YACDiB,KAAOM,aAAaR,cAAcK,QAAQpB,yCAIlDa,MAAMW,iBACNX,MAAMY,kBAEFR,oCACAA,KAAKS,cAAc1B,6EAA0B2B,kBAqC5CL,YAAYM,sCACXC,aAAeD,MAAQjC,SAASoB,cAChCE,mCAAOY,aAAaC,2EAAoBd,QAAQhB,gBAAkB6B,aAAaC,mBAAqB,YACrGb,KAIAA,KAAKS,cAAc1B,yBAGjBiB,KAFIK,YAAYL,MAJZ,cAeNE,YAAYS,sCACXC,aAAeD,MAAQjC,SAASoB,cAChCgB,mCAAOF,aAAaG,+EAAwBhB,QAAQhB,gBAAkB6B,aAAaG,uBAAyB,YAC7GD,KAIAA,KAAKL,cAAc1B,yBAGjB+B,KAFIZ,YAAYY,MAJZ,cAgBNV,aAAaO,YACZC,aAAeD,MAAQjC,SAASoB,cAChCkB,GAAKJ,aAAaT,QAAQpB,eAAegC,uBACzCE,YAAcC,eAAeN,kBAC9BI,UACM,WAELhB,KAAOgB,GAAGlC,iBAAiBC,eAAekC,oBAE3CjB,MAAAA,MAAAA,KAAMS,cAAc1B,yBAGlBiB,KAFII,aAAaJ,eAYnBM,aAAaK,YACZC,aAAeD,MAAQjC,SAASoB,cAChCkB,GAAKJ,aAAaT,QAAQ,MAAMU,mBAChCI,YAAcC,eAAeN,kBAC9BI,UACM,WAELhB,KAAOgB,GAAGlC,iBAAiB,UAAUmC,oBAEtCjB,MAAAA,MAAAA,KAAMS,cAAc1B,yBAGlBiB,KAFIM,aAAaN,eAWnBkB,eAAeP,YACdQ,QAAUR,KAAKR,QAAQpB,mBACxBoC,UAAYR,YACL,SAEES,MAAMC,KAAKF,QAAQrC,iBAAiBC,gBACrCuC,QAAQX"}