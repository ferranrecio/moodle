{"version":3,"sources":["../../src/local/content.js"],"names":["Component","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","ACTIVITYTAG","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","_indexContents","addEventListener","element","_sectionTogglers","reactive","supportComponents","isEditing","DispatchActions","classList","add","event","sectionlink","target","closest","isChevron","section","toggler","querySelector","isCollapsed","contains","sectionId","getAttribute","dispatch","contentexpanded","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","cmitem","getElement","id","courseActions","refreshModule","Error","click","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","sectionlist","createSection","_scanIndex","item","Section","CmItem","selector","index","creationhandler","items","getElements","forEach","unregister","indexed","promise","then","catch","container","cmid","newItem","document","createElement","for","append","get","neworder","dettachedelements","createMethod","length","innerHTML","remove","itemid","currentitem","children","insertBefore","lastchild","lastChild","dndFakeActivity","removeChild","getElementById","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from 'core_course/actions';\nimport DispatchActions from 'core_courseformat/local/content/actions';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionPreferences',\n                    [sectionId],\n                    {\n                        contentexpanded: isCollapsed,\n                    },\n                );\n            }\n        }\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentexpanded:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Reload a course module.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version af the module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element update the state update data\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            courseActions.refreshModule(cmitem, element.id);\n        }\n    }\n\n    /**\n     * Update section collapsed.\n     *\n     * @param {object} args\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentexpanded === isCollapsed) {\n            toggler.click();\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = () => undefined;\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseActions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"file":"content.min.js"}