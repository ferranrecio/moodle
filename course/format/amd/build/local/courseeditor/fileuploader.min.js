define("core_courseformat/local/courseeditor/fileuploader",["exports","core/config","core_course/events","core/log","core/modal_factory","core/modal_events","core/templates","core_courseformat/local/courseeditor/uploadmonitor","core/normalise","core/prefetch","core/str","core_courseformat/courseeditor","core/reactive"],(function(_exports,_config,_events,_log,_modal_factory,_modal_events,_templates,_uploadmonitor,_normalise,_prefetch,_str,_courseeditor,_reactive){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.uploadFilesToCourse=_exports.getUploader=void 0,_config=_interopRequireDefault(_config),_events=_interopRequireDefault(_events),_log=_interopRequireDefault(_log),_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_templates=_interopRequireDefault(_templates),_uploadmonitor=_interopRequireDefault(_uploadmonitor);const uploadUrl=_config.default.wwwroot+"/course/dndupload.php";let uploader=null;const initialState={process:{current:0,maxbytes:0},pending:[],uploading:[]};(0,_prefetch.prefetchStrings)("moodle",["addresourceoractivity","upload"]);
/**
   * The reactive file uploader class.
   *
   * As all the upload queues are reactive, any plugin can implement its own upload monitor.
   *
   * @module     core_courseformat/local/courseeditor/fileuploader
   * @class     core_courseformat/local/courseeditor/fileuploader
   * @copyright  2021 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class FileUploader extends _reactive.Reactive{constructor(){super(...arguments),_defineProperty(this,"editorUpdates",new Map),_defineProperty(this,"lastHandlers",{})}refreshCourseEditors(){const refreshes=this.editorUpdates;this.editorUpdates=new Map,refreshes.forEach(((sectionIds,courseId)=>{const courseEditor=(0,_courseeditor.getCourseEditor)(courseId);courseEditor&&courseEditor.dispatch("sectionState",[...sectionIds])}))}addRefreshSection(courseId,sectionId){let refresh=this.editorUpdates.get(courseId);refresh||(refresh=new Set),refresh.add(sectionId),this.editorUpdates.set(courseId,refresh)}async processCurrent(){const item=this.currentItem;if(!item)return;const courseEditor=(0,_courseeditor.getCourseEditor)(item.courseId);if(!courseEditor)return;const allFileHandlers=await courseEditor.getFileHandlersPromise(),fileHandlers=getFileHandlers(item.fileInfo,allFileHandlers);fileHandlers.length,1!=fileHandlers.length?fileHandlers.length>0&&this._showUploadModal(fileHandlers):this.dispatch("uploadItem",item,fileHandlers[0])}async _showUploadModal(fileHandlers){const item=uploader.currentItem,extension=getFileExtension(item.fileInfo);if(!item)return;const data={filename:item.fileInfo.name,uploadid:item.id,handlers:[]};let hasDefault=!1;if(fileHandlers.forEach(((handler,index)=>{const isDefault=this.lastHandlers[extension]==handler.module;data.handlers.push({...handler,selected:isDefault,labelid:"fileuploader_".concat(data.uploadid),value:index}),hasDefault=hasDefault||isDefault})),!hasDefault&&data.handlers.length>0){const lastHandler=data.handlers.pop();lastHandler.selected=!0,data.handlers.push(lastHandler)}const modalParams={title:(0,_str.get_string)("addresourceoractivity","moodle"),body:_templates.default.render("core_courseformat/fileuploader",data),type:_modal_factory.default.types.SAVE_CANCEL,saveButtonText:(0,_str.get_string)("upload","moodle")},modal=await function(modalParams){return new Promise(((resolve,reject)=>{_modal_factory.default.create(modalParams).then((modal=>{modal.setRemoveOnClose(!0),modal.getRoot().on(_modal_events.default.bodyRendered,(()=>{resolve(modal)})),void 0!==modalParams.saveButtonText&&modal.setSaveButtonText(modalParams.saveButtonText),modal.show()})).catch((()=>{reject("Cannot load modal content")}))}))}(modalParams),modalBody=(0,_normalise.getFirst)(modal.getBody());modal.getRoot().on(_modal_events.default.save,(event=>{const index=modalBody.querySelector("input:checked").value;event.preventDefault(),modal.destroy(),fileHandlers[index]&&(this.dispatch("uploadItem",item,fileHandlers[index]),this.lastHandlers[extension]=fileHandlers[index].module)})),modal.getRoot().on(_modal_events.default.cancel,(()=>{this.dispatch("discardItem",item)}))}startUploading(item,fileHandler){if(this.maxbytes>0&&item.fileInfo.size>this.maxbytes)return _log.default.error("File size over the limit: ".concat(item.fileInfo.name)),void uploader.dispatch("finishUpload",item.id,!1);!async function(item,fileHandler){const fileInfo=item.fileInfo,xhr=function(item){const xhr=new XMLHttpRequest;return xhr.upload.addEventListener("progress",(event=>{if(event.lengthComputable){const percent=Math.round(100*event.loaded/event.total);uploader.dispatch("setPercentage",item.id,percent)}}),!1),xhr.onreadystatechange=()=>{if(1==xhr.readyState&&uploader.dispatch("setPercentage",item.id,1),4!=xhr.readyState)return;let success=!1;if(200==xhr.status){var result=JSON.parse(xhr.responseText);result&&0==result.error&&(uploader.dispatch("setPercentage",item.id,100),success=!0)}success||_log.default.error("Cannot upload file: ".concat(item.fileInfo.name)),uploader.dispatch("finishUpload",item.id,success)},xhr}(item),formData=function(item,fileHandler){const fileInfo=item.fileInfo,formData=new FormData;try{formData.append("repo_upload_file",fileInfo)}catch(e){return null}return formData.append("sesskey",_config.default.sesskey),formData.append("course",item.courseId),formData.append("section",item.sectionNum),formData.append("module",fileHandler.module),formData.append("type","Files"),formData}(item,fileHandler);if(!formData)return _log.default.error("File read error: ".concat(fileInfo.name)),void uploader.dispatch("finishUpload",item.id,!1);const reader=new FileReader;reader.onload=function(){xhr.open("POST",uploadUrl,!0),xhr.send(formData)},reader.onerror=function(){_log.default.error("File read error: ".concat(fileInfo.name)),uploader.dispatch("finishUpload",item.id,!1)},fileInfo.size>0?reader.readAsText(fileInfo.slice(0,5)):reader.readAsText(fileInfo)}(item,fileHandler)}get currentItem(){return this.state.pending.get(this.state.process.current)}get maxbytes(){return this.state.process.maxbytes}}let lastUploadId=0;const mutations={addPending:function(stateManager,courseId,sectionId,sectionNum,fileInfo){lastUploadId++;const item={id:lastUploadId,courseId:courseId,sectionId:sectionId,sectionNum:sectionNum,fileInfo:fileInfo,percent:0},state=stateManager.state;stateManager.setReadOnly(!1),state.pending.add(item),stateManager.setReadOnly(!0),this.processNextPending(stateManager)},discardItem:function(stateManager,item){const state=stateManager.state;state.pending.has(item.id)&&(stateManager.setReadOnly(!1),state.pending.delete(state.process.current),state.process.current==item.id&&(state.process.current=0),stateManager.setReadOnly(!0),0==state.process.current&&this.processNextPending(stateManager))},uploadItem:function(stateManager,item,fileHandler){this.discardItem(stateManager,item);const state=stateManager.state;stateManager.setReadOnly(!1),state.uploading.add({...item}),stateManager.setReadOnly(!0),uploader.startUploading(item,fileHandler)},processNextPending:function(stateManager){const state=stateManager.state;if(0!=state.process.current)return;if(0==state.pending.size)return;stateManager.setReadOnly(!1);const[firstKey]=state.pending.keys();state.process.current=firstKey,stateManager.setReadOnly(!0),uploader.processCurrent()},finishUpload:function(stateManager,uploadId,success){const state=stateManager.state,item=state.uploading.get(uploadId);item&&(success&&uploader.addRefreshSection(item.courseId,item.sectionId),stateManager.setReadOnly(!1),state.uploading.delete(uploadId),stateManager.setReadOnly(!0),0==state.uploading.size&&uploader.refreshCourseEditors())},setPercentage:function(stateManager,uploadId,percent){const item=stateManager.state.uploading.get(uploadId);item&&(stateManager.setReadOnly(!1),item.percent=percent,stateManager.setReadOnly(!0))}};const getFileHandlers=function(fileInfo,allFileHandlers){const extension=getFileExtension(fileInfo),fileHandlers=[];for(var i=0;i<allFileHandlers.length;i++)"*"!=allFileHandlers[i].extension&&allFileHandlers[i].extension!=extension||fileHandlers.push(allFileHandlers[i]);return fileHandlers};function getFileExtension(fileInfo){let extension="";const dotpos=fileInfo.name.lastIndexOf(".");return-1!=dotpos&&(extension=fileInfo.name.substring(dotpos+1,fileInfo.name.length).toLowerCase()),extension}function dispatchStateChangedEvent(detail,target){void 0===target&&(target=document),target.dispatchEvent(new CustomEvent(_events.default.uploadStateChanged,{bubbles:!0,detail:detail}))}_exports.uploadFilesToCourse=async function(courseId,sectionId,sectionNum,files){await(null===uploader&&(uploader=new FileUploader({name:"CourseFileUploader",eventName:_events.default.uploadStateChanged,eventDispatch:dispatchStateChangedEvent,mutations:mutations,state:initialState}),_uploadmonitor.default.init(uploader)),uploader.getInitialStatePromise());for(let index=0;index<files.length;index++){const fileInfo=files[index];uploader.dispatch("addPending",courseId,sectionId,sectionNum,fileInfo)}};_exports.getUploader=function(){return uploader}}));

//# sourceMappingURL=fileuploader.min.js.map