{"version":3,"file":"uploadmonitor.min.js","sources":["../../../src/local/courseeditor/uploadmonitor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The file upload monitor component.\n *\n * @module     core_courseformat/local/courseeditor/uploadmonitor\n * @class      core_courseformat/local/courseeditor/uploadmonitor\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {BaseComponent} from 'core/reactive';\nimport selectors from 'core_courseformat/selectors';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            ITEM: selectors.content.modals.uploaditem,\n            PROGRESSBAR: selectors.content.modals.progressbar,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n        };\n        // The uploading page items.\n        this.currentItems = new Map();\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {Reactive} reactive the reactive object\n     * @param {string} element the DOM main element or its ID (optional)\n     * @param {object} selectors optional css selector overrides (optional)\n     * @return {UploadMonitor}\n     */\n    static init(reactive, element, selectors) {\n        if (!element) {\n            element = document.querySelector(`[data-queue-monitor]`);\n            if (!element) {\n                element = document.createElement('div');\n                element.setAttribute('data-queue-monitor', 'true');\n                element.classList.add('file-upload-queue-monitor');\n                document.body.appendChild(element);\n            }\n        }\n        return new Component({\n            element,\n            reactive,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the initial state\n     */\n    stateReady(state) {\n        this._refreshItemsList({state});\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `uploading:created`, handler: this._refreshItemsList},\n            {watch: `uploading:deleted`, handler: this._removeElement},\n            {watch: `uploading.percent:updated`, handler: this._updateElement},\n        ];\n    }\n\n    /**\n     * Create all the necessary items from ujploading list.\n     *\n     * @param {object} args the event args\n     * @param {Object} args.state the full state data\n     */\n    _refreshItemsList({state}) {\n        const uploading = state.uploading ?? new Map();\n        // Create all the necessary elements.\n        for (const item of uploading.values()) {\n            this._createItem(item);\n        }\n    }\n\n    /**\n     * Create a monitor item.\n     * @param {Object} item the item data\n     * @param {String} item.id the item id\n     * @param {File} item.fileInfo the file data\n     * @return {boolean} if the item is created ot not\n     */\n    async _createItem(item) {\n        if (this.currentItems.has(item.id)) {\n            return this.currentItems.get(item.id);\n        }\n        // Create a fake element in case the upload is finished while creating the element.\n        this.currentItems.set(item.id, document.createElement('div'));\n        // Render the item.\n        const data = {\n            id: item.id,\n            filename: item.fileInfo.name,\n            percent: item.fileInfo.percent,\n        };\n        const {html, js} = await Templates.renderForPromise('core_courseformat/uploadqueue', data);\n        if (this.currentItems.has(item.id)) {\n            Templates.appendNodeContents(this.element, html, js);\n            const element = this.getElement(this.selectors.ITEM, data.id);\n            this.currentItems.set(item.id, element);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Update a monitor item.\n     *\n     * @param {object} args the event args\n     * @param {Object} args.element The element to update\n     */\n    _updateElement({element}) {\n        if (!this.currentItems.has(element.id)) {\n            return;\n        }\n        const target = this.currentItems.get(element.id);\n        const progress = target.querySelector(this.selectors.PROGRESSBAR);\n        if (progress) {\n            progress.value = element.percent;\n        }\n    }\n\n    /**\n     * Remove a monitor item.\n     *\n     * @param {object} args the event args\n     * @param {Object} args.element The element to update\n     */\n    _removeElement({element}) {\n        if (!this.currentItems.has(element.id)) {\n            return;\n        }\n        const target = this.currentItems.get(element.id);\n        if (target && target.parentNode) {\n            target.parentNode.removeChild(target);\n        }\n        this.currentItems.delete(element.id);\n    }\n}\n"],"names":["Component","BaseComponent","create","name","selectors","ITEM","content","modals","uploaditem","PROGRESSBAR","progressbar","classes","currentItems","Map","reactive","element","document","querySelector","createElement","setAttribute","classList","add","body","appendChild","stateReady","state","_refreshItemsList","getWatchers","watch","handler","this","_removeElement","_updateElement","uploading","item","values","_createItem","has","id","get","set","data","filename","fileInfo","percent","html","js","Templates","renderForPromise","appendNodeContents","getElement","progress","value","target","parentNode","removeChild","delete"],"mappings":";;;;;;;;uLA4BqBA,kBAAkBC,wBAKnCC,cAESC,KAAO,qBAEPC,UAAY,CACbC,KAAMD,mBAAUE,QAAQC,OAAOC,WAC/BC,YAAaL,mBAAUE,QAAQC,OAAOG,kBAGrCC,QAAU,QAGVC,aAAe,IAAIC,gBAWhBC,SAAUC,QAASX,kBACtBW,UACDA,QAAUC,SAASC,0CAEfF,QAAUC,SAASE,cAAc,QACzBC,aAAa,qBAAsB,QAC3CJ,QAAQK,UAAUC,IAAI,6BACtBL,SAASM,KAAKC,YAAYR,UAG3B,IAAIf,UAAU,CACjBe,QAAAA,QACAD,SAAAA,SACAV,UAAAA,YASRoB,WAAWC,YACFC,kBAAkB,CAACD,MAAAA,QAQ5BE,oBACW,CAEH,CAACC,0BAA4BC,QAASC,KAAKJ,mBAC3C,CAACE,0BAA4BC,QAASC,KAAKC,gBAC3C,CAACH,kCAAoCC,QAASC,KAAKE,iBAU3DN,iDAAkBD,MAACA,kBACTQ,mCAAYR,MAAMQ,uDAAa,IAAIpB,QAEpC,MAAMqB,QAAQD,UAAUE,cACpBC,YAAYF,wBAWPA,SACVJ,KAAKlB,aAAayB,IAAIH,KAAKI,WACpBR,KAAKlB,aAAa2B,IAAIL,KAAKI,SAGjC1B,aAAa4B,IAAIN,KAAKI,GAAItB,SAASE,cAAc,cAEhDuB,KAAO,CACTH,GAAIJ,KAAKI,GACTI,SAAUR,KAAKS,SAASxC,KACxByC,QAASV,KAAKS,SAASC,UAErBC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,gCAAiCP,SACjFX,KAAKlB,aAAayB,IAAIH,KAAKI,IAAK,oBACtBW,mBAAmBnB,KAAKf,QAAS8B,KAAMC,UAC3C/B,QAAUe,KAAKoB,WAAWpB,KAAK1B,UAAUC,KAAMoC,KAAKH,gBACrD1B,aAAa4B,IAAIN,KAAKI,GAAIvB,UACxB,SAEJ,EASXiB,0BAAejB,QAACA,mBACPe,KAAKlB,aAAayB,IAAItB,QAAQuB,iBAI7Ba,SADSrB,KAAKlB,aAAa2B,IAAIxB,QAAQuB,IACrBrB,cAAca,KAAK1B,UAAUK,aACjD0C,WACAA,SAASC,MAAQrC,QAAQ6B,SAUjCb,0BAAehB,QAACA,mBACPe,KAAKlB,aAAayB,IAAItB,QAAQuB,iBAG7Be,OAASvB,KAAKlB,aAAa2B,IAAIxB,QAAQuB,IACzCe,QAAUA,OAAOC,YACjBD,OAAOC,WAAWC,YAAYF,aAE7BzC,aAAa4C,OAAOzC,QAAQuB"}