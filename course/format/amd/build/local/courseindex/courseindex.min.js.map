{"version":3,"sources":["../../../src/local/courseindex/courseindex.js"],"names":["Component","name","selectors","SECTION","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","sections","cms","addEventListener","element","_setupSectionTogglers","getElements","forEach","section","dataset","id","cm","_setupNavigation","watch","handler","_createCm","_deleteCm","_refreshCourseSectionlist","_refreshSectionCmlist","event","sectionlink","target","closest","preventDefault","parentNode","querySelector","click","state","fakeelement","document","createElement","classList","add","innerHTML","get","sectionid","exporter","reactive","getExporter","data","renderComponent","newcomponent","newelement","getElement","replaceChild","cmlist","listparent","_fixOrder","sectionlist","container","neworder","allitems","length","remove","itemid","index","item","currentitem","children","append","insertBefore","removeChild","lastChild","navTree","Tree","isEditing","_getVisibleItems","getVisibleItems","refreshVisibleItemsCache","treeRoot","on","getItemSection","Element","isGroupCollapsed","getAttribute","toggleGroup","expandGroup","collapseGroup","expandAllGroups","togglers","getElementById","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/courseindex/courseindex\n * @class     core_courseformat/local/courseindex/courseindex\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport Tree from 'core/tree';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            CM: `[data-for='cm']`,\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n        };\n        // Arrays to keep cms and sections elements.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._setupSectionTogglers);\n\n        // Get cms and sections elements.\n        const sections = this.getElements(this.selectors.SECTION);\n        sections.forEach((section) => {\n            this.sections[section.dataset.id] = section;\n        });\n        const cms = this.getElements(this.selectors.CM);\n        cms.forEach((cm) => {\n            this.cms[cm.dataset.id] = cm;\n        });\n\n        // Setup keyboard navigation.\n        this._setupNavigation();\n    }\n\n    getWatchers() {\n        return [\n            {watch: `cm:created`, handler: this._createCm},\n            {watch: `cm:deleted`, handler: this._deleteCm},\n            // Sections and cm sorting.\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n        ];\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course index element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _setupSectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        if (sectionlink) {\n            event.preventDefault();\n            sectionlink.parentNode.querySelector(this.selectors.COLLAPSE).click();\n        }\n    }\n\n    /**\n     * Create a newcm instance.\n     *\n     * @param {Object} details the update details.\n     */\n    async _createCm({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('li');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.cms[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshSectionCmlist({\n            state,\n            element: state.section.get(element.sectionid),\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cm(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/cm', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.cms[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\n        this._fixOrder(listparent, cmlist, this.cms);\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        const sectionlist = element.sectionlist ?? [];\n        this._fixOrder(this.element, sectionlist, this.sections);\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {Array} allitems the list of html elements that can be placed in the container\n     */\n    _fixOrder(container, neworder, allitems) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = allitems[itemid];\n            // Get the current element at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            container.removeChild(container.lastChild);\n        }\n    }\n\n    /**\n     * Remove a cm from the list.\n     *\n     * The actual DOM element removal is delegated to the cm component.\n     *\n     * @param {Object} details the update details.\n     */\n    _deleteCm({element}) {\n        delete this.cms[element.id];\n    }\n\n    /**\n     * Setup the core/tree keyboard navigation.\n     *\n     * Node tree and bootstrap collapsibles don't use the same HTML structure. However,\n     * by overriding some scanning methods it is possible to most of the implementation.\n     *\n     */\n    _setupNavigation() {\n        const navTree = new Tree(this.element);\n\n        // The core/tree library saves the visible elements cache inside the main tree node.\n        // However, in edit mode we don't want to use internal caches as the content can change suddenly.\n        if (this.reactive.isEditing) {\n            navTree._getVisibleItems = navTree.getVisibleItems;\n            navTree.getVisibleItems = () => {\n                navTree.refreshVisibleItemsCache();\n                return navTree._getVisibleItems();\n            };\n        } else {\n            // In non-editing mode we update the tree caches using bootstrap events.\n            navTree.treeRoot.on('hidden.bs.collapse shown.bs.collapse', () => {\n                navTree.refreshVisibleItemsCache();\n            });\n        }\n\n        const getItemSection = (item) => {\n            let container = item;\n            // Normalize jQuery or DOM elements into vanilla Elements if necessary.\n            if (!(container instanceof Element) && container.get !== undefined) {\n                container = item.get(0);\n            }\n            return container.closest(this.selectors.SECTION);\n        };\n\n        // Alter some tree methods to use the current course index.\n\n        navTree.isGroupCollapsed = (item) => {\n            // Navigate to the parent note (section).\n            const container = getItemSection(item);\n            return container.querySelector(`[aria-expanded]`).getAttribute('aria-expanded') === 'false';\n        };\n\n        navTree.toggleGroup = (item) => {\n            getItemSection(item).querySelector(this.selectors.COLLAPSE).click();\n        };\n\n        navTree.expandGroup = (item) => {\n            if (navTree.isGroupCollapsed(item)) {\n                navTree.toggleGroup(item);\n            }\n        };\n\n        navTree.collapseGroup = (item) => {\n            if (!navTree.isGroupCollapsed(item)) {\n                navTree.toggleGroup(item);\n            }\n        };\n\n        navTree.expandAllGroups = () => {\n            const togglers = this.getElements(this.selectors.COLLAPSE);\n            togglers.forEach(item => navTree.expandGroup(item));\n        };\n\n        this.navTree = navTree;\n    }\n}\n"],"file":"courseindex.min.js"}