{"version":3,"file":"cm.min.js","sources":["../../../src/local/courseindex/cm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index cm component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/courseindex/cm\n * @class      core_courseformat/local/courseindex/cm\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\nimport Templates from 'core/templates';\nimport Prefetch from 'core/prefetch';\nimport Config from 'core/config';\nimport selectors from 'core_courseformat/selectors';\n\n// Prefetch the completion icons template.\nconst completionTemplate = 'core_courseformat/local/courseindex/cmcompletion';\nPrefetch.prefetchTemplate(completionTemplate);\n\nexport default class Component extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex_cm';\n        // Default query selectors.\n        this.selectors = {\n            CM_NAME: selectors.courseindex.cm.name,\n            CM_COMPLETION: selectors.courseindex.cm.completion,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            CMHIDDEN: selectors.courseindex.classes.cmHidden,\n            LOCKED: selectors.courseindex.classes.locked,\n            RESTRICTIONS: selectors.courseindex.classes.restrictions,\n            PAGEITEM: selectors.courseindex.classes.pageItem,\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the course state.\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        const cm = state.cm.get(this.id);\n        const course = state.course;\n        // Refresh completion icon.\n        this._refreshCompletion({\n            state,\n            element: cm,\n        });\n        // Check if the current url is the cm url.\n        if (window.location.href == cm.url || window.location.href == `${course.baseurl}#${cm.anchor}`) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Check if this we are displaying this activity page.\n        if (Config.contextid != Config.courseContextId && Config.contextInstanceId == this.id) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id, true);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Add anchor logic if the element is not user visible.\n        if (!cm.uservisible) {\n            this.addEventListener(\n                this.getElement(this.selectors.CM_NAME),\n                'click',\n                this._activityAnchor,\n            );\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.remove},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `cm[${this.id}].completionstate:updated`, handler: this._refreshCompletion},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.CMHIDDEN, !element.visible);\n        this.getElement(this.selectors.CM_NAME).innerHTML = element.name;\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.element.classList.toggle(this.classes.RESTRICTIONS, element.hascmrestrictions ?? false);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element}) {\n        if (!element.pageItem) {\n            return;\n        }\n        const isPageId = (element.pageItem.type == 'cm' && element.pageItem.id == this.id);\n        this.element.classList.toggle(this.classes.PAGEITEM, isPageId);\n        if (isPageId && !this.reactive.isEditing) {\n            this.element.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    /**\n     * Update the activity completion icon.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data\n     * @param {Object} details.element the element data\n     */\n    async _refreshCompletion({state, element}) {\n        // No completion icons are displayed in edit mode.\n        if (this.reactive.isEditing || !element.istrackeduser) {\n            return;\n        }\n        // Check if the completion value has changed.\n        const completionElement = this.getElement(this.selectors.CM_COMPLETION);\n        if (completionElement.dataset.value == element.completionstate) {\n            return;\n        }\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cmCompletion(state, element);\n\n        try {\n            const {html, js} = await Templates.renderForPromise(completionTemplate, data);\n            Templates.replaceNode(completionElement, html, js);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * The activity anchor event.\n     *\n     * @param {Event} event\n     */\n    _activityAnchor(event) {\n        const cm = this.reactive.get('cm', this.id);\n        // If the user cannot access the element but the element is present in the page\n        // the new url should be an anchor link.\n        const element = document.getElementById(cm.anchor);\n        if (element) {\n            // Marc the element as page item once the event is handled.\n            setTimeout(() => {\n                this.reactive.dispatch('setPageItem', 'cm', cm.id);\n            }, 50);\n            return;\n        }\n        // If the element is not present in the page we need to go to the specific section.\n        const course = this.reactive.get('course');\n        const section = this.reactive.get('section', cm.sectionid);\n        if (!section) {\n            return;\n        }\n        const url = `${course.baseurl}&section=${section.number}#${cm.anchor}`;\n        event.preventDefault();\n        window.location = url;\n    }\n}\n"],"names":["prefetchTemplate","Component","DndCmItem","create","name","selectors","CM_NAME","courseindex","cm","CM_COMPLETION","completion","classes","CMHIDDEN","cmHidden","LOCKED","locked","RESTRICTIONS","restrictions","PAGEITEM","pageItem","id","this","element","dataset","target","document","getElementById","stateReady","state","configDragDrop","get","course","_refreshCompletion","window","location","href","url","baseurl","anchor","reactive","dispatch","scrollIntoView","block","Config","contextid","courseContextId","contextInstanceId","uservisible","addEventListener","getElement","_activityAnchor","getWatchers","watch","handler","remove","_refreshCm","_refreshPageItem","classList","toggle","visible","innerHTML","DRAGGING","dragging","hascmrestrictions","isPageId","type","isEditing","istrackeduser","completionElement","value","completionstate","data","getExporter","cmCompletion","html","js","Templates","renderForPromise","replaceNode","error","event","setTimeout","section","sectionid","number","preventDefault"],"mappings":"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"}