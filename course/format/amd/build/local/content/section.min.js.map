{"version":3,"file":"section.min.js","sources":["../../../src/local/content/section.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course section format component.\n *\n * @module     core_courseformat/local/content/section\n * @class      core_courseformat/local/content/section\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Header from 'core_courseformat/local/content/section/header';\nimport DndSection from 'core_courseformat/local/courseeditor/dndsection';\nimport Templates from 'core/templates';\nimport selectors from 'core_courseformat/selectors';\n\nexport default class extends DndSection {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_section';\n        // Default query selectors.\n        this.selectors = {\n            SECTION_ITEM: selectors.content.section.item,\n            CM: selectors.content.cm.item,\n            SECTIONINFO: selectors.content.section.info,\n            SECTIONBADGES: selectors.content.section.badges,\n            SHOWSECTION: selectors.content.controls.showSection,\n            HIDESECTION: selectors.content.controls.hideSection,\n            ACTIONTEXT: selectors.content.controls.actionText,\n            ICON: selectors.content.controls.icon,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            LOCKED: selectors.content.classes.locked,\n            HASDESCRIPTION: selectors.content.classes.hasDescription,\n            HIDE: selectors.content.classes.hide,\n        };\n\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the initial state\n     */\n    stateReady(state) {\n        this.configState(state);\n        // Drag and drop is only available for components compatible course formats.\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\n            // Section zero and other formats sections may not have a title to drag.\n            const sectionItem = this.getElement(this.selectors.SECTION_ITEM);\n            if (sectionItem) {\n                // Init the inner dragable element.\n                const headerComponent = new Header({\n                    ...this,\n                    element: sectionItem,\n                    fullregion: this.element,\n                });\n                this.configDragDrop(headerComponent);\n            }\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `section[${this.id}]:updated`, handler: this._refreshSection},\n        ];\n    }\n\n    /**\n     * Validate if the drop data can be dropped over the component.\n     *\n     * @param {Object} dropdata the exported drop data.\n     * @returns {boolean}\n     */\n    validateDropData(dropdata) {\n        // If the format uses one section per page sections dropping in the content is ignored.\n       if (dropdata?.type === 'section' && this.reactive.sectionReturn != 0) {\n            return false;\n        }\n        return super.validateDropData(dropdata);\n    }\n\n    /**\n     * Get the last CM element of that section.\n     *\n     * @returns {element|null}\n     */\n    getLastCm() {\n        const cms = this.getElements(this.selectors.CM);\n        // DndUpload may add extra elements so :last-child selector cannot be used.\n        if (!cms || cms.length === 0) {\n            return null;\n        }\n        return cms[cms.length - 1];\n    }\n\n    /**\n     * Update a content section using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSection({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.locked = element.locked;\n        // The description box classes depends on the section state.\n        const sectioninfo = this.getElement(this.selectors.SECTIONINFO);\n        if (sectioninfo) {\n            sectioninfo.classList.toggle(this.classes.HASDESCRIPTION, element.hasrestrictions);\n        }\n        // Update section badges and menus.\n        this._updateBadges(element);\n        this._updateActionsMenu(element);\n    }\n\n    /**\n     * Update a section badges using the state information.\n     *\n     * @param {object} section the section state.\n     */\n    _updateBadges(section) {\n        const current = this.getElement(`${this.selectors.SECTIONBADGES} [data-type='iscurrent']`);\n        current.classList.toggle(this.classes.HIDE, !section.current);\n\n        const hiddenFromStudents = this.getElement(`${this.selectors.SECTIONBADGES} [data-type='hiddenfromstudents']`);\n        hiddenFromStudents.classList.toggle(this.classes.HIDE, section.visible);\n    }\n\n    /**\n     * Update a section action menus.\n     *\n     * @param {object} section the section state.\n     */\n    async _updateActionsMenu(section) {\n        let selector;\n        let newAction;\n        if (section.visible) {\n            selector = this.selectors.SHOWSECTION;\n            newAction = 'sectionHide';\n        } else {\n            selector = this.selectors.HIDESECTION;\n            newAction = 'sectionShow';\n        }\n        // Find the affected action.\n        const affectedAction = this.getElement(selector);\n        if (!affectedAction) {\n            return;\n        }\n        // Change action.\n        affectedAction.dataset.action = newAction;\n        // Change text.\n        const actionText = affectedAction.querySelector(this.selectors.ACTIONTEXT);\n        if (affectedAction.dataset?.swapname && actionText) {\n            const oldText = actionText?.innerText;\n            actionText.innerText = affectedAction.dataset.swapname;\n            affectedAction.dataset.swapname = oldText;\n        }\n        // Change icon.\n        const icon = affectedAction.querySelector(this.selectors.ICON);\n        if (affectedAction.dataset?.swapicon && icon) {\n            const newIcon = affectedAction.dataset.swapicon;\n            if (newIcon) {\n                const pixHtml = await Templates.renderPix(newIcon, 'core');\n                Templates.replaceNode(icon, pixHtml, '');\n            }\n        }\n    }\n}\n"],"names":["DndSection","create","name","selectors","SECTION_ITEM","content","section","item","CM","cm","SECTIONINFO","info","SECTIONBADGES","badges","SHOWSECTION","controls","showSection","HIDESECTION","hideSection","ACTIONTEXT","actionText","ICON","icon","classes","LOCKED","locked","HASDESCRIPTION","hasDescription","HIDE","hide","id","this","element","dataset","stateReady","state","configState","reactive","isEditing","supportComponents","sectionItem","getElement","headerComponent","Header","fullregion","configDragDrop","getWatchers","watch","handler","_refreshSection","validateDropData","dropdata","type","sectionReturn","super","getLastCm","cms","getElements","length","classList","toggle","DRAGGING","dragging","sectioninfo","hasrestrictions","_updateBadges","_updateActionsMenu","current","visible","selector","newAction","affectedAction","action","querySelector","swapname","oldText","innerText","swapicon","newIcon","pixHtml","Templates","renderPix","replaceNode"],"mappings":";;;;;;;;gSA6B6BA,oBAKzBC,cAESC,KAAO,uBAEPC,UAAY,CACbC,aAAcD,mBAAUE,QAAQC,QAAQC,KACxCC,GAAIL,mBAAUE,QAAQI,GAAGF,KACzBG,YAAaP,mBAAUE,QAAQC,QAAQK,KACvCC,cAAeT,mBAAUE,QAAQC,QAAQO,OACzCC,YAAaX,mBAAUE,QAAQU,SAASC,YACxCC,YAAad,mBAAUE,QAAQU,SAASG,YACxCC,WAAYhB,mBAAUE,QAAQU,SAASK,WACvCC,KAAMlB,mBAAUE,QAAQU,SAASO,WAGhCC,QAAU,CACXC,OAAQrB,mBAAUE,QAAQkB,QAAQE,OAClCC,eAAgBvB,mBAAUE,QAAQkB,QAAQI,eAC1CC,KAAMzB,mBAAUE,QAAQkB,QAAQM,WAI/BC,GAAKC,KAAKC,QAAQC,QAAQH,GAQnCI,WAAWC,eACFC,YAAYD,OAEbJ,KAAKM,SAASC,WAAaP,KAAKM,SAASE,kBAAmB,OAEtDC,YAAcT,KAAKU,WAAWV,KAAK5B,UAAUC,iBAC/CoC,YAAa,OAEPE,gBAAkB,IAAIC,gBAAO,IAC5BZ,KACHC,QAASQ,YACTI,WAAYb,KAAKC,eAEhBa,eAAeH,mBAUhCI,oBACW,CACH,CAACC,wBAAkBhB,KAAKD,gBAAekB,QAASjB,KAAKkB,kBAU7DC,iBAAiBC,iBAES,aAAnBA,MAAAA,gBAAAA,SAAUC,OAAqD,GAA/BrB,KAAKM,SAASgB,gBAG1CC,MAAMJ,iBAAiBC,UAQlCI,kBACUC,IAAMzB,KAAK0B,YAAY1B,KAAK5B,UAAUK,WAEvCgD,KAAsB,IAAfA,IAAIE,OAGTF,IAAIA,IAAIE,OAAS,GAFb,KAWfT,gEAAgBjB,QAACA,mBAERA,QAAQ2B,UAAUC,OAAO7B,KAAKR,QAAQsC,mCAAU7B,QAAQ8B,+DACxD9B,QAAQ2B,UAAUC,OAAO7B,KAAKR,QAAQC,+BAAQQ,QAAQP,yDACtDA,OAASO,QAAQP,aAEhBsC,YAAchC,KAAKU,WAAWV,KAAK5B,UAAUO,aAC/CqD,aACAA,YAAYJ,UAAUC,OAAO7B,KAAKR,QAAQG,eAAgBM,QAAQgC,sBAGjEC,cAAcjC,cACdkC,mBAAmBlC,SAQ5BiC,cAAc3D,SACMyB,KAAKU,qBAAcV,KAAK5B,UAAUS,2CAC1C+C,UAAUC,OAAO7B,KAAKR,QAAQK,MAAOtB,QAAQ6D,SAE1BpC,KAAKU,qBAAcV,KAAK5B,UAAUS,oDAC1C+C,UAAUC,OAAO7B,KAAKR,QAAQK,KAAMtB,QAAQ8D,kCAQ1C9D,8DACjB+D,SACAC,UACAhE,QAAQ8D,SACRC,SAAWtC,KAAK5B,UAAUW,YAC1BwD,UAAY,gBAEZD,SAAWtC,KAAK5B,UAAUc,YAC1BqD,UAAY,qBAGVC,eAAiBxC,KAAKU,WAAW4B,cAClCE,sBAILA,eAAetC,QAAQuC,OAASF,gBAE1BlD,WAAamD,eAAeE,cAAc1C,KAAK5B,UAAUgB,6CAC3DoD,eAAetC,gEAASyC,UAAYtD,WAAY,OAC1CuD,QAAUvD,MAAAA,kBAAAA,WAAYwD,UAC5BxD,WAAWwD,UAAYL,eAAetC,QAAQyC,SAC9CH,eAAetC,QAAQyC,SAAWC,cAGhCrD,KAAOiD,eAAeE,cAAc1C,KAAK5B,UAAUkB,wCACrDkD,eAAetC,kEAAS4C,UAAYvD,KAAM,OACpCwD,QAAUP,eAAetC,QAAQ4C,YACnCC,QAAS,OACHC,cAAgBC,mBAAUC,UAAUH,QAAS,2BACzCI,YAAY5D,KAAMyD,QAAS"}