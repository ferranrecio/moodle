{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {getList, getFirst} from 'core/normalise';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\n// Mutations are dispatched by the course content actions.\n// Formats can use this module addActions static method to add custom actions.\n// Direct mutations can be simple strings (mutation) name or functions.\nconst directMutations = {\n    sectionHide: 'sectionHide',\n    sectionShow: 'sectionShow',\n    cmHide: 'cmHide',\n    cmShow: 'cmShow',\n    cmStealth: 'cmStealth',\n};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n            // Availability modal selectors.\n            OPTIONSRADIO: `[type='radio']`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `disabled`,\n        };\n    }\n\n    /**\n     * Add extra actions to the module.\n     *\n     * @param {array} actions array of methods to execute\n     */\n    static addActions(actions) {\n        for (const [action, mutationReference] of Object.entries(actions)) {\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\n                throw new Error(`${action} action must be a mutation name or a function`);\n            }\n            directMutations[action] = mutationReference;\n        }\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const actionName = target.dataset.action;\n        const methodName = this._actionMethodName(actionName);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n            return;\n        }\n\n        // Check direct mutations or mutations handlers.\n        if (directMutations[actionName] !== undefined) {\n            if (typeof directMutations[actionName] === 'function') {\n                directMutations[actionName](target, event);\n                return;\n            }\n            this._requestMutationAction(target, event, directMutations[actionName]);\n            return;\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Return the ids represented by this element.\n     *\n     * Depending on the dataset attributes the action could represent a single id\n     * or a bulk actions with all the current selected ids.\n     *\n     * @param {HTMLElement} target\n     * @returns {Number[]} array of Ids\n     */\n    _getTargetIds(target) {\n        let ids = [];\n        if (target?.dataset?.id) {\n            ids.push(target.dataset.id);\n        }\n        const bulkType = target?.dataset?.bulk;\n        if (!bulkType) {\n            return ids;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (bulk.enabled && bulk.selectedType === bulkType) {\n            ids = [...ids, ...bulk.selection];\n        }\n        return ids;\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n        let titleText = null;\n\n        // Add the target section id and title.\n        let sectionInfo = null;\n        if (sectionIds.length == 1) {\n            sectionInfo = this.reactive.get('section', sectionIds[0]);\n            data.sectionid = sectionInfo.id;\n            data.sectiontitle = sectionInfo.title;\n            data.information = await this.reactive.getFormatString('sectionmove_info', data.sectiontitle);\n            titleText = this.reactive.getFormatString('sectionmove_title');\n        } else {\n            data.information = await this.reactive.getFormatString('sectionsmove_info', sectionIds.length);\n            titleText = this.reactive.getFormatString('sectionsmove_title');\n        }\n\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: titleText,\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current selected section ids.\n        sectionIds.forEach(sectionId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n            this._disableLink(currentElement);\n        });\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMoveAfter', sectionIds, target.dataset.id);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        let titleText = null;\n        if (cmIds.length == 1) {\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\n            data.cmid = cmInfo.id;\n            data.cmname = cmInfo.name;\n            data.information = await this.reactive.getFormatString('cmmove_info', data.cmname);\n            titleText = this.reactive.getFormatString('cmmove_title');\n        } else {\n            data.information = await this.reactive.getFormatString('cmsmove_info', cmIds.length);\n            titleText = this.reactive.getFormatString('cmsmove_title');\n        }\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: titleText,\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0]; // TODO: move to getFirst.\n\n        // Disable current selected section ids.\n        cmIds.forEach(cmId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n            this._disableLink(currentElement);\n        });\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery int this code can be replaced when MDL-71979 is integrated.\n        const elementsToExpand = new Set();\n        cmIds.forEach(cmId => {\n            const currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n            const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n            const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n            let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n            if (collapsibleId) {\n                // We cannot be sure we have # in the id element name.\n                collapsibleId = collapsibleId.replace('#', '');\n                elementsToExpand.add(collapsibleId);\n            }\n        });\n        elementsToExpand.forEach((collapsibleId) => {\n            jQuery(`#${collapsibleId}`).collapse('toggle');\n        });\n\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n            this.reactive.dispatch('cmMove', cmIds, targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        // We don't need confirmation to delete empty sections.\n        let needsConfirmation = sectionIds.some(sectionId => {\n            const sectionInfo = this.reactive.get('section', sectionId);\n            const cmList = sectionInfo.cmlist ?? [];\n            return (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle);\n        });\n        if (!needsConfirmation) {\n            this.reactive.dispatch('sectionDelete', sectionIds);\n            return;\n        }\n\n        let bodyText = null;\n        let titleText = null;\n        if (sectionIds.length == 1) {\n            titleText = this.reactive.getFormatString('sectiondelete_title');\n            const sectionInfo = this.reactive.get('section', sectionIds[0]);\n            bodyText = this.reactive.getFormatString('sectiondelete_info', {name: sectionInfo.title});\n        } else {\n            titleText = this.reactive.getFormatString('sectionsdelete_title');\n            bodyText = this.reactive.getFormatString('sectionsdelete_info', {count: sectionIds.length});\n        }\n\n        const modalParams = {\n            title: titleText,\n            body: bodyText,\n            type: ModalFactory.types.DELETE_CANCEL,\n        };\n\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        modal.getRoot().on(\n            ModalEvents.delete,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this.reactive.dispatch('sectionDelete', sectionIds);\n            }\n        );\n    }\n\n    /**\n     * Handle a toggle cm selection.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestToggleSelectionCm(target) {\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const value = target.checked ?? false;\n        const mutation = (value) ? 'cmSelect' : 'cmUnselect';\n        this.reactive.dispatch(mutation, [cmId]);\n    }\n\n    /**\n     * Handle a toggle section selection.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestToggleSelectionSection(target) {\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const value = target.checked ?? false;\n        const mutation = (value) ? 'sectionSelect' : 'sectionUnselect';\n        this.reactive.dispatch(mutation, [sectionId]);\n    }\n\n    /**\n     * Basic mutation action helper.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     * @param {string} mutationName the mutation name\n     */\n    async _requestMutationAction(target, event, mutationName) {\n        if (!target.dataset.id) {\n            return;\n        }\n        event.preventDefault();\n        this.reactive.dispatch(mutationName, [target.dataset.id]);\n    }\n\n    /**\n     * Handle a course module duplicate request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDuplicate(target, event) {\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const sectionId = target.dataset.sectionid ?? null;\n        event.preventDefault();\n        this.reactive.dispatch('cmDuplicate', [cmId], sectionId);\n    }\n\n    /**\n     * Handle a delete cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDelete(target, event) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n\n        event.preventDefault();\n\n        let bodyText = null;\n        let titleText = null;\n        if (cmIds.length == 1) {\n            const cmInfo = this.reactive.get('cm', cmIds[0]);\n            titleText = getString('cmdelete_title', 'core_courseformat');\n            bodyText = getString(\n                'cmdelete_info',\n                'core_courseformat',\n                {\n                    type: cmInfo.modname,\n                    name: cmInfo.name,\n                }\n            );\n        } else {\n            titleText = getString('cmsdelete_title', 'core_courseformat');\n            bodyText = getString(\n                'cmsdelete_info',\n                'core_courseformat',\n                {count: cmIds.length}\n            );\n        }\n\n        const modalParams = {\n            title: titleText,\n            body: bodyText,\n            type: ModalFactory.types.DELETE_CANCEL,\n        };\n\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        modal.getRoot().on(\n            ModalEvents.delete,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this.reactive.dispatch('cmDelete', cmIds);\n            }\n        );\n    }\n\n    /**\n     * Handle a cm availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestCmAvailability(target) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        // Show the availability modal to decide which action to trigger.\n        const exporter = this.reactive.getExporter();\n        const data = {\n            allowstealth: exporter.canUseStealth(this.reactive.state, cmIds),\n        };\n        const modalParams = {\n            title: getString('availability', 'core'),\n            body: Templates.render('core_courseformat/local/content/cm/availabilitymodal', data),\n            saveButtonText: getString('apply', 'core'),\n            type: ModalFactory.types.SAVE_CANCEL,\n        };\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        this._setupMutationRadioButtonModal(modal, cmIds);\n    }\n\n    /**\n     * Handle a section availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestSectionAvailability(target) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n        // Show the availability modal to decide which action to trigger.\n        const modalParams = {\n            title: getString('availability', 'core'),\n            body: Templates.render('core_courseformat/local/content/section/availabilitymodal', []),\n            saveButtonText: getString('apply', 'core'),\n            type: ModalFactory.types.SAVE_CANCEL,\n        };\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        this._setupMutationRadioButtonModal(modal, sectionIds);\n    }\n\n    /**\n     * Add events to a mutation selector radio buttons modal.\n     * @param {Modal} modal\n     * @param {Number[]} ids the section or cm ids to apply the mutation\n     */\n    _setupMutationRadioButtonModal(modal, ids) {\n        // The save button is not enabled until the user selects an option.\n        modal.setButtonDisabled('save', true);\n\n        const submitFunction = (radio) => {\n            const mutation = radio?.value;\n            if (!mutation) {\n                return false;\n            }\n            this.reactive.dispatch(mutation, ids);\n            return true;\n        };\n\n        const modalBody = getFirst(modal.getBody());\n        const radioOptions = modalBody.querySelectorAll(this.selectors.OPTIONSRADIO);\n        radioOptions.forEach(radio => {\n            radio.addEventListener('change', () => {\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('click', () => {\n                radio.checked = true;\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('dblclick', dbClickEvent => {\n                if (submitFunction(radio)) {\n                    dbClickEvent.preventDefault();\n                    modal.destroy();\n                }\n            });\n        });\n\n        modal.getRoot().on(\n            ModalEvents.save,\n            () => {\n                const radio = modalBody.querySelector(`${this.selectors.OPTIONSRADIO}:checked`);\n                submitFunction(radio);\n            }\n        );\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                if (modalParams.deleteButtonText !== undefined) {\n                    modal.setDeleteButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","BaseComponent","create","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","OPTIONSRADIO","classes","DISABLED","actions","action","mutationReference","Object","entries","Error","stateReady","state","addEventListener","this","element","_dispatchClick","_checkSectionlist","CourseEvents","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","requestName","charAt","toUpperCase","slice","_setAddSectionLocked","course","sectionlist","length","maxsections","_getTargetIds","ids","_target$dataset","id","push","bulkType","_target$dataset2","bulk","reactive","get","enabled","selectedType","selection","sectionIds","editTools","_getClosestActionMenuToogler","data","getExporter","titleText","sectionInfo","sectionid","sectiontitle","title","information","getFormatString","modalParams","body","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getBody","forEach","sectionId","currentElement","querySelector","_disableLink","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","cmIds","exporter","cmInfo","cmid","cmname","cmId","ENTER","elementsToExpand","Set","sectionnode","toggler","find","collapsibleId","attr","replace","add","collapse","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","some","hassummary","rawtitle","bodyText","count","type","ModalFactory","types","DELETE_CANCEL","getRoot","on","ModalEvents","delete","e","destroy","mutation","checked","mutationName","modname","allowstealth","canUseStealth","saveButtonText","SAVE_CANCEL","_setupMutationRadioButtonModal","setButtonDisabled","submitFunction","radio","value","querySelectorAll","parentNode","dbClickEvent","save","locked","getElements","toggle","setElementLocked","style","pointerEvents","userSelect","setAttribute","Promise","resolve","reject","then","setRemoveOnClose","bodyRendered","setSaveButtonText","deleteButtonText","setDeleteButtonText","show","catch","hide","pendingDestroy","Pending","focus","setTimeout","actionMenu"],"mappings":"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"}