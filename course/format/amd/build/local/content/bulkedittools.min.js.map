{"version":3,"file":"bulkedittools.min.js","sources":["../../../src/local/content/bulkedittools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The bulk editor tools bar.\n *\n * @module     core_courseformat/local/content/bulkedittoggler\n * @class      core_courseformat/local/content/bulkedittoggler\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {disableStickyFooter, enableStickyFooter} from 'core/sticky-footer';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport {get_string as getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\n\n// Load global strings.\nprefetchStrings(\n    'core_courseformat',\n    ['bulkselection']\n);\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'bulk_editor_tools';\n        // Default query selectors.\n        this.selectors = {\n            COUNT: `[data-for='bulkcount']`,\n            CANCEL: `[data-for=\"bulkcancel\"]`,\n            SELECTALL: `[data-for=\"selectall\"]`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            HIDE: 'd-none',\n        };\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {string} target optional altentative DOM main element CSS selector\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: getCurrentCourseEditor(),\n            selectors\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        const cancelBtn = this.getElement(this.selectors.CANCEL);\n        if (cancelBtn) {\n            this.addEventListener(cancelBtn, 'click', this._cancelBulk);\n        }\n        const selectAll = this.getElement(this.selectors.SELECTALL);\n        if (selectAll) {\n            this.addEventListener(selectAll, 'change', this._selectAllClick);\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `bulk.enabled:updated`, handler: this._refreshEnabled},\n            {watch: `bulk:updated`, handler: this._refreshTools},\n        ];\n    }\n\n    /**\n     * Hide and show the bulk edit tools.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details (state.bulk in this case).\n     */\n    _refreshEnabled({element}) {\n        if (element.enabled) {\n            enableStickyFooter();\n        } else {\n            disableStickyFooter();\n        }\n    }\n\n    /**\n     * Refresh the tools depending on the current selection.\n     *\n     * @param {object} param the state watcher information\n     * @param {Object} param.state the full state data.\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshTools(param) {\n        this._refreshSelectCount(param);\n        this._refreshSelectAll(param);\n    }\n\n    /**\n     * Refresh the selection count.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    async _refreshSelectCount({element: bulk}) {\n        const selectedCount = await getString('bulkselection', 'core_courseformat', bulk.selection.length);\n        const selectedElement = this.getElement(this.selectors.COUNT);\n        if (selectedElement) {\n            selectedElement.innerHTML = selectedCount;\n        }\n    }\n\n    /**\n     * Refresh the select all element.\n     *\n     * @param {object} param\n     * @param {Object} param.state the full state data.\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshSelectAll({state, element: bulk}) {\n        const selectall = this.getElement(this.selectors.SELECTALL);\n        if (!selectall) {\n            return;\n        }\n        if (bulk.selectedType === '') {\n            selectall.checked = false;\n            selectall.disabled = true;\n            return;\n        }\n        selectall.disabled = false;\n        const maxSelection = (bulk.selectedType === 'cm') ? state.cm.size : state.section.size;\n        selectall.checked = (bulk.selection.length == maxSelection);\n    }\n\n    _cancelBulk() {\n        this.reactive.dispatch('bulkEnable', false);\n    }\n\n    _selectAllClick(event) {\n        const target = event.target;\n        const bulk = this.reactive.get('bulk');\n        if (bulk.selectedType === '') {\n            return;\n        }\n        const state = this.reactive.state;\n        const allElements = state[bulk.selectedType];\n        if (!allElements) {\n            return;\n        }\n        if (target.checked) {\n            const mutation = (bulk.selectedType === 'cm') ? 'cmSelect' : 'sectionSelect';\n            this.reactive.dispatch(mutation, allElements.keys());\n        } else {\n            // Re-enable bulk will clean the selection and the selection type.\n            this.reactive.dispatch('bulkEnable', true);\n        }\n    }\n}\n"],"names":["Component","BaseComponent","create","name","selectors","COUNT","CANCEL","SELECTALL","classes","HIDE","target","this","element","document","querySelector","reactive","stateReady","cancelBtn","getElement","addEventListener","_cancelBulk","selectAll","_selectAllClick","getWatchers","watch","handler","_refreshEnabled","_refreshTools","enabled","param","_refreshSelectCount","_refreshSelectAll","bulk","selectedCount","selection","length","selectedElement","innerHTML","state","selectall","selectedType","checked","disabled","maxSelection","cm","size","section","dispatch","event","get","allElements","mutation","keys"],"mappings":";;;;;;;;;8BAgCI,oBACA,CAAC,wBAGgBA,kBAAkBC,wBAKnCC,cAESC,KAAO,yBAEPC,UAAY,CACbC,+BACAC,iCACAC,yCAGCC,QAAU,CACXC,KAAM,sBAWFC,OAAQN,kBACT,IAAIO,KAAK,CACZC,QAASC,SAASC,cAAcJ,QAChCK,UAAU,0CACVX,UAAAA,YAORY,mBACUC,UAAYN,KAAKO,WAAWP,KAAKP,UAAUE,QAC7CW,gBACKE,iBAAiBF,UAAW,QAASN,KAAKS,mBAE7CC,UAAYV,KAAKO,WAAWP,KAAKP,UAAUG,WAC7Cc,gBACKF,iBAAiBE,UAAW,SAAUV,KAAKW,iBASxDC,oBACW,CACH,CAACC,6BAA+BC,QAASd,KAAKe,iBAC9C,CAACF,qBAAuBC,QAASd,KAAKgB,gBAU9CD,0BAAgBd,QAACA,cACTA,QAAQgB,uFAchBD,cAAcE,YACLC,oBAAoBD,YACpBE,kBAAkBF,4CASAjB,QAASoB,kBAC1BC,oBAAsB,mBAAU,gBAAiB,oBAAqBD,KAAKE,UAAUC,QACrFC,gBAAkBzB,KAAKO,WAAWP,KAAKP,UAAUC,OACnD+B,kBACAA,gBAAgBC,UAAYJ,eAWpCF,6BAAkBO,MAACA,MAAO1B,QAASoB,kBACzBO,UAAY5B,KAAKO,WAAWP,KAAKP,UAAUG,eAC5CgC,oBAGqB,KAAtBP,KAAKQ,oBACLD,UAAUE,SAAU,OACpBF,UAAUG,UAAW,GAGzBH,UAAUG,UAAW,QACfC,aAAsC,OAAtBX,KAAKQ,aAAyBF,MAAMM,GAAGC,KAAOP,MAAMQ,QAAQD,KAClFN,UAAUE,QAAWT,KAAKE,UAAUC,QAAUQ,aAGlDvB,mBACSL,SAASgC,SAAS,cAAc,GAGzCzB,gBAAgB0B,aACNtC,OAASsC,MAAMtC,OACfsB,KAAOrB,KAAKI,SAASkC,IAAI,WACL,KAAtBjB,KAAKQ,0BAIHU,YADQvC,KAAKI,SAASuB,MACFN,KAAKQ,iBAC1BU,eAGDxC,OAAO+B,QAAS,OACVU,SAAkC,OAAtBnB,KAAKQ,aAAyB,WAAa,qBACxDzB,SAASgC,SAASI,SAAUD,YAAYE,kBAGxCrC,SAASgC,SAAS,cAAc"}