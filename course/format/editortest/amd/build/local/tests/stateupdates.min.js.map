{"version":3,"sources":["../../../src/local/tests/stateupdates.js"],"names":["Test","resultsid","target","document","getElementById","eventname","runTests","fakenode","createTextNode","statemanager","StateManager","setInitialState","sample","value","processUpdates","name","action","fields","assertEquals","state","newattribute","samples","id","get","same","sample2","newthing","updates","test1","addTest","error","assertTrue","notarray","missingname","missingfields","missingid","nonexistentid","TestBase"],"mappings":"iPA2BA,OACA,O,krDAEMA,CAAAA,C,0HAQGC,C,CAAW,CACZ,KAAKC,MAAL,CAAcC,QAAQ,CAACC,cAAT,CAAwBH,CAAxB,CAAd,CACA,KAAKI,SAAL,CAAiB,kBAAjB,CAKA,KAAKC,QAAL,GAEA,QACH,C,qCAKO,CAEJ,KAAKC,QAAL,CAAgBJ,QAAQ,CAACK,cAAT,CAAwB,IAAxB,CAAhB,CACA,KAAKC,YAAL,CAAoB,GAAIC,UAAJ,CAAiB,oBAAjB,CAA6B,KAAKH,QAAlC,CACvB,C,2DAKkB,CACf,KAAKE,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BC,MAAM,CAAE,CACJC,KAAK,CAAE,KADH,CADsB,CAAlC,EAKA,KAAKJ,YAAL,CAAkBK,cAAlB,CAAiC,CAC7B,CACIC,IAAI,CAAE,cADV,CAEIC,MAAM,CAAE,QAFZ,CAGIC,MAAM,CAAE,CACJJ,KAAK,CAAE,KADH,CAHZ,CAD6B,CAAjC,EASA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,KAAxB,CAA+B,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBP,MAAxB,CAA+BC,KAA9D,EACA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,KAAxB,CAA+B,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBC,YAAxB,CAAqCP,KAApE,CACH,C,mEAKsB,CACnB,KAAKJ,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BU,OAAO,CAAE,CACL,CACIC,EAAE,CAAE,CADR,CAEIT,KAAK,CAAE,OAFX,CADK,CAKL,CACIS,EAAE,CAAE,CADR,CAEIT,KAAK,CAAE,QAFX,CALK,CADqB,CAAlC,EAYA,KAAKJ,YAAL,CAAkBK,cAAlB,CAAiC,CAC7B,CACIC,IAAI,CAAE,SADV,CAEIC,MAAM,CAAE,QAFZ,CAGIC,MAAM,CAAE,CACJK,EAAE,CAAE,CADA,CAEJT,KAAK,CAAE,OAFH,CAHZ,CAD6B,CAAjC,EAUA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,OAAxB,CAAiC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,EAAuCV,KAAxE,EACA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,QAAxB,CAAkC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,EAAuCV,KAAzE,EACA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,OAAxB,CAAiC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,EAAuCV,KAAxE,CACH,C,2DAKkB,CACf,KAAKJ,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BC,MAAM,CAAE,CACJY,IAAI,CAAE,MADF,CAEJX,KAAK,CAAE,KAFH,CADsB,CAK9BY,OAAO,CAAE,CACLZ,KAAK,CAAE,KADF,CALqB,CAAlC,EASA,KAAKJ,YAAL,CAAkBK,cAAlB,CAAiC,CAC7B,CACIC,IAAI,CAAE,QADV,CAEIC,MAAM,CAAE,QAFZ,CAGIC,MAAM,CAAE,CACJJ,KAAK,CAAE,UADH,CAEJa,QAAQ,CAAE,YAFN,CAHZ,CAD6B,CAAjC,EAUA,KAAKR,YAAL,CAAkB,IAAlB,CAAwB,MAAxB,CAAgC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBP,MAAxB,CAA+BY,IAA/D,EACA,KAAKN,YAAL,CAAkB,IAAlB,CAAwB,UAAxB,CAAoC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBP,MAAxB,CAA+BC,KAAnE,EACA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,YAAxB,CAAsC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBP,MAAxB,CAA+Bc,QAArE,EACA,KAAKR,YAAL,CAAkB,IAAlB,CAAwB,KAAxB,CAA+B,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBM,OAAxB,CAAgCZ,KAA/D,CACH,C,mEAKsB,CACnB,KAAKJ,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BU,OAAO,CAAE,CACL,CACIC,EAAE,CAAE,CADR,CAEIT,KAAK,CAAE,OAFX,CADK,CAKL,CACIS,EAAE,CAAE,CADR,CAEIT,KAAK,CAAE,QAFX,CALK,CADqB,CAAlC,EAYA,KAAKJ,YAAL,CAAkBK,cAAlB,CAAiC,CAC7B,CACIC,IAAI,CAAE,SADV,CAEIC,MAAM,CAAE,QAFZ,CAGIC,MAAM,CAAE,CACJK,EAAE,CAAE,CADA,CAEJT,KAAK,CAAE,OAFH,CAHZ,CAD6B,CAAjC,EAUA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,OAAxB,CAAiC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,EAAuCV,KAAxE,EACA,KAAKK,YAAL,CAAkB,IAAlB,CAAwB,OAAxB,CAAiC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,EAAuCV,KAAxE,CACH,C,2DAKkB,CACf,KAAKJ,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BC,MAAM,CAAE,CACJC,KAAK,CAAE,KADH,CADsB,CAI9BY,OAAO,CAAE,CACLZ,KAAK,CAAE,KADF,CAJqB,CAAlC,EAQA,KAAKJ,YAAL,CAAkBK,cAAlB,CAAiC,CAC7B,CACIC,IAAI,CAAE,QADV,CAEIC,MAAM,CAAE,QAFZ,CAGIC,MAAM,CAAE,EAHZ,CAD6B,CAAjC,EAOA,KAAKC,YAAL,CAAkB,IAAlB,QAAmC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBP,MAA3D,EACA,KAAKM,YAAL,CAAkB,IAAlB,CAAwB,KAAxB,CAA+B,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBM,OAAxB,CAAgCZ,KAA/D,CACH,C,mEAKsB,CACnB,KAAKJ,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BU,OAAO,CAAE,CACL,CACIC,EAAE,CAAE,CADR,CAEIT,KAAK,CAAE,OAFX,CADK,CAKL,CACIS,EAAE,CAAE,CADR,CAEIT,KAAK,CAAE,QAFX,CALK,CADqB,CAAlC,EAYA,KAAKJ,YAAL,CAAkBK,cAAlB,CAAiC,CAC7B,CACIC,IAAI,CAAE,SADV,CAEIC,MAAM,CAAE,QAFZ,CAGIC,MAAM,CAAE,CACJK,EAAE,CAAE,CADA,CAHZ,CAD6B,CAAjC,EASA,KAAKJ,YAAL,CAAkB,IAAlB,CAAwB,OAAxB,CAAiC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,EAAuCV,KAAxE,EACA,KAAKK,YAAL,CAAkB,IAAlB,QAAmC,KAAKT,YAAL,CAAkBU,KAAlB,CAAwBE,OAAxB,CAAgCE,GAAhC,CAAoC,CAApC,CAAnC,CACH,C,kEAOoBI,C,CAAS,CAC1B,KAAKlB,YAAL,CAAkBE,eAAlB,CAAkC,CAC9BC,MAAM,CAAE,CACJC,KAAK,CAAE,IADH,CADsB,CAI9BQ,OAAO,CAAE,CACL,CAACC,EAAE,CAAE,CAAL,CAAQT,KAAK,CAAE,SAAf,CADK,CAJqB,CAAlC,EAQA,GAAMe,CAAAA,CAAK,CAAG,KAAKC,OAAL,CAAa,qBAAb,IAAd,CACA,GAAI,CACA,KAAKpB,YAAL,CAAkBK,cAAlB,CAAiCa,CAAjC,CACH,CAAC,MAAOG,CAAP,CAAc,CACZ,KAAKC,UAAL,CAAgBH,CAAhB,IACH,CACJ,C,2FAEkC,CAC/B,MAAO,CAEHI,QAAQ,CAAE,WAFP,CAIHC,WAAW,CAAE,CAAC,CACVjB,MAAM,CAAE,QADE,CAEVC,MAAM,CAAE,CACJK,EAAE,CAAE,CADA,CAEJT,KAAK,CAAE,QAFH,CAFE,CAAD,CAJV,CAYHqB,aAAa,CAAE,CAAC,CACZnB,IAAI,CAAE,QADM,CAEZC,MAAM,CAAE,QAFI,CAAD,CAZZ,CAiBHmB,SAAS,CAAE,CAAC,CACRpB,IAAI,CAAE,SADE,CAERC,MAAM,CAAE,QAFA,CAGRC,MAAM,CAAE,CACJJ,KAAK,CAAE,QADH,CAHA,CAAD,CAjBR,CAyBHuB,aAAa,CAAE,CAAC,CACZrB,IAAI,CAAE,SADM,CAEZC,MAAM,CAAE,QAFI,CAGZC,MAAM,CAAE,CACJK,EAAE,CAAE,CADA,CAEJT,KAAK,CAAE,QAFH,CAHI,CAAD,CAzBZ,CAkCV,C,cA1PcwB,S,IA6PJ,GAAIrC,CAAAA,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component to test state updates messages.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/stateupdates\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport StateManager from 'core_course/local/editor/statemanager';\nimport TestBase from 'format_editortest/local/tests/testbase';\n\nclass Test extends TestBase {\n\n    /**\n     * Initialize the component.\n     *\n     * @param {string} resultsid the result element id.\n     * @returns {boolean}\n     */\n    init(resultsid) {\n        this.target = document.getElementById(resultsid);\n        this.eventname = 'reactive_changed';\n\n        // This test module only tests the reactive module. We don't not need\n        // to be registered as an editor component for this.\n\n        this.runTests();\n\n        return true;\n    }\n\n    /**\n     * Test setup.\n     */\n    setUp() {\n        // We don't care about events this time.\n        this.fakenode = document.createTextNode(null);\n        this.statemanager = new StateManager(() => true, this.fakenode);\n    }\n\n    /**\n     * Process create new state object.\n     */\n    testUpdateCreate() {\n        this.statemanager.setInitialState({\n            sample: {\n                value: 'OK1',\n            }\n        });\n        this.statemanager.processUpdates([\n            {\n                name: 'newattribute',\n                action: 'create',\n                fields: {\n                    value: 'OK2',\n                },\n            },\n        ]);\n        this.assertEquals(null, 'OK1', this.statemanager.state.sample.value);\n        this.assertEquals(null, 'OK2', this.statemanager.state.newattribute.value);\n    }\n\n    /**\n     * Process create new list element.\n     */\n    testUpdateCreateList() {\n        this.statemanager.setInitialState({\n            samples: [\n                {\n                    id: 3,\n                    value: 'first',\n                },\n                {\n                    id: 4,\n                    value: 'second',\n                },\n            ]\n        });\n        this.statemanager.processUpdates([\n            {\n                name: 'samples',\n                action: 'create',\n                fields: {\n                    id: 5,\n                    value: 'third',\n                },\n            },\n        ]);\n        this.assertEquals(null, 'first', this.statemanager.state.samples.get(3).value);\n        this.assertEquals(null, 'second', this.statemanager.state.samples.get(4).value);\n        this.assertEquals(null, 'third', this.statemanager.state.samples.get(5).value);\n    }\n\n    /**\n     * Update a state object.\n     */\n    testUpdateUpdate() {\n        this.statemanager.setInitialState({\n            sample: {\n                same: 'Same',\n                value: 'OK1',\n            },\n            sample2: {\n                value: 'OK2',\n            },\n        });\n        this.statemanager.processUpdates([\n            {\n                name: 'sample',\n                action: 'update',\n                fields: {\n                    value: 'newvalue',\n                    newthing: 'newelement',\n                },\n            },\n        ]);\n        this.assertEquals(null, 'Same', this.statemanager.state.sample.same);\n        this.assertEquals(null, 'newvalue', this.statemanager.state.sample.value);\n        this.assertEquals(null, 'newelement', this.statemanager.state.sample.newthing);\n        this.assertEquals(null, 'OK2', this.statemanager.state.sample2.value);\n    }\n\n    /**\n     * Update a state list element.\n     */\n    testUpdateUpdateList() {\n        this.statemanager.setInitialState({\n            samples: [\n                {\n                    id: 3,\n                    value: 'first',\n                },\n                {\n                    id: 4,\n                    value: 'second',\n                },\n            ]\n        });\n        this.statemanager.processUpdates([\n            {\n                name: 'samples',\n                action: 'update',\n                fields: {\n                    id: 4,\n                    value: 'third',\n                },\n            },\n        ]);\n        this.assertEquals(null, 'first', this.statemanager.state.samples.get(3).value);\n        this.assertEquals(null, 'third', this.statemanager.state.samples.get(4).value);\n    }\n\n    /**\n     * Delete a state attribute.\n     */\n    testUpdateDelete() {\n        this.statemanager.setInitialState({\n            sample: {\n                value: 'OK1',\n            },\n            sample2: {\n                value: 'OK2',\n            },\n        });\n        this.statemanager.processUpdates([\n            {\n                name: 'sample',\n                action: 'delete',\n                fields: {},\n            },\n        ]);\n        this.assertEquals(null, undefined, this.statemanager.state.sample);\n        this.assertEquals(null, 'OK2', this.statemanager.state.sample2.value);\n    }\n\n    /**\n     * Delete a state list element.\n     */\n    testUpdateDeleteList() {\n        this.statemanager.setInitialState({\n            samples: [\n                {\n                    id: 3,\n                    value: 'first',\n                },\n                {\n                    id: 4,\n                    value: 'second',\n                },\n            ]\n        });\n        this.statemanager.processUpdates([\n            {\n                name: 'samples',\n                action: 'delete',\n                fields: {\n                    id: 4,\n                },\n            },\n        ]);\n        this.assertEquals(null, 'first', this.statemanager.state.samples.get(3).value);\n        this.assertEquals(null, undefined, this.statemanager.state.samples.get(4));\n    }\n\n    /**\n     * Test update exceptions.\n     *\n     * @param {object} updates the update message to process\n     */\n    testUpdateExceptions(updates) {\n        this.statemanager.setInitialState({\n            sample: {\n                value: 'OK',\n            },\n            samples: [\n                {id: 1, value: 'OK List'}\n            ],\n        });\n        const test1 = this.addTest('Test invalid update', false);\n        try {\n            this.statemanager.processUpdates(updates);\n        } catch (error) {\n            this.assertTrue(test1, true);\n        }\n    }\n\n    dataProviderTestUpdateExceptions() {\n        return {\n            // Only arrays are allowed as update lists.\n            notarray: 'something',\n            // All updates must provide a name attribute.\n            missingname: [{\n                action: 'update',\n                fields: {\n                    id: 1,\n                    value: 'Not OK',\n                },\n            }],\n            // All updates must provide a fields attribute.\n            missingfields: [{\n                name: 'sample',\n                action: 'update',\n            }],\n            // Lists updates must provide an id.\n            missingid: [{\n                name: 'samples',\n                action: 'update',\n                fields: {\n                    value: 'Not OK',\n                },\n            }],\n            // List updates can only be done on nonexistent values.\n            nonexistentid: [{\n                name: 'samples',\n                action: 'update',\n                fields: {\n                    id: 2,\n                    value: 'Not OK',\n                },\n            }],\n        };\n    }\n}\n\nexport default new Test();\n"],"file":"stateupdates.min.js"}