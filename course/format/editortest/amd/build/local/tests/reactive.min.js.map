{"version":3,"sources":["../../../src/local/tests/reactive.js"],"names":["Test","eventname","detail","target","document","dispatchEvent","CustomEvent","bubbles","test1","addAssert","reactive","Reactive","name","eventdispatch","state","tocheck","value","mutations","registerComponent","stateReady","assertTrue","setInitialState","expectException","passTest","statemanager","param1","param2","dispatch","test2","alter","newvalue","setLocked","getWatchers","watch","handler","element","watcher","nowatch","nohandler","error","somemutation","Error","test3","original","modified","addMutations","newmutation","NewMutations","test","testid","setMutations","getState","log","debug","test4","addEventListener","test5","test6","reactive1","tocheck2","reactive2","assertEquals","TestBase"],"mappings":"kOA2BA,OACA,OACA,O,krDAEMA,CAAAA,C,6HAKM,CACJ,KAAKC,SAAL,CAAiB,kBACpB,C,oDAQaC,C,CAAQC,C,CAAQ,CAC1B,GAAIA,CAAM,SAAV,CAA0B,CACtBA,CAAM,CAAGC,QACZ,CACDD,CAAM,CAACE,aAAP,CAAqB,GAAIC,CAAAA,WAAJ,CAAgB,kBAAhB,CAAoC,CACrDC,OAAO,GAD8C,CAErDL,MAAM,CAAEA,CAF6C,CAApC,CAArB,CAIH,C,mDAKc,YACLM,CAAK,CAAG,KAAKC,SAAL,CAAe,gCAAf,CADH,CAGLC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BV,MAAM,CAAE,KAAKA,MAJa,CAK1BW,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CALmB,CAQ1BC,SAAS,CAAE,EARe,CAAb,CAHN,CAcXP,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,oBAACL,CAAD,CAAW,CACnB,CAAI,CAACM,UAAL,CAAgBZ,CAAhB,CAA+C,IAAxB,GAAAM,CAAK,CAACC,OAAN,CAAcC,KAArC,CACH,CAHsB,CAA3B,CAKH,C,iEAMqB,YACZR,CAAK,CAAG,KAAKC,SAAL,CAAe,+BAAf,CADI,CAGZC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BV,MAAM,CAAE,KAAKA,MAJa,CAK1Bc,SAAS,CAAE,EALe,CAAb,CAHC,CAWlBP,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,oBAACL,CAAD,CAAW,CACnB,CAAI,CAACM,UAAL,CAAgBZ,CAAhB,CAA+C,IAAxB,GAAAM,CAAK,CAACC,OAAN,CAAcC,KAArC,CACH,CAHsB,CAA3B,EAKAN,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,CAGH,C,2EAK0B,CAEvB,GAAMN,CAAAA,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BV,MAAM,CAAE,KAAKA,MAJa,CAK1BW,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CALmB,CAQ1BC,SAAS,CAAE,EARe,CAAb,CAAjB,CAWA,KAAKK,eAAL,GAEAZ,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,CAGH,C,2EAK0B,CAEvB,GAAMN,CAAAA,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BV,MAAM,CAAE,KAAKA,MAJa,CAK1Bc,SAAS,CAAE,EALe,CAAb,CAAjB,CAQAP,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,EAIA,KAAKM,eAAL,GAEAZ,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,CAGH,C,6DAKmB,YACVR,CAAK,CAAG,KAAKC,SAAL,CAAe,2CAAf,CADE,CAGVC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,EAPe,CAAb,CAHD,CAahBP,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,oBAACL,CAAD,CAAW,CACnB,CAAI,CAACM,UAAL,CAAgBZ,CAAhB,CAA+C,IAAxB,GAAAM,CAAK,CAACC,OAAN,CAAcC,KAArC,CACH,CAHsB,CAA3B,CAKH,C,uDAKgB,YAEPN,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BI,SAAS,CAAE,EAJe,CAAb,CAFJ,CASbP,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,oBAACL,CAAD,CAAW,CACnB,CAAI,CAACM,UAAL,CAAgBZ,CAAhB,CAA+C,IAAxB,GAAAM,CAAK,CAACC,OAAN,CAAcC,KAArC,CACH,CAHsB,CAA3B,EAMA,GAAMR,CAAAA,CAAK,CAAG,KAAKC,SAAL,CAAe,gEAAf,CAAd,CAEAC,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,CAGH,C,qDAKe,YACNR,CAAK,CAAG,KAAKC,SAAL,CAAe,iCAAf,CADF,CAGNC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,CACPM,QAAQ,CAAE,kBAACC,CAAD,CAAeC,CAAf,CAAuBC,CAAvB,CAAkC,CACxC,GAAMZ,CAAAA,CAAK,CAAGU,CAAY,CAACV,KAA3B,CACA,CAAI,CAACM,UAAL,CAAgBZ,CAAhB,CAA+C,IAAxB,GAAAM,CAAK,CAACC,OAAN,CAAcC,KAAd,EAA2C,GAAX,GAAAS,CAAhC,EAAkD,KAAAC,CAAzE,CACH,CAJM,CAPe,CAAb,CAHL,CAiBZhB,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,qBAAM,CACdT,CAAQ,CAACiB,QAAT,CAAkB,UAAlB,CAA8B,GAA9B,IACH,CAHsB,CAA3B,CAKH,C,mDAKc,YACLnB,CAAK,CAAG,KAAKC,SAAL,CAAe,wBAAf,CADH,CAELmB,CAAK,CAAG,KAAKnB,SAAL,CAAe,sBAAf,CAFH,CAILC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,CACPY,KAAK,CAAE,eAACL,CAAD,CAAeM,CAAf,CAA4B,CAC/B,GAAMhB,CAAAA,CAAK,CAAGU,CAAY,CAACV,KAA3B,CACAU,CAAY,CAACO,SAAb,KACAjB,CAAK,CAACC,OAAN,CAAcC,KAAd,CAAsBc,CAAtB,CACAN,CAAY,CAACO,SAAb,IACH,CANM,CAPe,CAAb,CAJN,CAqBXrB,CAAQ,CAACQ,iBAAT,CAA2B,CACvBc,WAAW,CAAE,6BAAM,CACf,CACIC,KAAK,CAAE,uBADX,CAEIC,OAAO,CAAE,mBAAe,IAAbC,CAAAA,CAAa,GAAbA,OAAa,CACpB,CAAI,CAACf,UAAL,CAAgBZ,CAAhB,CAAyC,SAAlB,GAAA2B,CAAO,CAACnB,KAA/B,CACH,CAJL,CADe,CAOf,CACIiB,KAAK,CAAE,iBADX,CAEIC,OAAO,CAAE,mBAAe,IAAbC,CAAAA,CAAa,GAAbA,OAAa,CACpB,CAAI,CAACf,UAAL,CAAgBQ,CAAhB,CAAyC,SAAlB,GAAAO,CAAO,CAACnB,KAA/B,CACH,CAJL,CAPe,CAAN,CADU,CAevBG,UAAU,CAAE,qBAAM,CACdT,CAAQ,CAACiB,QAAT,CAAkB,OAAlB,CAA2B,SAA3B,CACH,CAjBsB,CAA3B,CAmBH,C,4DAOiBS,C,CAAS,CAEvB,GAAM1B,CAAAA,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAAb,CAAjB,CAMA,KAAKS,eAAL,GAEAZ,CAAQ,CAACQ,iBAAT,CAA2B,CACvBc,WAAW,CAAE,6BAAM,CAACI,CAAD,CAAN,CADU,CAA3B,CAGH,C,qFAE+B,CAC5B,MAAO,CACHC,OAAO,CAAE,CACLH,OAAO,CAAE,kBAAM,CACX,QACH,CAHI,CADN,CAMHI,SAAS,CAAE,CACPL,KAAK,CAAE,uBADA,CANR,CAUV,C,6DAKmB,YACVzB,CAAK,CAAG,KAAKC,SAAL,CAAe,4CAAf,CADE,CAGVC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAAb,CAHD,CAWhBN,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,qBAAM,CAEd,GAAI,CACAT,CAAQ,CAACiB,QAAT,CAAkB,cAAlB,CAAkC,GAAlC,KACA,CAAI,CAACP,UAAL,CAAgBZ,CAAhB,IACH,CAAC,MAAO+B,CAAP,CAAc,CACZ,CAAI,CAACnB,UAAL,CAAgBZ,CAAhB,IACH,CACJ,CATsB,CAA3B,CAWH,C,qEAKuB,YACdA,CAAK,CAAG,KAAKC,SAAL,CAAe,iCAAf,CADM,CAGdC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,CACPuB,YAAY,CAAE,uBAAM,CAChB,KAAMC,CAAAA,KAAK,CAAC,MAAD,CACd,CAHM,CAPe,CAAb,CAHG,CAgBpB/B,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,qBAAM,CAEd,GAAI,CACAT,CAAQ,CAACiB,QAAT,CAAkB,cAAlB,CAAkC,GAAlC,KACA,CAAI,CAACP,UAAL,CAAgBZ,CAAhB,IACH,CAAC,MAAO+B,CAAP,CAAc,CACZ,CAAI,CAACnB,UAAL,CAAgBZ,CAAhB,IACH,CACJ,CATsB,CAA3B,CAWH,C,2DAKkB,YACTA,CAAK,CAAG,KAAKC,SAAL,CAAe,kDAAf,CADC,CAETmB,CAAK,CAAG,KAAKnB,SAAL,CAAe,8BAAf,CAFC,CAGTiC,CAAK,CAAG,KAAKjC,SAAL,CAAe,yBAAf,CAHC,CAKTC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,CACP0B,QAAQ,CAAE,mBAAM,CACZ,CAAI,CAACvB,UAAL,CAAgBZ,CAAhB,IACH,CAHM,CAIPoC,QAAQ,CAAE,mBAAM,CACZ,CAAI,CAACxB,UAAL,CAAgBQ,CAAhB,IACH,CANM,CAPe,CAAb,CALF,CAqBflB,CAAQ,CAACmC,YAAT,CAAsB,CAClBD,QAAQ,CAAE,mBAAM,CACZ,CAAI,CAACxB,UAAL,CAAgBQ,CAAhB,IACH,CAHiB,CAIlBkB,WAAW,CAAE,sBAAM,CACf,CAAI,CAAC1B,UAAL,CAAgBsB,CAAhB,IACH,CANiB,CAAtB,EAQAhC,CAAQ,CAACQ,iBAAT,CAA2B,CACvBC,UAAU,CAAE,qBAAM,CACdT,CAAQ,CAACiB,QAAT,CAAkB,UAAlB,EACAjB,CAAQ,CAACiB,QAAT,CAAkB,UAAlB,EACAjB,CAAQ,CAACiB,QAAT,CAAkB,aAAlB,CACH,CALsB,CAA3B,CAOH,C,2DAKkB,YACTnB,CAAK,CAAG,KAAKC,SAAL,CAAe,kCAAf,IADC,CAGTC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,CACPY,KAAK,CAAE,gBAAM,CACT,CAAI,CAACT,UAAL,CAAgBZ,CAAhB,IACH,CAHM,CAPe,CAAb,CAHF,CAkBTuC,CAlBS,YAoBX,WAAYC,CAAZ,CAAkB,WACd,KAAKA,IAAL,CAAYA,CACf,CAtBU,uCAwBLxB,CAxBK,CAwBSyB,CAxBT,CAwBiB,CACxB,KAAKD,IAAL,CAAU5B,UAAV,CAAqB6B,CAArB,IACH,CA1BU,gBA6BfvC,CAAQ,CAACwC,YAAT,CAAsB,GAAIH,CAAAA,CAAJ,CAAiB,IAAjB,CAAtB,EAEArC,CAAQ,CAACiB,QAAT,CAAkB,OAAlB,CAA2BnB,CAA3B,CACH,C,mDAKc,IACLA,CAAAA,CAAK,CAAG,KAAKC,SAAL,CAAe,gBAAf,CADH,CAGLC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAAb,CAHN,CAQXH,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,EAGA,GAAMF,CAAAA,CAAK,CAAGJ,CAAQ,CAACyC,QAAT,EAAd,CACA,KAAK/B,UAAL,CAAgBZ,CAAhB,CAA+C,IAAxB,GAAAM,CAAK,CAACC,OAAN,CAAcC,KAArC,CACH,C,iFAK6B,YACpBR,CAAK,CAAG,KAAKC,SAAL,CAAe,uDAAf,CADY,CAEpBmB,CAAK,CAAG,KAAKnB,SAAL,CAAe,qDAAf,CAFY,CAGpBiC,CAAK,CAAG,KAAKjC,SAAL,CAAe,uDAAf,CAHY,CAKpBC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADN,CAJmB,CAO1BC,SAAS,CAAE,CACPY,KAAK,CAAE,eAACL,CAAD,CAAeM,CAAf,CAA4B,CAC/B,GAAMhB,CAAAA,CAAK,CAAGU,CAAY,CAACV,KAA3B,CACAU,CAAY,CAACO,SAAb,KACAjB,CAAK,CAACC,OAAN,CAAcC,KAAd,CAAsBc,CAAtB,CACAN,CAAY,CAACO,SAAb,IACH,CANM,CAPe,CAAb,CALS,CAqB1BrB,CAAQ,CAACQ,iBAAT,CAA2B,CACvBc,WAAW,CAAE,6BAAM,CACf,CACIC,KAAK,CAAE,iBADX,CAEIC,OAAO,CAAE,mBAAsB,IAApBpB,CAAAA,CAAoB,GAApBA,KAAoB,CAAbqB,CAAa,GAAbA,OAAa,CAE3B,GAAI,CACArB,CAAK,CAACC,OAAN,CAAcC,KAAd,CAAsB,MAAtB,CACA,CAAI,CAACI,UAAL,CAAgBQ,CAAhB,IACH,CAAC,MAAOW,CAAP,CAAc,CACZ,CAAI,CAACnB,UAAL,CAAgBQ,CAAhB,IACH,CACD,GAAI,CACAO,CAAO,CAACnB,KAAR,CAAgB,MAAhB,CACAoC,UAAIC,KAAJ,CAAUlB,CAAV,EACA,CAAI,CAACf,UAAL,CAAgBsB,CAAhB,IACH,CAAC,MAAOH,CAAP,CAAc,CACZ,CAAI,CAACnB,UAAL,CAAgBsB,CAAhB,IACH,CACJ,CAjBL,CADe,CAAN,CADU,CAsBvBvB,UAAU,CAAE,oBAACL,CAAD,CAAW,CAEnB,GAAI,CACAA,CAAK,CAACC,OAAN,CAAcC,KAAd,CAAsB,MAAtB,CACA,CAAI,CAACI,UAAL,CAAgBZ,CAAhB,IACH,CAAC,MAAO+B,CAAP,CAAc,CACZ,CAAI,CAACnB,UAAL,CAAgBZ,CAAhB,IACH,CAEDE,CAAQ,CAACiB,QAAT,CAAkB,OAAlB,CAA2B,SAA3B,CACH,CAhCsB,CAA3B,CAkCH,C,yDAKiB,YACRnB,CAAK,CAAG,KAAKC,SAAL,CAAe,iCAAf,CADA,CAERmB,CAAK,CAAG,KAAKnB,SAAL,CAAe,+BAAf,IAFA,CAGRiC,CAAK,CAAG,KAAKjC,SAAL,CAAe,sCAAf,CAHA,CAIR6C,CAAK,CAAG,KAAK7C,SAAL,CAAe,+CAAf,IAJA,CAMRC,CAAQ,CAAG,GAAIC,UAAJ,CAAa,CAC1BC,IAAI,CAAE,cADoB,CAE1BX,SAAS,CAAE,KAAKA,SAFU,CAG1BY,aAAa,CAAE,KAAKA,aAHM,CAI1BI,SAAS,CAAE,CACPY,KAAK,CAAE,eAACL,CAAD,CAAeM,CAAf,CAA4B,CAC/B,GAAMhB,CAAAA,CAAK,CAAGU,CAAY,CAACV,KAA3B,CACAU,CAAY,CAACO,SAAb,KACAjB,CAAK,CAACC,OAAN,CAAcC,KAAd,CAAsBc,CAAtB,CACAN,CAAY,CAACO,SAAb,IACH,CANM,CAJe,CAAb,CANH,CAmBd3B,QAAQ,CAACmD,gBAAT,CAA0B,iBAA1B,CAA6C,UAAM,CAC/C,CAAI,CAACnC,UAAL,CAAgBQ,CAAhB,IACH,CAFD,EAGAxB,QAAQ,CAACmD,gBAAT,CAA0B,uBAA1B,CAAmD,UAAM,CACrD,CAAI,CAACnC,UAAL,CAAgBkC,CAAhB,IACH,CAFD,EAIA5C,CAAQ,CAACQ,iBAAT,CAA2B,CACvBc,WAAW,CAAE,6BAAM,CACf,CACIC,KAAK,CAAE,iBADX,CAEIC,OAAO,CAAE,kBAAM,CACX,CAAI,CAACd,UAAL,CAAgBZ,CAAhB,IACH,CAJL,CADe,CAOf,CACIyB,KAAK,CAAE,uBADX,CAEIC,OAAO,CAAE,kBAAM,CACX,CAAI,CAACd,UAAL,CAAgBsB,CAAhB,IACH,CAJL,CAPe,CAAN,CADU,CAevBvB,UAAU,CAAE,qBAAM,CACdT,CAAQ,CAACiB,QAAT,CAAkB,OAAlB,CAA2B,SAA3B,CACH,CAjBsB,CAA3B,EAoBAjB,CAAQ,CAACW,eAAT,CAAyB,CACrBN,OAAO,CAAE,CAACC,KAAK,CAAE,IAAR,CADY,CAAzB,CAGH,C,6EAK2B,YAClBR,CAAK,CAAG,KAAKC,SAAL,CAAe,qDAAf,CADU,CAElBmB,CAAK,CAAG,KAAKnB,SAAL,CAAe,qDAAf,CAFU,CAGlBiC,CAAK,CAAG,KAAKjC,SAAL,CAAe,0CAAf,CAHU,CAIlB6C,CAAK,CAAG,KAAK7C,SAAL,CAAe,sCAAf,IAJU,CAKlB+C,CAAK,CAAG,KAAK/C,SAAL,CAAe,sCAAf,IALU,CAMlBgD,CAAK,CAAG,KAAKhD,SAAL,CAAe,0CAAf,CANU,CAQlBiD,CAAS,CAAG,GAAI/C,UAAJ,CAAa,CAC3BC,IAAI,CAAE,eADqB,CAE3BX,SAAS,CAAE,KAAKA,SAFW,CAG3BY,aAAa,CAAE,KAAKA,aAHO,CAI3BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,WAAR,CADN,CAEH2C,QAAQ,CAAE,CAAC3C,KAAK,CAAE,WAAR,CAFP,CAJoB,CAQ3BC,SAAS,CAAE,CACPY,KAAK,CAAE,eAACL,CAAD,CAAeM,CAAf,CAA4B,CAC/B,GAAMhB,CAAAA,CAAK,CAAGU,CAAY,CAACV,KAA3B,CACAU,CAAY,CAACO,SAAb,KACAjB,CAAK,CAACC,OAAN,CAAcC,KAAd,CAAsBc,CAAtB,CACAN,CAAY,CAACO,SAAb,IACH,CANM,CARgB,CAAb,CARM,CA0BlB6B,CAAS,CAAG,GAAIjD,UAAJ,CAAa,CAC3BC,IAAI,CAAE,eADqB,CAE3BX,SAAS,CAAE,KAAKA,SAFW,CAG3BY,aAAa,CAAE,KAAKA,aAHO,CAI3BC,KAAK,CAAE,CACHC,OAAO,CAAE,CAACC,KAAK,CAAE,WAAR,CADN,CAEH2C,QAAQ,CAAE,CAAC3C,KAAK,CAAE,WAAR,CAFP,CAJoB,CAQ3BC,SAAS,CAAE,CACPY,KAAK,CAAE,eAACL,CAAD,CAAeM,CAAf,CAA4B,CAC/B,GAAMhB,CAAAA,CAAK,CAAGU,CAAY,CAACV,KAA3B,CACAU,CAAY,CAACO,SAAb,KACAjB,CAAK,CAAC6C,QAAN,CAAe3C,KAAf,CAAuBc,CAAvB,CACAN,CAAY,CAACO,SAAb,IACH,CANM,CARgB,CAAb,CA1BM,CA6CxB2B,CAAS,CAACxC,iBAAV,CAA4B,CACxBc,WAAW,CAAE,6BAAM,CACf,CACIC,KAAK,CAAE,iBADX,CAEIC,OAAO,CAAE,mBAAe,IAAbC,CAAAA,CAAa,GAAbA,OAAa,CACpB,CAAI,CAAC0B,YAAL,CAAkBnB,CAAlB,CAAyB,cAAzB,CAAyCP,CAAO,CAACnB,KAAjD,CACH,CAJL,CADe,CAOf,CACIiB,KAAK,CAAE,kBADX,CAEIC,OAAO,CAAE,kBAAM,CACX,CAAI,CAACd,UAAL,CAAgBoC,CAAhB,IACH,CAJL,CAPe,CAAN,CADW,CAexBrC,UAAU,CAAE,oBAACL,CAAD,CAAW,CACnB,CAAI,CAAC+C,YAAL,CAAkBrD,CAAlB,CAAyB,WAAzB,CAAsCM,CAAK,CAACC,OAAN,CAAcC,KAApD,EACA0C,CAAS,CAAC/B,QAAV,CAAmB,OAAnB,CAA4B,cAA5B,CACH,CAlBuB,CAA5B,EAsBAiC,CAAS,CAAC1C,iBAAV,CAA4B,CACxBc,WAAW,CAAE,6BAAM,CACf,CACIC,KAAK,CAAE,kBADX,CAEIC,OAAO,CAAE,mBAAe,IAAbC,CAAAA,CAAa,GAAbA,OAAa,CACpB,CAAI,CAAC0B,YAAL,CAAkBJ,CAAlB,CAAyB,cAAzB,CAAyCtB,CAAO,CAACnB,KAAjD,CACH,CAJL,CADe,CAOf,CACIiB,KAAK,CAAE,iBADX,CAEIC,OAAO,CAAE,kBAAM,CACX,CAAI,CAACd,UAAL,CAAgBkC,CAAhB,IACH,CAJL,CAPe,CAAN,CADW,CAexBnC,UAAU,CAAE,oBAACL,CAAD,CAAW,CACnB,CAAI,CAAC+C,YAAL,CAAkBjC,CAAlB,CAAyB,WAAzB,CAAsCd,CAAK,CAACC,OAAN,CAAcC,KAApD,EACA4C,CAAS,CAACjC,QAAV,CAAmB,OAAnB,CAA4B,cAA5B,CACH,CAlBuB,CAA5B,CAoBH,C,cAznBcmC,S,IA4nBJ,GAAI9D,CAAAA,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/reactive\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Reactive from 'core/reactive';\nimport TestBase from 'format_editortest/local/tests/testbase';\nimport log from 'core/log';\n\nclass Test extends TestBase {\n\n    /**\n     * Function to prepare test scenario.\n     */\n    setUp() {\n        this.eventname = 'reactive_changed';\n    }\n\n    /**\n     * Auxiliar event dispatch method required by the reactive component..\n     *\n     * @param {*} detail the detail data\n     * @param {*} target the element target\n     */\n    eventdispatch(detail, target) {\n        if (target === undefined) {\n            target = document;\n        }\n        target.dispatchEvent(new CustomEvent('reactive_changed', {\n            bubbles: false,\n            detail: detail,\n        }));\n    }\n\n    /**\n     * Test the creation of a Reactive module and checks stateReady is called.\n     */\n    testCreation() {\n        const test1 = this.addAssert('Create a new reactive instance');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n    }\n\n    /**\n     * Check that stateReady is called even if the initial state is set after\n     * the component registration.\n     */\n    testSetInitialState() {\n        const test1 = this.addAssert('Initial state after creationt');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check that initialState cannot be used when the initial state is passed on creation.\n     */\n    testSetInitialStateWrong() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        this.expectException();\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check that initial state cannot be set twice.\n     */\n    testSetInitialStateTwice() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            mutations: {},\n        });\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n\n        this.expectException();\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check a reactive module can be created without a DOM element.\n     */\n    testWithoutTarget() {\n        const test1 = this.addAssert('Instantiate reactive without a DOM target');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n    }\n\n    /**\n     * Check stateReady is called only when the state is really ready.\n     */\n    testStateReady() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n\n        const test1 = this.addAssert('Components stateReady should be called when the state is ready');\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test mutations.\n     */\n    testMutations() {\n        const test1 = this.addAssert('Call mutations from a component');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                passTest: (statemanager, param1, param2) => {\n                    const state = statemanager.state;\n                    this.assertTrue(test1, state.tocheck.value === 'OK' && param1 === 'Q' && param2 === true);\n                },\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                reactive.dispatch('passTest', 'Q', true);\n            },\n        });\n    }\n\n    /**\n     * Test state watchers.\n     */\n    testWatchers() {\n        const test1 = this.addAssert('Test attribute watcher');\n        const test2 = this.addAssert('Test general watcher');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck.value:updated',\n                    handler: ({element}) => {\n                        this.assertTrue(test1, element.value === 'Perfect');\n                    }\n                },\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({element}) => {\n                        this.assertTrue(test2, element.value === 'Perfect');\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'Perfect');\n            }\n        });\n    }\n\n    /**\n     * Test exceptions when registering a watcher.\n     *\n     * @param {object} watcher invalid watcher data\n     */\n    testWrongWatchers(watcher) {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n        });\n\n        this.expectException();\n\n        reactive.registerComponent({\n            getWatchers: () => [watcher],\n        });\n    }\n\n    dataProviderTestWrongWatchers() {\n        return {\n            nowatch: {\n                handler: () => {\n                    return true;\n                }\n            },\n            nohandler: {\n                watch: 'tocheck.value:updated',\n            },\n        };\n    }\n\n    /**\n     * Test exceptions when calling a non-existent mutation.\n     */\n    testWrongMutation() {\n        const test1 = this.addAssert('Call inexistent mutations from a component');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                // This function is executed in a promise, we cannot use this.expectException();\n                try {\n                    reactive.dispatch('somemutation', 'Q', true);\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n            },\n        });\n    }\n\n    /**\n     * Test exceptions on mutations.\n     */\n    testMutationException() {\n        const test1 = this.addAssert('A mutation throws an exception.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                somemutation: () => {\n                    throw Error('Ups!');\n                },\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                // This function is executed in a promise, we cannot use this.expectException();\n                try {\n                    reactive.dispatch('somemutation', 'Q', true);\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n            },\n        });\n    }\n\n    /**\n     * Test add mutations functions.\n     */\n    testAddMutations() {\n        const test1 = this.addAssert('Call an original mutaiton after adding new ones.');\n        const test2 = this.addAssert('Call an overridden mutation.');\n        const test3 = this.addAssert('Call an added mutation.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                original: () => {\n                    this.assertTrue(test1, true);\n                },\n                modified: () => {\n                    this.assertTrue(test2, false);\n                },\n            },\n        });\n        reactive.addMutations({\n            modified: () => {\n                this.assertTrue(test2, true);\n            },\n            newmutation: () => {\n                this.assertTrue(test3, true);\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                reactive.dispatch('original');\n                reactive.dispatch('modified');\n                reactive.dispatch('newmutation');\n            },\n        });\n    }\n\n    /**\n         * Test set mutations class.\n         */\n    testSetMutations() {\n        const test1 = this.addAssert('Mutation class can be overridden', false);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: () => {\n                    this.assertTrue(test1, false);\n                },\n            },\n        });\n\n        // Auxiliar mutation class.\n        class NewMutations {\n\n            constructor(test) {\n                this.test = test;\n            }\n\n            alter(statemanager, testid) {\n                this.test.assertTrue(testid, true);\n            }\n        }\n\n        reactive.setMutations(new NewMutations(this));\n\n        reactive.dispatch('alter', test1);\n    }\n\n    /**\n     * Test get state.\n     */\n    testGetState() {\n        const test1 = this.addAssert('Call get state');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n        });\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n        const state = reactive.getState();\n        this.assertTrue(test1, state.tocheck.value === 'OK');\n    }\n\n    /**\n     * Test exceptions when a component tries to modify the state.\n     */\n    testWriteStateFromComponent() {\n        const test1 = this.addAssert('Components cannot write in the state from stateReady.');\n        const test2 = this.addAssert('Components cannot write in the state from watchers.');\n        const test3 = this.addAssert('Components cannot write in the element from watchers.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({state, element}) => {\n                        // This function is executed in an event, we cannot use this.expectException();\n                        try {\n                            state.tocheck.value = 'Nope';\n                            this.assertTrue(test2, false);\n                        } catch (error) {\n                            this.assertTrue(test2, true);\n                        }\n                        try {\n                            element.value = 'Nope';\n                            log.debug(element);\n                            this.assertTrue(test3, false);\n                        } catch (error) {\n                            this.assertTrue(test3, true);\n                        }\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                // This function is executed in a promise, we cannot use this.expectException();\n                try {\n                    state.tocheck.value = 'Nope';\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n                // Change value using mutation.\n                reactive.dispatch('alter', 'Perfect');\n            },\n        });\n    }\n\n    /**\n     * Test evenet bubbling.\n     */\n    testEventBubble() {\n        const test1 = this.addAssert('General state change triggered.');\n        const test2 = this.addAssert('General state change bubbles.', true);\n        const test3 = this.addAssert('Private state watcher event trigger.');\n        const test4 = this.addAssert('Private state watcher change does not bubble.', true);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n        document.addEventListener('tocheck:updated', () => {\n            this.assertTrue(test2, false);\n        });\n        document.addEventListener('tocheck.value:updated', () => {\n            this.assertTrue(test4, false);\n        });\n\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: () => {\n                        this.assertTrue(test1, true);\n                    }\n                },\n                {\n                    watch: 'tocheck.value:updated',\n                    handler: () => {\n                        this.assertTrue(test3, true);\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'Perfect');\n            }\n        });\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test reactives instances does not interfere which each other.\n     */\n    testSimultaneousReactives() {\n        const test1 = this.addAssert('Reactive instance 1 execute the correct stateReady.');\n        const test2 = this.addAssert('Reactive instance 2 execute the correct stateReady.');\n        const test3 = this.addAssert('Watcher 1 works with reactive 1 changes.');\n        const test4 = this.addAssert('Watcher 2 ignore reactive 1 changes.', true);\n        const test5 = this.addAssert('Watcher 1 ignore reactive 2 changes.', true);\n        const test6 = this.addAssert('Watcher 2 works with reactive 2 changes.');\n\n        const reactive1 = new Reactive({\n            name: 'TestReactive1',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'reactive1'},\n                tocheck2: {value: 'reactive1'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n\n        const reactive2 = new Reactive({\n            name: 'TestReactive2',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'reactive2'},\n                tocheck2: {value: 'reactive2'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck2.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n\n        // Component 1 only change the tocheck value.\n        reactive1.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test3, 'newreactive1', element.value);\n                    }\n                },\n                {\n                    watch: 'tocheck2:updated',\n                    handler: () => {\n                        this.assertTrue(test5, false);\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                this.assertEquals(test1, 'reactive1', state.tocheck.value);\n                reactive1.dispatch('alter', 'newreactive1');\n            },\n        });\n\n        // Component 2 only change the tocheck2 value\n        reactive2.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck2:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test6, 'newreactive2', element.value);\n                    }\n                },\n                {\n                    watch: 'tocheck:updated',\n                    handler: () => {\n                        this.assertTrue(test4, false);\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                this.assertEquals(test2, 'reactive2', state.tocheck.value);\n                reactive2.dispatch('alter', 'newreactive2');\n            },\n        });\n    }\n}\n\nexport default new Test();\n"],"file":"reactive.min.js"}