{"version":3,"sources":["../../../src/local/tests/reactive.js"],"names":["Test","resultsid","target","document","getElementById","eventname","runTests","detail","dispatchEvent","CustomEvent","bubbles","test1","addTest","reactive","Reactive","name","eventdispatch","state","tocheck","value","mutations","registerComponent","stateReady","assertTrue","setInitialState","error","passTest","statemanager","param1","param2","dispatch","test2","alter","newvalue","setLocked","getWatchers","watch","handler","element","somemutation","Error","test3","original","modified","addMutations","newmutation","getState","log","debug","test4","addEventListener","test5","test6","reactive1","tocheck2","reactive2","assertEquals","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/reactive\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Iimport log from 'core/log';\nimport Reactive from 'core_course/local/editor/reactive';\nimport TestBase from 'format_editortest/local/tests/testbase';\nimport log from 'core/log';\n\nclass Test extends TestBase {\n\n    /**\n     * Initialize the component.\n     *\n     * @param {string} resultsid the result element id.\n     * @returns {boolean}\n     */\n    init(resultsid) {\n        this.target = document.getElementById(resultsid);\n        this.eventname = 'reactive_changed';\n\n        // This test module only tests the reactive module. We don't not need\n        // to be registered as an editor component for this.\n\n        this.runTests();\n\n        return true;\n    }\n\n    /**\n     * Auxiliar event dispatch method required by the reactive component..\n     *\n     * @param {*} detail the detail data\n     * @param {*} target the element target\n     */\n    eventdispatch(detail, target) {\n        if (target === undefined) {\n            target = document;\n        }\n        target.dispatchEvent(new CustomEvent('reactive_changed', {\n            bubbles: false,\n            detail: detail,\n        }));\n    }\n\n    /**\n     * Test the creation of a Reactive module and checks stateReady is called.\n     */\n    testCreation() {\n        const test1 = this.addTest('Create a new reactive instance');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n    }\n\n    /**\n     * Check that stateReady is called even if the initial state is set after\n     * the component registration.\n     */\n    testSetInitialState() {\n        const test1 = this.addTest('Initial state after creationt');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check that initialState cannot be used when the initial state is passed on creation.\n     */\n    testSetInitialStateWrong() {\n        const test1 = this.addTest('Exception when setInitial state loaded but it was lready defined');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        try {\n            reactive.setInitialState({\n                tocheck: {value: 'OK'},\n            });\n            this.assertTrue(test1, false);\n        } catch (error) {\n            this.assertTrue(test1, true);\n        }\n    }\n\n    /**\n     * Check that initial state cannot be set twice.\n     */\n    testSetInitialStateTwice() {\n        const test1 = this.addTest('Exception when execture setInitialStgate twice');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            target: this.target,\n            mutations: {},\n        });\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n\n        try {\n            reactive.setInitialState({\n                tocheck: {value: 'OK'},\n            });\n            this.assertTrue(test1, false);\n        } catch (error) {\n            this.assertTrue(test1, true);\n        }\n    }\n\n    /**\n     * Check a reactive module can be created without a DOM element.\n     */\n    testWithoutTarget() {\n        const test1 = this.addTest('Instantiate reactive without a DOM target');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n    }\n\n    /**\n     * Check stateReady is called only when the state is really ready.\n     */\n    testStateReady() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n\n        const test1 = this.addTest('Components stateReady should be called when the state is ready');\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test mutations.\n     */\n    testMutations() {\n        const test1 = this.addTest('Call mutations from a component');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                passTest: (statemanager, param1, param2) => {\n                    const state = statemanager.state;\n                    this.assertTrue(test1, state.tocheck.value === 'OK' && param1 === 'Q' && param2 === true);\n                },\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                reactive.dispatch('passTest', 'Q', true);\n            },\n        });\n    }\n\n    /**\n     * Test state watchers.\n     */\n    testWatchers() {\n        const test1 = this.addTest('Test attribute watcher');\n        const test2 = this.addTest('Test general watcher');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck.value:updated',\n                    handler: ({element}) => {\n                        this.assertTrue(test1, element.value === 'Perfect');\n                    }\n                },\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({element}) => {\n                        this.assertTrue(test2, element.value === 'Perfect');\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'Perfect');\n            }\n        });\n    }\n\n    /**\n     * Test exceptions when registering a watcher.\n     */\n    testWrongWatchers() {\n        const test1 = this.addTest('Watchers has to watch something');\n        const test2 = this.addTest('Watchers need a handle function');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n        });\n\n        // Watcher without \"watch\"\n        try {\n            reactive.registerComponent({\n                getWatchers: () => [\n                    {\n                        handler: () => {\n                            this.assertTrue(test1, false);\n                        }\n                    },\n                ],\n            });\n            this.assertTrue(test1, false);\n        } catch (error) {\n            this.assertTrue(test1, error !== undefined);\n        }\n\n        // Watcher without \"handler\"\n        try {\n            reactive.registerComponent({\n                getWatchers: () => [\n                    {\n                        watch: 'tocheck.value:updated',\n                    },\n                ],\n            });\n            this.assertTrue(test2, false);\n        } catch (error) {\n            this.assertTrue(test2, error !== undefined);\n        }\n    }\n\n    /**\n     * Test exceptions when calling a non-existent mutation.\n     */\n    testWrongMutation() {\n        const test1 = this.addTest('Call inexistent mutations from a component');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                try {\n                    reactive.dispatch('somemutation', 'Q', true);\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n            },\n        });\n    }\n\n    /**\n     * Test exceptions on mutations.\n     */\n    testMutationException() {\n        const test1 = this.addTest('A mutation throws an exception.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                somemutation: () => {\n                    throw Error('Ups!');\n                },\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                try {\n                    reactive.dispatch('somemutation', 'Q', true);\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n            },\n        });\n    }\n\n    /**\n     * Test add mutations function.\n     */\n    testAddMutations() {\n        const test1 = this.addTest('Call an original mutaiton after adding new ones.');\n        const test2 = this.addTest('Call an overridden mutation.');\n        const test3 = this.addTest('Call an added mutation.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                original: () => {\n                    this.assertTrue(test1, true);\n                },\n                modified: () => {\n                    this.assertTrue(test2, false);\n                },\n            },\n        });\n        reactive.addMutations({\n            modified: () => {\n                this.assertTrue(test2, true);\n            },\n            newmutation: () => {\n                this.assertTrue(test3, true);\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                reactive.dispatch('original');\n                reactive.dispatch('modified');\n                reactive.dispatch('newmutation');\n            },\n        });\n    }\n\n    /**\n     * Test get state.\n     */\n    testGetState() {\n        const test1 = this.addTest('Call get state');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n        });\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n        const state = reactive.getState();\n        this.assertTrue(test1, state.tocheck.value === 'OK');\n    }\n\n    /**\n     * Test exceptions when a component tries to modify the state.\n     */\n    testWriteStateFromComponent() {\n        const test1 = this.addTest('Components cannot write in the state from stateReady.');\n        const test2 = this.addTest('Components cannot write in the state from watchers.');\n        const test3 = this.addTest('Components cannot write in the element from watchers.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({state, element}) => {\n                        try {\n                            state.tocheck.value = 'Nope';\n                            this.assertTrue(test2, false);\n                        } catch (error) {\n                            this.assertTrue(test2, true);\n                        }\n                        try {\n                            element.value = 'Nope';\n                            log.debug(element);\n                            this.assertTrue(test3, false);\n                        } catch (error) {\n                            this.assertTrue(test3, true);\n                        }\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                try {\n                    state.tocheck.value = 'Nope';\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n                // Change value using mutation.\n                reactive.dispatch('alter', 'Perfect');\n            },\n        });\n    }\n\n    /**\n     * Test evenet bubbling.\n     */\n    testEventBubble() {\n        const test1 = this.addTest('General state change triggered.');\n        const test2 = this.addTest('General state change bubbles.', true);\n        const test3 = this.addTest('Private state watcher event trigger.');\n        const test4 = this.addTest('Private state watcher change does not bubble.', true);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n        document.addEventListener('tocheck:updated', () => {\n            this.assertTrue(test2, false);\n        });\n        document.addEventListener('tocheck.value:updated', () => {\n            this.assertTrue(test4, false);\n        });\n\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: () => {\n                        this.assertTrue(test1, true);\n                    }\n                },\n                {\n                    watch: 'tocheck.value:updated',\n                    handler: () => {\n                        this.assertTrue(test3, true);\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'Perfect');\n            }\n        });\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test reactives instances does not interfere which each other.\n     */\n    testSimultaneousReactives() {\n        const test1 = this.addTest('Reactive instance 1 execute the correct stateReady.');\n        const test2 = this.addTest('Reactive instance 2 execute the correct stateReady.');\n        const test3 = this.addTest('Watcher 1 works with reactive 1 changes.');\n        const test4 = this.addTest('Watcher 2 ignore reactive 1 changes.', true);\n        const test5 = this.addTest('Watcher 1 ignore reactive 2 changes.', true);\n        const test6 = this.addTest('Watcher 2 works with reactive 2 changes.');\n\n        const reactive1 = new Reactive({\n            name: 'TestReactive1',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'reactive1'},\n                tocheck2: {value: 'reactive1'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n\n        const reactive2 = new Reactive({\n            name: 'TestReactive2',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            state: {\n                tocheck: {value: 'reactive2'},\n                tocheck2: {value: 'reactive2'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state.tocheck2.value = newvalue;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n\n        // Component 1 only change the tocheck value.\n        reactive1.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test3, 'newreactive1', element.value);\n                    }\n                },\n                {\n                    watch: 'tocheck2:updated',\n                    handler: () => {\n                        this.assertTrue(test5, false);\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                this.assertEquals(test1, 'reactive1', state.tocheck.value);\n                reactive1.dispatch('alter', 'newreactive1');\n            },\n        });\n\n        // Component 2 only change the tocheck2 value\n        reactive2.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck2:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test6, 'newreactive2', element.value);\n                    }\n                },\n                {\n                    watch: 'tocheck:updated',\n                    handler: () => {\n                        this.assertTrue(test4, false);\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                this.assertEquals(test2, 'reactive2', state.tocheck.value);\n                reactive2.dispatch('alter', 'newreactive2');\n            },\n        });\n    }\n}\n\nexport default new Test();\n"],"file":"reactive.min.js"}