{"version":3,"sources":["../../../src/local/tests/statevalues.js"],"names":["Test","resultsid","target","document","getElementById","eventname","runTests","fakenode","createTextNode","statemanager","StateManager","setInitialState","sample","value","assertEquals","state","samples","id","name","get","assertTrue","error","plainstate","simpleattributes1","simpleattributes2","listwithoutid","listofsimpleitems","setLocked","set","key","valuewithoutkey","valuedifferentkey","valuewithoutid","add","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/statevalues\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport StateManager from 'core_course/local/editor/statemanager';\nimport TestBase from 'format_editortest/local/tests/testbase';\n\nclass Test extends TestBase {\n\n    /**\n     * Initialize the component.\n     *\n     * @param {string} resultsid the result element id.\n     * @returns {boolean}\n     */\n    init(resultsid) {\n        this.target = document.getElementById(resultsid);\n        this.eventname = 'reactive_changed';\n\n        // This test module only tests the reactive module. We don't not need\n        // to be registered as an editor component for this.\n\n        this.runTests();\n\n        return true;\n    }\n\n    /**\n     * Scenario setup.\n     */\n    setUp() {\n        // We don't care about events this time.\n        this.fakenode = document.createTextNode(null);\n        this.statemanager = new StateManager(() => true, this.fakenode);\n    }\n\n    /**\n     * Create a valid initial state.\n     */\n    testAddObject() {\n        this.statemanager.setInitialState({\n            sample: {\n                value: 'OK',\n            }\n        });\n        this.assertEquals(null, 'OK', this.statemanager.state.sample.value);\n    }\n\n    /**\n     * Create a state list initial state.\n     */\n    testAddList() {\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 3, name: 'first'},\n                {id: 4, name: 'second'},\n            ],\n        });\n        this.assertEquals(null, undefined, this.statemanager.state.samples.get(1));\n        this.assertEquals(null, undefined, this.statemanager.state.samples.get(2));\n        this.assertEquals(null, 3, this.statemanager.state.samples.get(3).id);\n        this.assertEquals(null, 'first', this.statemanager.state.samples.get(3).name);\n        this.assertEquals(null, 4, this.statemanager.state.samples.get(4).id);\n        this.assertEquals(null, 'second', this.statemanager.state.samples.get(4).name);\n    }\n\n    /**\n     * Test invalid state values.\n     *\n     * @param {*} state the initial state\n     */\n    testInvalidState(state) {\n        try {\n            this.statemanager.setInitialState(state);\n            this.assertTrue(null, false);\n        } catch (error) {\n            this.assertTrue(null, true);\n        }\n    }\n\n    /**\n     * Data provider for testInvalidState.\n     *\n     * @returns {object} testting scenarios\n     */\n    dataProviderTestInvalidState() {\n        return {\n            // States must be objects.\n            plainstate: 'nope',\n            // All state objects must be objects, not simple variables.\n            simpleattributes1: {\n                value: 'Nope',\n            },\n            simpleattributes2: {\n                value: null,\n            },\n            // List items must provide an ID attribute.\n            listwithoutid: {\n                samples: [\n                    {id: 3, name: 'first'},\n                    {name: 'second'},\n                ],\n            },\n            // List element cannot be simple variables.\n            listofsimpleitems: {\n                samples: ['j', 2, true],\n            },\n        };\n    }\n\n    testSetListValue() {\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 3, name: 'first'},\n                {id: 4, name: 'second'},\n            ],\n        });\n\n        this.assertEquals(null, 3, this.statemanager.state.samples.get(3).id);\n        this.assertEquals(null, 'first', this.statemanager.state.samples.get(3).name);\n        this.assertEquals(null, 4, this.statemanager.state.samples.get(4).id);\n        this.assertEquals(null, 'second', this.statemanager.state.samples.get(4).name);\n\n        this.statemanager.setLocked(false);\n\n        // Add a value.\n        this.statemanager.state.samples.set(1, {id: 1, name: 'new'});\n        this.assertEquals(null, 1, this.statemanager.state.samples.get(1).id);\n        this.assertEquals(null, 'new', this.statemanager.state.samples.get(1).name);\n\n        // Alter a value.\n        this.statemanager.state.samples.set(3, {id: 3, name: 'newvalue'});\n        this.assertEquals(null, 3, this.statemanager.state.samples.get(3).id);\n        this.assertEquals(null, 'newvalue', this.statemanager.state.samples.get(3).name);\n\n        // Check again the 4 element to test if it remains the same.\n        this.assertEquals(null, 4, this.statemanager.state.samples.get(4).id);\n        this.assertEquals(null, 'second', this.statemanager.state.samples.get(4).name);\n    }\n\n    /**\n     * Test invalid list element values.\n     *\n     * @param {*} scenario the scenario key and value\n     */\n    testSetInvalidListValues({key, value}) {\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 3, name: 'first'},\n                {id: 4, name: 'second'},\n            ],\n        });\n\n        this.statemanager.setLocked(false);\n\n        try {\n            this.statemanager.state.samples.set(key, value);\n            this.assertTrue(null, false);\n        } catch (error) {\n            this.assertTrue(null, true);\n        }\n    }\n\n    /**\n     * Data provider for testSetInvalidListValues.\n     *\n     * @returns {object} the testing sacenarios\n     */\n    dataProviderTestSetInvalidListValues() {\n        return {\n            // All element needs a key.\n            valuewithoutkey: {\n                key: undefined,\n                value: {id: 1, name: 'new'},\n            },\n            // All elements key must be the same as the element id.\n            valuedifferentkey: {\n                key: 42,\n                value: {id: 25, name: 'new'},\n            },\n            // All list elements must have an id attribute.\n            valuewithoutid: {\n                key: 43,\n                value: {name: 'new'},\n            },\n        };\n    }\n\n    /**\n     * Test add list elements function.\n     */\n    testAddListValue() {\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 3, name: 'first'},\n                {id: 4, name: 'second'},\n            ],\n        });\n\n        this.assertEquals(null, 3, this.statemanager.state.samples.get(3).id);\n        this.assertEquals(null, 'first', this.statemanager.state.samples.get(3).name);\n        this.assertEquals(null, 4, this.statemanager.state.samples.get(4).id);\n        this.assertEquals(null, 'second', this.statemanager.state.samples.get(4).name);\n\n        this.statemanager.setLocked(false);\n\n        // Add a value.\n        this.statemanager.state.samples.add({id: 1, name: 'new'});\n        this.assertEquals(null, 1, this.statemanager.state.samples.get(1).id);\n        this.assertEquals(null, 'new', this.statemanager.state.samples.get(1).name);\n\n        // Alter a value.\n        this.statemanager.state.samples.add({id: 3, name: 'newvalue'});\n        this.assertEquals(null, 3, this.statemanager.state.samples.get(3).id);\n        this.assertEquals(null, 'newvalue', this.statemanager.state.samples.get(3).name);\n\n        // Check again the 4 element to test if it remains the same.\n        this.assertEquals(null, 4, this.statemanager.state.samples.get(4).id);\n        this.assertEquals(null, 'second', this.statemanager.state.samples.get(4).name);\n    }\n\n    /**\n     * Test invalid list elements.\n     *\n     * @param {object} value the invalid value\n     */\n    testAddInvalidListValues(value) {\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 3, name: 'first'},\n                {id: 4, name: 'second'},\n            ],\n        });\n\n        this.statemanager.setLocked(false);\n\n        try {\n            this.statemanager.state.samples.add(value);\n            this.assertTrue(null, false);\n        } catch (error) {\n            this.assertTrue(null, true);\n        }\n    }\n\n    /**\n     * Data provider for testAddInvalidListValues.\n     *\n     * @returns {object} testing scenarios\n     */\n    dataProviderTestAddInvalidListValues() {\n        return {\n            // All element needs a valur key.\n            valuewithoutkey: {id: undefined, name: 'new'},\n            // All list elements must have an id attribute.\n            valuewithoutid: {name: 'new'},\n        };\n    }\n}\n\nexport default new Test();\n"],"file":"statevalues.min.js"}