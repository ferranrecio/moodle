{"version":3,"sources":["../../../src/local/tests/stateevents.js"],"names":["Test","resultsid","target","document","getElementById","eventname","runTests","fakenode","createTextNode","statemanager","StateManager","detail","dispatchEvent","CustomEvent","action","bubbles","test1","addTest","test2","test3","test4","test5","test6","test7","test8","addEventListener","state","assertTrue","sampleobj","name","arr","length","sample","samplemap","get","size","title","info","setInitialState","id","list","setLocked","newthing","mylist","samples","newthing2","propevents","element","mapevents","add","has","delete","value","samevalue","simplevalue1","simplevalue2","simplevalue3","simplevalue4","simplevalue5","arrayvalue1","arrayvalue2","arrayvalue4","objectvalue1","firstname","lastname","objectvalue2","some","other","objectvalue3","initial","compare","diffvalue","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/stateevents\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Iimport log from 'core/log';\nimport StateManager from 'core_course/local/editor/statemanager';\nimport TestBase from 'format_editortest/local/tests/testbase';\n\nclass Test extends TestBase {\n\n    /**\n     * Initialize the component.\n     *\n     * @param {string} resultsid the result element id.\n     * @returns {boolean}\n     */\n    init(resultsid) {\n        this.target = document.getElementById(resultsid);\n        this.eventname = 'stateevents_changed';\n\n        // This test module only tests the state events. We don't not need\n        // to be registered as an editor component for this.\n\n        this.runTests();\n\n        return true;\n    }\n\n    /**\n     * Function to prepare test scenario.\n     */\n    setUp() {\n        this.fakenode = document.createTextNode(null);\n        this.statemanager = new StateManager((detail, target) => {\n            if (target === undefined) {\n                target = document;\n            }\n            target.dispatchEvent(new CustomEvent(detail.action, {\n                bubbles: false,\n                detail: detail,\n            }));\n        }, this.fakenode);\n    }\n\n    /**\n     * Test initial loaded event.\n     */\n    testInitialLoaded() {\n\n        // Some tests are async so we cannot declare from within the specific method.\n        const test1 = this.addTest('Initial state loaded event');\n        const test2 = this.addTest('Check initial event has state data');\n        const test3 = this.addTest('Check initial has state object');\n        const test4 = this.addTest('Check initial has state object attribute');\n        const test5 = this.addTest('Check initial has state object array');\n        const test6 = this.addTest('Check initial has state map');\n        const test7 = this.addTest('Check initial has state map attribute');\n        const test8 = this.addTest('Check initial has state map array');\n\n        this.fakenode.addEventListener('state:loaded', ({detail}) => {\n            const state = detail.state;\n            this.assertTrue(test1, true);\n            // Check state contents.\n            this.assertTrue(test2, state !== undefined);\n\n            // Object attributes.\n            this.assertTrue(test3, state.sampleobj !== undefined);\n            this.assertTrue(test4, state.sampleobj.name === 'sample');\n            this.assertTrue(test5, state.sampleobj.arr.length === 2 && state.sampleobj.arr[0] === 'one');\n\n            // Map attributes.\n            const sample = state.samplemap.get('id1');\n            this.assertTrue(test6, state.samplemap.size == 2 && sample);\n            this.assertTrue(test7, sample.title === 'Title01');\n            this.assertTrue(test8, sample.info.length === 2 && sample.info[0] === 'uno');\n        });\n\n        this.statemanager.setInitialState({\n            sampleobj: {\n                name: 'sample',\n                arr: ['one', 'two'],\n            },\n            samplemap: [\n                {id: 'id1', title: 'Title01', info: ['uno', 'dos']},\n                {id: 'id2', title: 'Title02', info: ['tres', 'cuatro']},\n            ],\n        });\n    }\n\n    /**\n     * Add an object to state.\n     */\n    testAlterStateObjectCreateSimple() {\n\n        this.statemanager.setInitialState({\n            sample: {\n                name: 'other',\n                list: ['yi', 'er', 'san'],\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Check initial has state map');\n\n        let state = this.statemanager.state;\n\n        // Create a new state object.\n        this.fakenode.addEventListener('state.newthing:created', ({detail}) => {\n            this.assertTrue(test1, detail.state.newthing.name == 'myname');\n        });\n        state.newthing = {name: 'myname', mylist: ['one', 'two']};\n    }\n\n    /**\n     * Update a state object.\n     */\n    testAlterStateObjectUpdateSimple() {\n\n        this.statemanager.setInitialState({\n            sample: {\n                name: 'other',\n                list: ['yi', 'er', 'san'],\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Check initial has state map attribute');\n\n        let state = this.statemanager.state;\n\n        // Alter a value\n        this.fakenode.addEventListener('state.sample:updated', ({detail}) => {\n            this.assertTrue(test1, detail.state.sample.name == 'anewname');\n        });\n        state.sample = {name: 'anewname', list: ['uno', 'dos', 'tres']};\n    }\n\n    /**\n     * Delete a state object.\n     */\n    testAlterStateObjectDeleteSimple() {\n\n        this.statemanager.setInitialState({\n            sample: {\n                name: 'whatever',\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Check initial has state map array');\n\n        let state = this.statemanager.state;\n\n        // Delete object\n        this.fakenode.addEventListener('state.sample:deleted', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.state.sample === undefined\n            );\n        });\n        delete state.sample;\n    }\n\n    /**\n     * Create a new object list in the state.\n     */\n    testAlterStateObjectCreateList() {\n\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 'oid1', name: 'some'},\n                {id: 'oid2', name: 'other'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Check initial has state map');\n        const test2 = this.addTest('List item #1 updated');\n        const test3 = this.addTest('List item #2 updated');\n\n        let state = this.statemanager.state;\n\n        // Create a list.\n        this.fakenode.addEventListener('state.newthing2:created', ({detail}) => {\n            this.assertTrue(test1, detail.state.newthing2.size == 2);\n        });\n        this.fakenode.addEventListener('newthing2[1]:created', ({detail}) => {\n            this.assertTrue(test2, detail.state.newthing2.size == 2);\n        });\n        this.fakenode.addEventListener('newthing2[2]:created', ({detail}) => {\n            this.assertTrue(test3, detail.state.newthing2.size == 2);\n        });\n\n        state.newthing2 = [{id: 1}, {id: 2}];\n    }\n\n    /**\n     * Update a object list.\n     */\n    testAlterStateObjectUpdateList() {\n\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 'oid1', name: 'some'},\n                {id: 'oid2', name: 'other'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Check initial has state map attribute');\n        // We are replacing the full list. This is considered a creation.\n        const test2 = this.addTest('List item #1 created');\n        const test3 = this.addTest('List item #2 created');\n        const test4 = this.addTest('List item #3 created');\n\n        let state = this.statemanager.state;\n\n        // Alter a list.\n        this.fakenode.addEventListener('state.samples:updated', ({detail}) => {\n            this.assertTrue(test1, detail.state.samples.size == 3);\n        });\n        this.fakenode.addEventListener('samples[1]:created', ({detail}) => {\n            this.assertTrue(test2, detail.state.samples.size == 3);\n        });\n        this.fakenode.addEventListener('samples[2]:created', ({detail}) => {\n            this.assertTrue(test3, detail.state.samples.size == 3);\n        });\n        this.fakenode.addEventListener('samples[3]:created', ({detail}) => {\n            this.assertTrue(test4, detail.state.samples.size == 3);\n        });\n\n        state.samples = [{id: 1}, {id: 2}, {id: 3}];\n\n    }\n\n    /**\n     * Delete a list from the state.\n     */\n    testAlterStateObjectDeleteList() {\n\n        this.statemanager.setInitialState({\n            samples: [\n                {id: 23, name: 'notanymore'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Check initial has state map array');\n\n        let state = this.statemanager.state;\n\n        // Delete a list.\n        this.fakenode.addEventListener('state.samples:deleted', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.state.samples === undefined\n            );\n        });\n\n        delete state.samples;\n    }\n\n    /**\n     * Add a new attribute to an state object.\n     */\n    testPropEventAddSimple() {\n\n        this.statemanager.setInitialState({\n            propevents: {\n                name: 'something',\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('State variable general update event');\n        const test2 = this.addTest('Add a new attribute to state variable');\n\n        let state = this.statemanager.state;\n\n        // General state variable event.\n        this.fakenode.addEventListener('propevents:updated', ({detail}) => {\n            this.assertTrue(test1, detail.element.name === detail.state.propevents.name);\n        });\n\n        // Create a new object attribute.\n        this.fakenode.addEventListener('propevents.newthing:created', ({detail}) => {\n            this.assertTrue(test2, detail.element.newthing == 'newvalue');\n        });\n        state.propevents.newthing = 'newvalue';\n    }\n\n    /**\n     * Update an attribute of a state object.\n     */\n    testPropEventsUpdateSimple() {\n\n        this.statemanager.setInitialState({\n            propevents: {\n                name: 'something',\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('State variable general update event');\n        const test2 = this.addTest('Update and existing attribute to state variable');\n\n        let state = this.statemanager.state;\n\n        // General state variable event.\n        this.fakenode.addEventListener('propevents:updated', ({detail}) => {\n            this.assertTrue(test1, detail.element.name === detail.state.propevents.name);\n        });\n\n        // Alter an existing attribute.\n        this.fakenode.addEventListener('propevents.name:updated', ({detail}) => {\n            this.assertTrue(test2, detail.element.name == 'newname');\n        });\n        state.propevents.name = 'newname';\n    }\n\n    /**\n     * Delete an attribute from a state object.\n     */\n    testPropEventsDeleteSimple() {\n\n        this.statemanager.setInitialState({\n            propevents: {\n                name: 'something',\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('State variable general update event');\n        const test2 = this.addTest('Delete and existing attribute to state variable');\n\n        let state = this.statemanager.state;\n\n        // General state variable event.\n        this.fakenode.addEventListener('propevents:updated', ({detail}) => {\n            this.assertTrue(test1, detail.element.name === detail.state.propevents.name);\n        });\n\n        // Delete an attribute.\n        this.fakenode.addEventListener('propevents.name:deleted', ({detail}) => {\n            this.assertTrue(\n                test2,\n                detail.element.name === undefined\n            );\n        });\n        delete state.propevents.name;\n    }\n\n    /**\n     * Add an array into a state object.\n     */\n    testPropEventsAddArray() {\n\n        this.statemanager.setInitialState({\n            propevents: {\n                arr: ['yi', 'er', 'san', 'si', 'wu'],\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('State variable general update event');\n        const test2 = this.addTest('Add a new attribute to state variable');\n\n        let state = this.statemanager.state;\n\n        // General state variable event.\n        this.fakenode.addEventListener('propevents:updated', ({detail}) => {\n            this.assertTrue(test1, detail.element.name === detail.state.propevents.name);\n        });\n\n        // Add an array as an attribute.\n        this.fakenode.addEventListener('propevents.newthing2:created', ({detail}) => {\n            this.assertTrue(test2, detail.element.newthing2.length == 3);\n        });\n        state.propevents.newthing2 = ['Un', 'Dos', 'Tres'];\n    }\n\n    /**\n     * Update an array of a state object.\n     */\n    testPropEventsUpdateArray() {\n\n        this.statemanager.setInitialState({\n            propevents: {\n                arr: ['yi', 'er', 'san', 'si', 'wu'],\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('State variable general update event');\n        const test2 = this.addTest('Update and existing attribute to state variable');\n\n        let state = this.statemanager.state;\n\n        // General state variable event.\n        this.fakenode.addEventListener('propevents:updated', ({detail}) => {\n            this.assertTrue(test1, detail.element.name === detail.state.propevents.name);\n        });\n\n        // Alter an existing array.\n        this.fakenode.addEventListener('propevents.arr:updated', ({detail}) => {\n            this.assertTrue(test2, detail.element.arr.length == 3);\n        });\n\n        state.propevents.arr = ['Un', 'Dos', 'Tres'];\n    }\n\n    /**\n     * Delete an array from a state object.\n     */\n    testPropEventsDeleteArray() {\n\n        this.statemanager.setInitialState({\n            propevents: {\n                arr: ['yi', 'er', 'san', 'si', 'wu'],\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('State variable general update event');\n        const test2 = this.addTest('Delete and existing attribute to state variable');\n\n        let state = this.statemanager.state;\n\n        // General state variable event.\n        this.fakenode.addEventListener('propevents:updated', ({detail}) => {\n            this.assertTrue(test1, detail.element.name === detail.state.propevents.name);\n        });\n\n        // Delete an array.\n        this.fakenode.addEventListener('propevents.arr:deleted', ({detail}) => {\n            this.assertTrue(test2, detail.element.arr === undefined);\n        });\n        delete state.propevents.arr;\n    }\n\n    /**\n     * Add an element to a state list.\n     */\n    testMapEventsAddElement() {\n\n        this.statemanager.setInitialState({\n            mapevents: [\n                {id: 'id1', name: 'some'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('General map update event');\n        const test2 = this.addTest('Add a new value to a map');\n\n        let state = this.statemanager.state;\n\n        // General update variable event.\n        this.fakenode.addEventListener('mapevents:created', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.element.id == detail.state.mapevents.get(detail.element.id).id\n            );\n        });\n\n        // Set a new value into the list.\n        this.fakenode.addEventListener('mapevents[new]:created', ({detail}) => {\n            this.assertTrue(test2, detail.element.name == 'me');\n        });\n        state.mapevents.add({id: 'new', name: 'me'});\n    }\n\n    /**\n     * Update an element of a state list.\n     */\n    testMapEventsUpdateValue() {\n\n        this.statemanager.setInitialState({\n            mapevents: [\n                {id: 'id1', name: 'some'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('General map update event');\n        const test2 = this.addTest('Update an element from a map');\n\n        let state = this.statemanager.state;\n\n        // General update variable event.\n        this.fakenode.addEventListener('mapevents:updated', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.element.id == detail.state.mapevents.get(detail.element.id).id\n            );\n        });\n\n        // Alter an existing value.\n        this.fakenode.addEventListener('mapevents[id1]:updated', ({detail}) => {\n            if (detail.element.id === 'id1') {\n                this.assertTrue(test2, detail.element.name == 'updateme');\n            }\n        });\n        state.mapevents.add({id: 'id1', name: 'updateme'});\n    }\n\n    /**\n     * Delete a value from a state list.\n     */\n    testMapEventsDeleteValue() {\n\n        this.statemanager.setInitialState({\n            mapevents: [\n                {id: 'id1', name: 'some'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('General map update event');\n        const test2 = this.addTest('Delete an element form a map');\n\n        let state = this.statemanager.state;\n\n        // General update variable event.\n        this.fakenode.addEventListener('mapevents:deleted', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.element.id == 'id1' && !detail.state.mapevents.has('id1')\n            );\n        });\n\n        // Delete a value.\n        this.fakenode.addEventListener('mapevents[id1]:deleted', ({detail}) => {\n            this.assertTrue(\n                test2,\n                detail.element.id == 'id1' && !detail.state.mapevents.has('id1')\n            );\n        });\n        state.mapevents.delete('id1');\n    }\n\n    /**\n     * Add an atrtribute to an element of a state list.\n     */\n    testMapEventsAddAttribute() {\n\n        this.statemanager.setInitialState({\n            mapevents: [\n                {id: 'id1', name: 'some'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('General map update event');\n        const test2 = this.addTest('Create an attrribute form an element of a map');\n        const test3 = this.addTest('Create an attrribute form a specific element of a map');\n\n        let state = this.statemanager.state;\n\n        // General update variable event.\n        this.fakenode.addEventListener('mapevents:updated', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.element.id == detail.state.mapevents.get(detail.element.id).id\n            );\n        });\n\n        // Add attribute to a list element.\n        this.fakenode.addEventListener('mapevents.newthing:created', ({detail}) => {\n            this.assertTrue(test2, detail.element.newthing === 'Yeah');\n            this.assertTrue(null, detail.element.id === 'id1');\n        });\n        this.fakenode.addEventListener('mapevents[id1].newthing:created', ({detail}) => {\n            this.assertTrue(test3, detail.element.newthing === 'Yeah');\n            this.assertTrue(null, detail.element.id === 'id1');\n        });\n        state.mapevents.get('id1').newthing = 'Yeah';\n    }\n\n    /**\n     * Update an attribute of an element of a state list.\n     */\n    testMapEventsUpdateAttribute() {\n\n        this.statemanager.setInitialState({\n            mapevents: [\n                {id: 'id1', name: 'some'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('General map update event');\n        const test2 = this.addTest('Update an attrribute form an element of a map');\n        const test3 = this.addTest('Update an attrribute form an specific element of a map');\n\n        let state = this.statemanager.state;\n\n        // General update variable event.\n        this.fakenode.addEventListener('mapevents:updated', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.element.id == detail.state.mapevents.get(detail.element.id).id\n            );\n        });\n\n        // Alter an attribute from an existing element.\n        this.fakenode.addEventListener('mapevents.name:updated', ({detail}) => {\n            this.assertTrue(test2, detail.element.name === 'Maybe');\n            this.assertTrue(null, detail.element.id === 'id1');\n        });\n        this.fakenode.addEventListener('mapevents[id1].name:updated', ({detail}) => {\n            this.assertTrue(test3, detail.element.name === 'Maybe');\n            this.assertTrue(null, detail.element.id === 'id1');\n        });\n        state.mapevents.get('id1').name = 'Maybe';\n    }\n\n    /**\n     * Delete an attribute from an element of a state list.\n     */\n    testMapEventsDeleteAttribute() {\n\n        this.statemanager.setInitialState({\n            mapevents: [\n                {id: 'id1', name: 'some'},\n            ],\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('General map update event');\n        const test2 = this.addTest('Delete an attrribute form an element of a map');\n        const test3 = this.addTest('Delete an attrribute form an element of a map');\n\n        let state = this.statemanager.state;\n\n        // General update variable event.\n        this.fakenode.addEventListener('mapevents:updated', ({detail}) => {\n            this.assertTrue(\n                test1,\n                detail.element.id == detail.state.mapevents.get(detail.element.id).id\n            );\n        });\n\n        // Delete an attribute from an exisiting element.\n        this.fakenode.addEventListener('mapevents.name:deleted', ({detail}) => {\n            this.assertTrue(test2, detail.element.name === undefined);\n            this.assertTrue(null, detail.element.id === 'id1');\n        });\n        this.fakenode.addEventListener('mapevents[id1].name:deleted', ({detail}) => {\n            this.assertTrue(test3, detail.element.name === undefined);\n            this.assertTrue(null, detail.element.id === 'id1');\n        });\n        delete state.mapevents.get('id1').name;\n    }\n\n    /**\n     * Check assigning the same value does not trigger any change event.\n     *\n     * @param {*} value the value to update.\n     */\n    testSameValue(value) {\n        this.statemanager.setInitialState({\n            samevalue: {\n                value: value,\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Assign the same value does not trigger a general event', true);\n        const test2 = this.addTest('Assign same value does not trigger event', true);\n\n        let state = this.statemanager.state;\n\n        // General event.\n        this.fakenode.addEventListener('samevalue:updated', () => {\n            this.assertTrue(test1, false);\n        });\n\n        this.fakenode.addEventListener('samevalue.value:updated', () => {\n            this.assertTrue(test2, false);\n        });\n        state.samevalue.value = value;\n    }\n\n    /**\n     * Data provider for testSameValue.\n     *\n     * @returns {object} list of scenarios\n     */\n    dataProviderTestSameValue() {\n        return {\n            // List updates can only be done on nonexistent values.\n            simplevalue1: ['sample'],\n            simplevalue2: [true],\n            simplevalue3: [null],\n            simplevalue4: [false],\n            simplevalue5: [123],\n            arrayvalue1: [[1, 2, 3]],\n            arrayvalue2: [['hi', 'there']],\n            arrayvalue4: [[true, null, 'here']],\n            objectvalue1: [{firstname: 'John', lastname: 'Doe'}],\n            objectvalue2: [{some: true, other: false}],\n            objectvalue3: [{some: null, other: 12}],\n        };\n    }\n\n    /**\n     * Test that alter a value trigger an event.\n     *\n     * @param {*} initial the initial value\n     * @param {*} compare the value to set\n     */\n    testDifferentValue(initial, compare) {\n        this.statemanager.setInitialState({\n            diffvalue: {\n                value: initial,\n            },\n        });\n\n        // For this test we need an unlocked state.\n        this.statemanager.setLocked(false);\n\n        const test1 = this.addTest('Assign the same does not trigger a general event2', false);\n        const test2 = this.addTest('Assign same value does not trigger event', false);\n\n        let state = this.statemanager.state;\n\n        // General event.\n        this.fakenode.addEventListener('diffvalue:updated', () => {\n            this.assertTrue(test1, true);\n        });\n\n        this.fakenode.addEventListener('diffvalue.value:updated', () => {\n            this.assertTrue(test2, true);\n        });\n\n        state.diffvalue.value = compare;\n    }\n\n    /**\n     * Data provider for testDifferentValue.\n     *\n     * @returns {object} test scenarios\n     */\n    dataProviderTestDifferentValue() {\n        return {\n            // List updates can only be done on nonexistent values.\n            simplevalue1: ['sample', 'something'],\n            simplevalue2: [true, false],\n            simplevalue3: [null, 'hi!'],\n            simplevalue4: [false, 23],\n            simplevalue5: [123, 124],\n            arrayvalue1: [[1, 2, 3], [1, 2, 4]],\n            arrayvalue2: [['hi', 'there'], ['hi', 'me']],\n            arrayvalue4: [[true, null, 'here'], [true, 12, 'here']],\n            objectvalue1: [{firstname: 'John', lastname: 'Doe'}, {firstname: 'John', lastname: 'None'}],\n            objectvalue2: [{some: true, other: false}, {some: true, other: true}],\n            objectvalue3: [{some: null, other: 12}, {some: 22, other: 23}],\n        };\n    }\n}\n\nexport default new Test();\n"],"file":"stateevents.min.js"}