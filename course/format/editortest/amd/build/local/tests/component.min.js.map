{"version":3,"sources":["../../../src/local/tests/component.js"],"names":["Test","eventname","reactive","Reactive","name","eventdispatch","mutations","alter","statemanager","value","state","setLocked","detail","target","document","dispatchEvent","CustomEvent","bubbles","test1","addAssert","Sample","descriptor","test","assertTrue","element","ComponentBase","init","setInitialState","sample","watch","handler","dispatch","sampleUpdated","selectors","some","component","assertEquals","getSelector","addSelectors","test2","addEventListener","test3","test4","clicknow","click","events","sampleevent","getEvents","useelement","usereactive","expectException","withoutelement","withoutreactive","withoutreactiveandelement","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/statevalues\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Reactive from 'core/reactive';\nimport ComponentBase from 'core/reactive/component';\nimport TestBase from 'format_editortest/local/tests/testbase';\n\nclass Test extends TestBase {\n\n    /**\n     * Function to prepare test scenario.\n     */\n    setUp() {\n        // Create a generic reactive module without state.\n        this.eventname = 'reactive_changed';\n\n        this.reactive = new Reactive({\n            name: 'Test',\n            eventname: this.eventname,\n            eventdispatch: this.eventdispatch,\n            mutations: {\n                // A generic function to alter the state.\n                alter: (statemanager, name, value) => {\n                    const state = statemanager.state;\n                    statemanager.setLocked(false);\n                    state[name].value = value;\n                    statemanager.setLocked(true);\n                },\n            },\n        });\n    }\n\n    /**\n     * Auxiliar event dispatch method required by the reactive component..\n     *\n     * @param {*} detail the detail data\n     * @param {*} target the element target\n     */\n    eventdispatch(detail, target) {\n        if (target === undefined) {\n            target = document;\n        }\n        target.dispatchEvent(new CustomEvent('reactive_changed', {\n            bubbles: false,\n            detail: detail,\n        }));\n    }\n\n    /**\n     * Test create method.\n     */\n    testCreate() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n\n    /**\n     * Test state ready trigger.\n     */\n    testStateReady() {\n        const test1 = this.addAssert('Initial state ready event');\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                // We need the test as a component attribute to do asserts.\n                this.test = descriptor.test;\n            }\n\n            stateReady() {\n                this.test.assertTrue(test1, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test get watchers.\n     */\n    testGetWatchers() {\n        const test1 = this.addAssert('Watchers works with state mutations');\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                // We need the test as a component attribute to do asserts.\n                this.test = descriptor.test;\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'sample.value:updated',\n                        handler: ({element}) => {\n                            this.test.assertTrue(test1, element.value === 'Perfect');\n                        }\n                    },\n                ];\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n        this.reactive.dispatch('alter', 'sample', 'Perfect');\n    }\n\n    /**\n     * Check that \"this\" in watchers is mantained.\n     */\n    testGetWatchersKeepThis() {\n        const test1 = this.addAssert('Watchers works with state mutations');\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                // We need the test as a component attribute to do asserts.\n                this.test = descriptor.test;\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'sample.value:updated',\n                        handler: this.sampleUpdated,\n                    },\n                ];\n            }\n\n            sampleUpdated({element}) {\n                this.test.assertTrue(test1, element.value === 'Perfect');\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n        this.reactive.dispatch('alter', 'sample', 'Perfect');\n    }\n\n    /**\n     * Test addSelectors\n     */\n    testAddSelectors() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.selectors = {\n                    some: 'selectorvalue',\n                };\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        this.assertEquals(null, 'selectorvalue', component.getSelector('some'));\n\n        component.addSelectors({some: 'newvalue'});\n\n        this.assertEquals(null, 'newvalue', component.getSelector('some'));\n    }\n\n    /**\n     * Test addSelectors\n     */\n    testAddSelectorsOnCreate() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.selectors = {\n                    some: 'selectorvalue',\n                };\n            }\n\n            static init(test, reactive, element, selectors) {\n                return new Sample({\n                    element,\n                    reactive,\n                    selectors,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target, {some: 'newvalue'});\n\n        this.assertEquals(null, 'newvalue', component.getSelector('some'));\n    }\n\n    /**\n     * Test dispatch event.\n     */\n    testDispatchEvent() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        const test2 = this.addAssert('Custom event dispatched', false);\n\n        this.target.addEventListener('testevent', ({detail}) => {\n            this.assertTrue(test2, detail.value == 'Perfect!');\n        });\n\n        component.dispatchEvent('testevent', {value: 'Perfect!'});\n    }\n\n    /**\n     * Test the typical dispatch event workflow.\n     */\n    testDispatchEventTypicalFlow() {\n        const test1 = this.addAssert('Component create hook executed', false);\n        const test2 = this.addAssert('State ready triggered', false);\n        const test3 = this.addAssert('Click event triggered', false);\n        const test4 = this.addAssert('Custom event triggered', false);\n\n        // We don't have a user so we give the component a method to simulate the used action when it is ready.\n        const clicknow = () => {\n            this.target.click();\n        };\n\n        class Sample extends ComponentBase {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n                // Init events list.\n                this.events = {\n                    sampleevent: 'sampleevent',\n                };\n            }\n\n            stateReady() {\n                this.test.assertTrue(test2, true);\n                // Bind some user actions.\n                this.element.addEventListener('click', () => {\n                    this.test.assertTrue(test3, true);\n                    // Trigger custom event. Typically before this it will be some mutation or extra logic.\n                    this.dispatchEvent(this.events.sampleevent, {value: 'Perfect!'});\n                });\n                // Now we sumilate a user click.\n                clicknow();\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        // As a parent component we want to listen the custom event.\n        this.target.addEventListener(component.getEvents().sampleevent, ({detail}) => {\n            this.assertTrue(test4, detail.value == 'Perfect!');\n        });\n\n        // Initialize reactive state to trigger ready state.\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test descriptor exceptions when creating a new component.\n     *\n     * @param {boolean} useelement use a valid element\n     * @param {boolean} usereactive use a valid reactive\n     */\n    testDescriptorExceptions({useelement, usereactive}) {\n        const element = (useelement) ? this.target : undefined;\n        const reactive = (usereactive) ? this.reactive : undefined;\n\n        this.expectException();\n\n        new ComponentBase({\n            element,\n            reactive,\n        });\n    }\n\n    dataProviderTestDescriptorExceptions() {\n        return {\n            withoutelement: {useelement: false, usereactive: true},\n            withoutreactive: {useelement: true, usereactive: false},\n            withoutreactiveandelement: {useelement: true, usereactive: false},\n        };\n    }\n\n}\n\nexport default new Test();\n"],"file":"component.min.js"}