{"version":3,"sources":["../src/editor.js"],"names":["Editor","courseid","ajax","call","methodname","args","jsonstate","statedata","JSON","parse","editing","course","editmode","setInitialState","log","error","notification","exception","Reactive","name","eventname","events","statechanged","eventdispatch","dispatchStateChangedEvent","mutations","DefaultMutations","detail","target","document","dispatchEvent","CustomEvent","bubbles"],"mappings":"qQAwBA,OACA,OACA,OACA,OACA,OACA,O,g0EAEMA,CAAAA,C,kKAQSC,C,qHAIqBC,WAAKC,IAAL,CAAU,CAAC,CAC/BC,UAAU,CAAE,uBADmB,CAE/BC,IAAI,CAAE,CAACJ,QAAQ,CAARA,CAAD,CAFyB,CAAD,CAAV,EAGpB,CAHoB,C,QAAlBK,C,QAIAC,C,CAAYC,IAAI,CAACC,KAAL,CAAWH,CAAX,C,CAIlB,KAAKI,OAAL,IACA,GAAIH,CAAS,CAACI,MAAV,SAAJ,CAAoC,CAChC,KAAKD,OAAL,WAAeH,CAAS,CAACI,MAAV,CAAiBC,QAAhC,kBACH,CAED,KAAKC,eAAL,CAAqBN,CAArB,E,qDAEAO,UAAIC,KAAJ,CAAU,2CAAV,EACAD,UAAIC,KAAJ,O,gKAWI,OACR,iBAAO,KAAKL,OAAZ,kBACH,C,2CAYiB,CACd,GAAI,8BADIL,CACJ,uBADIA,CACJ,iBACA,iEAAkBA,CAAlB,EACH,CAAC,MAAOU,CAAP,CAAc,CACZC,UAAaC,SAAb,CAAuBF,CAAvB,CACH,CACJ,C,cA3DgBG,S,IA8DN,GAAIlB,CAAAA,CAAJ,CAAW,CACtBmB,IAAI,CAAE,cADgB,CAEtBC,SAAS,CAAEC,UAAOC,YAFI,CAGtBC,aAAa,CAAEC,CAHO,CAKtBC,SAAS,CAAE,GAAIC,UALO,CAAX,C,aAkBf,QAASF,CAAAA,CAAT,CAAmCG,CAAnC,CAA2CC,CAA3C,CAAmD,CAC/C,GAAIA,CAAM,SAAV,CAA0B,CACtBA,CAAM,CAAGC,QACZ,CACDD,CAAM,CAACE,aAAP,CAAqB,GAAIC,CAAAA,WAAJ,CAAgBV,UAAOC,YAAvB,CAAqC,CACtDU,OAAO,GAD+C,CAEtDL,MAAM,CAAEA,CAF8C,CAArC,CAArB,CAIH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main course editor module\n *\n * @module     core_course/editor\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DefaultMutations from 'core_course/local/editor/mutations';\nimport events from 'core_course/events';\nimport Reactive from 'core/reactive';\nimport log from 'core/log';\nimport ajax from 'core/ajax';\nimport notification from 'core/notification';\n\nclass Editor extends Reactive {\n\n    /**\n    * Set up the course editor when the page is ready.\n    *\n    * @method init\n    * @param {int} courseid course id\n    */\n    async init(courseid) {\n\n        try {\n            // Async load the initial state.\n            const jsonstate = await ajax.call([{\n                methodname: 'core_course_get_state',\n                args: {courseid}\n            }])[0];\n            const statedata = JSON.parse(jsonstate);\n\n            // Edit mode is part of the state but it could change over time,\n            // components should use isEditing method instead.\n            this.editing = false;\n            if (statedata.course !== undefined) {\n                this.editing = statedata.course.editmode ?? false;\n            }\n\n            this.setInitialState(statedata);\n        } catch (error) {\n            log.error(\"EXCEPTION RAISED WHILE INIT COURSE EDITOR\");\n            log.error(error);\n        }\n    }\n\n    /**\n     * Return the current edit mode.\n     *\n     * The edit mode is parts of the course state, but it should only be checked on the initial state.\n     *\n     * @return {boolean} if edit is enabled\n     */\n    isEditing() {\n        return this.editing ?? false;\n    }\n\n    /**\n    * Dispatch a change in the state.\n    *\n    * Usually reactive modules throw an error directly to the components when something\n    * goes wrong. However, course editor can directly display a notification.\n    *\n    * @method dispatch\n    * @param {string} actionname the action name (usually the mutation name)\n    * @param {*} param any number of params the mutaiton needs.\n    */\n    dispatch(...args) {\n        try {\n            super.dispatch(...args);\n        } catch (error) {\n            notification.exception(error);\n        }\n    }\n}\n\nexport default new Editor({\n    name: 'CourseEditor',\n    eventname: events.statechanged,\n    eventdispatch: dispatchStateChangedEvent,\n    // Mutations can be overridden by the format plugin but we need the default one at least.\n    mutations: new DefaultMutations(),\n});\n\n/**\n * Trigger a state changed event.\n *\n * This function will be moved to core_course/events module\n * when the file is migrated to the new JS events structure proposed in MDL-70990.\n *\n * @method dispatchStateChangedEvent\n * @param {object} detail the full state\n * @param {object} target the custom event target (document if none provided)\n */\nfunction dispatchStateChangedEvent(detail, target) {\n    if (target === undefined) {\n        target = document;\n    }\n    target.dispatchEvent(new CustomEvent(events.statechanged, {\n        bubbles: true,\n        detail: detail,\n    }));\n}\n"],"file":"editor.min.js"}