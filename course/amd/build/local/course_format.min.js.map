{"version":3,"sources":["../../src/local/course_format.js"],"names":["Component","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","classes","CMLOCKED","CMDRAGGING","SECTIONLOCKED","SECTIONDRAGGING","dettachedcms","dettachedsections","sections","cms","_indexContents","reactive","supportComponents","watch","handler","_refreshSectionNumber","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadCm","_refreshSection","_refreshCm","element","cmitem","getElement","id","courseactions","refreshModule","target","classList","toggle","locked","dragging","Error","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","querySelector","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","section","listparent","_fixOrder","sectionlist","_scanIndex","item","SectionFormat","CmItem","selector","index","creationhandler","items","getElements","forEach","unregister","indexed","promise","then","catch","container","neworder","dettachedelements","length","add","innerHTML","remove","itemid","currentitem","children","append","insertBefore","dndfakeactivity","lastchild","lastChild","contains","removeChild","document","getElementById","courseeditor","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_course/local/course_format\n * @class      core_course/local/course_format\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport courseeditor from 'core_course/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport SectionFormat from 'core_course/local/section_format';\nimport CmItem from 'core_course/local/section_format/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseactions from 'core_course/actions';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            CMLOCKED: 'editinprogress',\n            CMDRAGGING: 'dragging',\n            SECTIONLOCKED: 'editinprogress',\n            SECTIONDRAGGING: 'dragging',\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedcms = {};\n        this.dettachedsections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: courseeditor,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Course content elements could not provide JS Components because the elements HTML is applied\n     * directly from the course actions. To keep internal components updated this module keeps\n     * a list of the active components and mark them as \"indexed\". This way when any action replace\n     * the HTML this component will recreate the components an add any necessary event listener.\n     *\n     */\n    stateReady() {\n        this._indexContents();\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            // Other elements updates.\n            {watch: `section:updated`, handler: this._refreshSection},\n            {watch: `cm:updated`, handler: this._refreshCm},\n        ];\n    }\n\n    /**\n     * Reload a course module.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version af the module.\n     *\n     * @param {Object} update the state update data\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            courseactions.refreshModule(cmitem, element.id);\n        }\n    }\n\n    /**\n     * Update a course index section using the state information.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSection({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            return;\n        }\n        // Update some direct classes.\n        target.classList.toggle(this.classes.SECTIONLOCKED, element.locked ?? false);\n        target.classList.toggle(this.classes.SECTIONDRAGGING, element.dragging ?? false);\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshCm({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.CM, element.id);\n        if (!target) {\n            return;\n        }\n        // Update classes.\n        target.classList.toggle(this.classes.CMLOCKED, element.locked ?? false);\n        target.classList.toggle(this.classes.CMDRAGGING, element.dragging ?? false);\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedcms = {};\n        this.dettachedsections = {};\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseactions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unkown section with ID ${element.id}`);\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedcms);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedsections);\n        }\n    }\n\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new SectionFormat(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseactions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     */\n    _fixOrder(container, neworder, selector, dettachedelements) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = this.getElement(selector, itemid) ?? dettachedelements[itemid];\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndfakeactivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild.classList.contains('dndupload-preview')) {\n                dndfakeactivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndfakeactivity) {\n            container.append(dndfakeactivity);\n        }\n    }\n}\n"],"file":"course_format.min.js"}