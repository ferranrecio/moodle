{"version":3,"sources":["../../src/local/course_format.js"],"names":["Component","name","selectors","SECTION","SECTION_ITEM","SECTION_TITLE","SECTION_CMLIST","COURSE_SECTIONLIST","CM","dettachedcms","dettachedsections","sections","cms","_indexContents","watch","handler","_refreshSectionNumber","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadCm","element","target","getElement","id","Error","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","querySelector","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","section","listparent","_fixOrder","sectionlist","_scanIndex","item","SectionFormat","CmItem","selector","index","creationhandler","items","getElements","forEach","unregister","indexed","log","debug","cmitem","promise","courseactions","refreshModule","then","catch","container","neworder","dettachedelements","length","classList","add","innerHTML","remove","itemid","currentitem","children","append","insertBefore","lastchild","lastChild","removeChild","document","getElementById","reactive","courseeditor","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_course/local/course_format\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport courseeditor from 'core_course/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport SectionFormat from 'core_course/local/section_format';\nimport CmItem from 'core_course/local/section_format/cmitem';\nimport courseactions from 'core_course/actions';\nimport log from 'core/log';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_item']`,\n            SECTION_TITLE: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedcms = {};\n        this.dettachedsections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: courseeditor,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Course content elements could not provide JS Components because the elements HTML is applied\n     * directly from the course actions. To keep internal components updated this module keeps\n     * a list of the active components and mark them as \"indexed\". This way when any action replace\n     * the HTML this component will recreate the components an add any necessary event listener.\n     *\n     */\n    stateReady() {\n        this._indexContents();\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedcms = {};\n        this.dettachedsections = {};\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseactions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unkown section with ID ${element.id}`);\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_TITLE));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedcms);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedsections);\n        }\n    }\n\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new SectionFormat(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    _reloadCm({element}) {\n        log.debug(`Refreshign ${element.id}`);\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseactions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                log.debug(`Reindex`);\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     */\n    _fixOrder(container, neworder, selector, dettachedelements) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = this.getElement(selector, itemid) ?? dettachedelements[itemid];\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            container.removeChild(lastchild);\n        }\n    }\n}\n"],"file":"course_format.min.js"}