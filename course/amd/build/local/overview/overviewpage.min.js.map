{"version":3,"file":"overviewpage.min.js","sources":["../../../src/local/overview/overviewpage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the fragment overview loadings.\n *\n * @module     core_course/local/overview/overviewpage\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport Templates from 'core/templates';\nimport Pending from 'core/pending';\nimport {eventTypes as collapsableSectionEventTypes} from 'core/local/collapsable_section/events';\n\nexport const init = async(selector) => {\n    const pageElement = document.querySelector(selector);\n    if (!pageElement) {\n        throw new Error('No elements found with the selector: ' + selector);\n    }\n\n    pageElement.addEventListener(\n        collapsableSectionEventTypes.shown,\n        event => {\n            const fragmentElement = getFragmentContainer(event.target);\n            if (!fragmentElement) {\n                return;\n            }\n            loadFragmentContent(fragmentElement);\n        }\n    );\n};\n\nconst loadFragmentContent = (element) => {\n    if (element.dataset.loaded) {\n        return;\n    }\n\n    const pendingReload = new Pending(`course_overviewtable_${element.dataset.modname}`);\n\n    const promise = Fragment.loadFragment(\n        'core_course',\n        'course_overview',\n        element.dataset.contextid,\n        {\n            courseid: element.dataset.courseid,\n            modname: element.dataset.modname,\n        }\n    );\n\n    promise.then(async(html, js) => {\n        Templates.runTemplateJS(js);\n        element.innerHTML = html;\n        // Templates.replaceNode(element, html, js);\n        element.dataset.loaded = true;\n        pendingReload.resolve();\n        return true;\n    }).catch(() => {\n        pendingReload.resolve();\n    });\n};\n\nconst getFragmentContainer = (element) => {\n    const result = element.querySelector('[data-region=\"loading-icon-container\"]');\n    if (!result) {\n        return null;\n    }\n    if (!result.dataset.contextid || !result.dataset.courseid || !result.dataset.modname) {\n        throw new Error('The element is missing required data attributes.');\n    }\n    return result;\n};\n"],"names":["async","pageElement","document","querySelector","selector","Error","addEventListener","collapsableSectionEventTypes","shown","event","fragmentElement","getFragmentContainer","target","loadFragmentContent","element","dataset","loaded","pendingReload","Pending","modname","Fragment","loadFragment","contextid","courseid","then","html","js","runTemplateJS","innerHTML","resolve","catch","result"],"mappings":";;;;;;;oOA4BoBA,MAAAA,iBACVC,YAAcC,SAASC,cAAcC,cACtCH,kBACK,IAAII,MAAM,wCAA0CD,UAG9DH,YAAYK,iBACRC,mBAA6BC,OAC7BC,cACUC,gBAAkBC,qBAAqBF,MAAMG,QAC9CF,iBAGLG,oBAAoBH,2BAK1BG,oBAAuBC,aACrBA,QAAQC,QAAQC,oBAIdC,cAAgB,IAAIC,gDAAgCJ,QAAQC,QAAQI,UAE1DC,kBAASC,aACrB,cACA,kBACAP,QAAQC,QAAQO,UAChB,CACIC,SAAUT,QAAQC,QAAQQ,SAC1BJ,QAASL,QAAQC,QAAQI,UAIzBK,MAAKxB,MAAMyB,KAAMC,yBACXC,cAAcD,IACxBZ,QAAQc,UAAYH,KAEpBX,QAAQC,QAAQC,QAAS,EACzBC,cAAcY,WACP,KACRC,OAAM,KACLb,cAAcY,cAIhBlB,qBAAwBG,gBACpBiB,OAASjB,QAAQX,cAAc,8CAChC4B,cACM,SAENA,OAAOhB,QAAQO,YAAcS,OAAOhB,QAAQQ,WAAaQ,OAAOhB,QAAQI,cACnE,IAAId,MAAM,2DAEb0B"}