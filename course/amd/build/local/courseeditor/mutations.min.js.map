{"version":3,"sources":["../../../src/local/courseeditor/mutations.js"],"names":["Mutations","action","courseid","ids","targetsectionid","targetcmid","args","ajax","call","methodname","ajaxresult","JSON","parse","statemanager","cmids","Error","course","get","_callEditWebservice","id","updates","processUpdates","sectionids","update","_forcedUpdateAction","updatename","fields","defaultUpdate","defaultCreate"],"mappings":"wKAeA,uD,moBAUqBA,CAAAA,C,+HAcSC,C,CAAQC,C,CAAUC,C,CAAKC,C,CAAiBC,C,2FACxDC,C,CAAO,CACTL,MAAM,CAANA,CADS,CAETC,QAAQ,CAARA,CAFS,CAGTC,GAAG,CAAHA,CAHS,C,CAKb,GAAIC,CAAJ,CAAqB,CACjBE,CAAI,CAACF,eAAL,CAAuBA,CAC1B,CACD,GAAIC,CAAJ,CAAgB,CACZC,CAAI,CAACD,UAAL,CAAkBA,CACrB,C,eACsBE,WAAKC,IAAL,CAAU,CAAC,CAC9BC,UAAU,CAAE,kBADkB,CAE9BH,IAAI,CAAJA,CAF8B,CAAD,CAAV,EAGnB,CAHmB,C,QAAnBI,C,iCAIGC,IAAI,CAACC,KAAL,CAAWF,CAAX,C,iMAkBEG,C,CAAcC,C,CAAOV,C,CAAiBC,C,gGAC3C,CAACD,CAAD,EAAoB,CAACC,C,uBACf,IAAIU,CAAAA,KAAJ,0D,QAEJC,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKC,mBAAL,CAAyB,SAAzB,CAAoCF,CAAM,CAACG,EAA3C,CAA+CL,CAA/C,CAAsDV,CAAtD,CAAuEC,CAAvE,C,QAAhBe,C,QACNP,CAAY,CAACQ,cAAb,CAA4BD,CAA5B,E,4LAUcP,C,CAAcS,C,CAAYlB,C,8FACnCA,C,sBACK,IAAIW,CAAAA,KAAJ,iD,QAEJC,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKC,mBAAL,CAAyB,cAAzB,CAAyCF,CAAM,CAACG,EAAhD,CAAoDG,CAApD,CAAgElB,CAAhE,C,QAAhBgB,C,QACNP,CAAY,CAACQ,cAAb,CAA4BD,CAA5B,E,6LASUP,C,CAAcC,C,2FAClBE,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKC,mBAAL,CAAyB,UAAzB,CAAqCF,CAAM,CAACG,EAA5C,CAAgDL,CAAhD,C,QAAhBM,C,QACNP,CAAY,CAACQ,cAAb,CAA4BD,CAA5B,CAAqC,CAACG,MAAM,CAAE,KAAKC,mBAAd,CAArC,E,8LASeX,C,CAAcS,C,2FACvBN,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKC,mBAAL,CAAyB,eAAzB,CAA0CF,CAAM,CAACG,EAAjD,CAAqDG,CAArD,C,QAAhBF,C,QACNP,CAAY,CAACQ,cAAb,CAA4BD,CAA5B,CAAqC,CAACG,MAAM,CAAE,KAAKC,mBAAd,CAArC,E,kMAQcX,C,2FACRG,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKC,mBAAL,CAAyB,cAAzB,CAAyCF,CAAM,CAACG,EAAhD,C,QAAhBC,C,QACNP,CAAY,CAACQ,cAAb,CAA4BD,CAA5B,CAAqC,CAACG,MAAM,CAAE,KAAKC,mBAAd,CAArC,E,gLAagBX,C,CAAcY,C,CAAYC,C,CAAQ,CAClD,GAAIb,CAAY,CAACI,GAAb,CAAiBQ,CAAjB,CAA6BC,CAAM,CAACP,EAApC,CAAJ,CAA6C,CACzCN,CAAY,CAACc,aAAb,CAA2Bd,CAA3B,CAAyCY,CAAzC,CAAqDC,CAArD,CACH,CAFD,IAEO,CACHb,CAAY,CAACe,aAAb,CAA2Bf,CAA3B,CAAyCY,CAAzC,CAAqDC,CAArD,CACH,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_course/local/courseeditor/mutations\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class Mutations {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_course_edit webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {int} courseid\n     * @param {array} ids\n     * @param {int} targetsectionid optional target section id (for moving actions)\n     * @param {int} targetcmid optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseid, ids, targetsectionid, targetcmid) {\n        const args = {\n            action,\n            courseid,\n            ids,\n        };\n        if (targetsectionid) {\n            args.targetsectionid = targetsectionid;\n        }\n        if (targetcmid) {\n            args.targetcmid = targetcmid;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_course_edit',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetsectionid or targetcmid should be provided in order to identify the\n     * new location:\n     *  - targetcmid: the activities will be located avobe the target cm. The targetsectionid\n     *                value will be ignored in this case.\n     *  - targetsectionid: the activities will be appended to the section. In this case\n     *                     targetsectionid should not be present.\n     *\n     * @param {StateManager} statemanager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {int} targetsectionid the target section id\n     * @param {int} targetcmid the target course module id\n     */\n    async cmMove(statemanager, cmids, targetsectionid, targetcmid) {\n        if (!targetsectionid && !targetcmid) {\n            throw new Error(`Mutation cmMove requires targetsectionid or targetcmid`);\n        }\n        const course = statemanager.get('course');\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetsectionid, targetcmid);\n        statemanager.processUpdates(updates);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} statemanager the current state manager\n     * @param {array} sectionids the list of section ids to move\n     * @param {int} targetsectionid the target section id\n     */\n    async sectionMove(statemanager, sectionids, targetsectionid) {\n        if (!targetsectionid) {\n            throw new Error(`Mutation sectionMove requires targetsectionid`);\n        }\n        const course = statemanager.get('course');\n        const updates = await this._callEditWebservice('section_move', course.id, sectionids, targetsectionid);\n        statemanager.processUpdates(updates);\n    }\n\n    /**\n    * Get updated state data related to some cm ids.\n    *\n    * @param {StateManager} statemanager the current state\n    * @param {array} cmids the list of cm ids to update\n    */\n    async cmState(statemanager, cmids) {\n        const course = statemanager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        statemanager.processUpdates(updates, {update: this._forcedUpdateAction});\n    }\n\n    /**\n    * Get updated state data related to some section numbers.\n    *\n    * @param {StateManager} statemanager the current state\n    * @param {array} sectionids the list of section ids to update\n    */\n    async sectionState(statemanager, sectionids) {\n        const course = statemanager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionids);\n        statemanager.processUpdates(updates, {update: this._forcedUpdateAction});\n    }\n\n    /**\n    * Get the full updated state data of the course.\n    *\n    * @param {StateManager} statemanager the current state\n    */\n    async courseState(statemanager) {\n        const course = statemanager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        statemanager.processUpdates(updates, {update: this._forcedUpdateAction});\n    }\n\n    /**\n     * Alternative update action for processUpdates.\n     *\n     * This method is used in sectionState, cmState and courseState mutations to tranform\n     * update actions in creates if necessary.\n     *\n     * @param {Object} statemanager the state manager\n     * @param {String} updatename the state element to update\n     * @param {Object} fields the new data\n     */\n    _forcedUpdateAction(statemanager, updatename, fields) {\n        if (statemanager.get(updatename, fields.id)) {\n            statemanager.defaultUpdate(statemanager, updatename, fields);\n        } else {\n            statemanager.defaultCreate(statemanager, updatename, fields);\n        }\n    }\n}\n"],"file":"mutations.min.js"}