{"version":3,"sources":["../../../src/local/courseeditor/mutations.js"],"names":["action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajax","call","methodname","ajaxresult","JSON","parse","stateManager","cmids","Error","course","get","cmLock","_callEditWebservice","id","updates","processUpdates","sectionIds","sectionLock","cmIds","dragValue","_setElementsValue","lockValue","name","fieldName","newValue","setReadOnly","forEach","element","state","section","locked","cm","update","_forcedUpdateAction","updatename","fields","defaultUpdate","defaultCreate"],"mappings":"wKAeA,uD,owBAwB8BA,C,CAAQC,C,CAAUC,C,CAAKC,C,CAAiBC,C,2FACxDC,C,CAAO,CACTL,MAAM,CAANA,CADS,CAETM,QAAQ,CAAEL,CAFD,CAGTC,GAAG,CAAHA,CAHS,C,CAKb,GAAIC,CAAJ,CAAqB,CACjBE,CAAI,CAACE,eAAL,CAAuBJ,CAC1B,CACD,GAAIC,CAAJ,CAAgB,CACZC,CAAI,CAACG,UAAL,CAAkBJ,CACrB,C,eACsBK,WAAKC,IAAL,CAAU,CAAC,CAC9BC,UAAU,CAAE,kBADkB,CAE9BN,IAAI,CAAJA,CAF8B,CAAD,CAAV,EAGnB,CAHmB,C,QAAnBO,C,iCAIGC,IAAI,CAACC,KAAL,CAAWF,CAAX,C,iMAkBEG,C,CAAcC,C,CAAOb,C,CAAiBC,C,gGAC3C,CAACD,CAAD,EAAoB,CAACC,C,uBACf,IAAIa,CAAAA,KAAJ,0D,QAEJC,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,CACf,KAAKC,MAAL,CAAYL,CAAZ,CAA0BC,CAA1B,K,eACsB,MAAKK,mBAAL,CAAyB,SAAzB,CAAoCH,CAAM,CAACI,EAA3C,CAA+CN,CAA/C,CAAsDb,CAAtD,CAAuEC,CAAvE,C,QAAhBmB,C,QACNR,CAAY,CAACS,cAAb,CAA4BD,CAA5B,EACA,KAAKH,MAAL,CAAYL,CAAZ,CAA0BC,CAA1B,K,4LAUcD,C,CAAcU,C,CAAYtB,C,8FACnCA,C,sBACK,IAAIc,CAAAA,KAAJ,iD,QAEJC,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,CACf,KAAKO,WAAL,CAAiBX,CAAjB,CAA+BU,CAA/B,K,eACsB,MAAKJ,mBAAL,CAAyB,cAAzB,CAAyCH,CAAM,CAACI,EAAhD,CAAoDG,CAApD,CAAgEtB,CAAhE,C,QAAhBoB,C,QACNR,CAAY,CAACS,cAAb,CAA4BD,CAA5B,EACA,KAAKG,WAAL,CAAiBX,CAAjB,CAA+BU,CAA/B,K,sJAUGV,C,CAAcY,C,CAAOC,C,CAAW,CACnC,KAAKC,iBAAL,CAAuBd,CAAvB,CAAqC,IAArC,CAA2CY,CAA3C,CAAkD,UAAlD,CAA8DC,CAA9D,CACH,C,gDASWb,C,CAAcU,C,CAAYG,C,CAAW,CAC7C,KAAKC,iBAAL,CAAuBd,CAAvB,CAAqC,SAArC,CAAgDU,CAAhD,CAA4D,UAA5D,CAAwEG,CAAxE,CACH,C,sCASMb,C,CAAcY,C,CAAOG,C,CAAW,CACnC,KAAKD,iBAAL,CAAuBd,CAAvB,CAAqC,IAArC,CAA2CY,CAA3C,CAAkD,QAAlD,CAA4DG,CAA5D,CACH,C,gDASWf,C,CAAcU,C,CAAYK,C,CAAW,CAC7C,KAAKD,iBAAL,CAAuBd,CAAvB,CAAqC,SAArC,CAAgDU,CAAhD,CAA4D,QAA5D,CAAsEK,CAAtE,CACH,C,4DAEiBf,C,CAAcgB,C,CAAM7B,C,CAAK8B,C,CAAWC,C,CAAU,CAC5DlB,CAAY,CAACmB,WAAb,KACAhC,CAAG,CAACiC,OAAJ,CAAY,SAACb,CAAD,CAAQ,CAChB,GAAMc,CAAAA,CAAO,CAAGrB,CAAY,CAACI,GAAb,CAAiBY,CAAjB,CAAuBT,CAAvB,CAAhB,CACA,GAAIc,CAAJ,CAAa,CACTA,CAAO,CAACJ,CAAD,CAAP,CAAqBC,CACxB,CACJ,CALD,EAMAlB,CAAY,CAACmB,WAAb,IACH,C,4CAOSnB,C,CAAc,CACpB,GAAMsB,CAAAA,CAAK,CAAGtB,CAAY,CAACsB,KAA3B,CACAtB,CAAY,CAACmB,WAAb,KACAG,CAAK,CAACC,OAAN,CAAcH,OAAd,CAAsB,SAACG,CAAD,CAAa,CAC/BA,CAAO,CAACC,MAAR,GACH,CAFD,EAGAF,CAAK,CAACG,EAAN,CAASL,OAAT,CAAiB,SAACK,CAAD,CAAQ,CACrBA,CAAE,CAACD,MAAH,GACH,CAFD,EAGAxB,CAAY,CAACmB,WAAb,IACH,C,6EAQanB,C,CAAcC,C,2FACxB,KAAKI,MAAL,CAAYL,CAAZ,CAA0BC,CAA1B,KACME,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,UAAzB,CAAqCH,CAAM,CAACI,EAA5C,CAAgDN,CAAhD,C,QAAhBO,C,QACNR,CAAY,CAACS,cAAb,CAA4BD,CAA5B,CAAqC,CAACkB,MAAM,CAAE,KAAKC,mBAAd,CAArC,E,8LAUe3B,C,CAAcU,C,2FAC7B,KAAKC,WAAL,CAAiBX,CAAjB,CAA+BU,CAA/B,KACMY,C,CAAQtB,CAAY,CAACsB,K,gBACL,MAAKhB,mBAAL,CAAyB,eAAzB,CAA0CgB,CAAK,CAACnB,MAAN,CAAaI,EAAvD,CAA2DG,CAA3D,C,QAAhBF,C,QACNR,CAAY,CAACS,cAAb,CAA4BD,CAA5B,CAAqC,CAACkB,MAAM,CAAE,KAAKC,mBAAd,CAArC,E,kMAQc3B,C,2FACRG,C,CAASH,CAAY,CAACI,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,cAAzB,CAAyCH,CAAM,CAACI,EAAhD,C,QAAhBC,C,QACNR,CAAY,CAACS,cAAb,CAA4BD,CAA5B,CAAqC,CAACkB,MAAM,CAAE,KAAKC,mBAAd,CAArC,E,gLAagB3B,C,CAAc4B,C,CAAYC,C,CAAQ,CAClD,GAAI7B,CAAY,CAACI,GAAb,CAAiBwB,CAAjB,CAA6BC,CAAM,CAACtB,EAApC,CAAJ,CAA6C,CAEzCsB,CAAM,CAACL,MAAP,IACAxB,CAAY,CAAC8B,aAAb,CAA2B9B,CAA3B,CAAyC4B,CAAzC,CAAqDC,CAArD,CACH,CAJD,IAIO,CACH7B,CAAY,CAAC+B,aAAb,CAA2B/B,CAA3B,CAAyC4B,CAAzC,CAAqDC,CAArD,CACH,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_course/local/courseeditor/mutations\n * @class     core_course/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_course_edit webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {int} courseId\n     * @param {array} ids\n     * @param {int} targetSectionId optional target section id (for moving actions)\n     * @param {int} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_course_edit',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {int} targetSectionId the target section id\n     * @param {int} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {int} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n    * Get updated state data related to some cm ids.\n    *\n    * @param {StateManager} stateManager the current state\n    * @param {array} cmids the list of cm ids to update\n    */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates, {update: this._forcedUpdateAction});\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const state = stateManager.state;\n        const updates = await this._callEditWebservice('section_state', state.course.id, sectionIds);\n        stateManager.processUpdates(updates, {update: this._forcedUpdateAction});\n    }\n\n    /**\n    * Get the full updated state data of the course.\n    *\n    * @param {StateManager} stateManager the current state\n    */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates, {update: this._forcedUpdateAction});\n    }\n\n    /**\n     * Alternative update action for processUpdates.\n     *\n     * This method is used in sectionState, cmState and courseState mutations to tranform\n     * update actions in creates if necessary.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updatename the state element to update\n     * @param {Object} fields the new data\n     */\n    _forcedUpdateAction(stateManager, updatename, fields) {\n        if (stateManager.get(updatename, fields.id)) {\n            // Any update should unlock the element.\n            fields.locked = false;\n            stateManager.defaultUpdate(stateManager, updatename, fields);\n        } else {\n            stateManager.defaultCreate(stateManager, updatename, fields);\n        }\n    }\n}\n"],"file":"mutations.min.js"}