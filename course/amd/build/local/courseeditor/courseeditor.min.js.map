{"version":3,"sources":["../../../src/local/courseeditor/courseeditor.js"],"names":["CourseEditor","courseid","ajax","call","methodname","args","jsonstate","statedata","JSON","parse","course","section","cm","editing","editmode","setInitialState","log","error","notification","exception","Reactive"],"mappings":"gOAgBA,OACA,OACA,O,g0EAaqBA,CAAAA,C,kKAQNC,C,2HAIqBC,WAAKC,IAAL,CAAU,CAAC,CAC/BC,UAAU,CAAE,uBADmB,CAE/BC,IAAI,CAAE,CAACJ,QAAQ,CAARA,CAAD,CAFyB,CAAD,CAAV,EAGpB,CAHoB,C,QAAlBK,C,QAIAC,C,CAAYC,IAAI,CAACC,KAAL,CAAWH,CAAX,C,CAGlBC,CAAS,CAACG,MAAV,WAAmBH,CAAS,CAACG,MAA7B,gBAAuC,EAAvC,CACAH,CAAS,CAACI,OAAV,WAAoBJ,CAAS,CAACI,OAA9B,gBAAyC,EAAzC,CACAJ,CAAS,CAACK,EAAV,WAAeL,CAAS,CAACK,EAAzB,gBAA+B,EAA/B,CAIA,KAAKC,OAAL,IACA,GAAIN,CAAS,CAACG,MAAV,SAAJ,CAAoC,CAChC,KAAKG,OAAL,WAAeN,CAAS,CAACG,MAAV,CAAiBI,QAAhC,kBACH,CAED,KAAKC,eAAL,CAAqBR,CAArB,E,qDAEAS,UAAIC,KAAJ,CAAU,2CAAV,EACAD,UAAIC,KAAJ,O,gKAWI,OACR,iBAAO,KAAKJ,OAAZ,kBACH,C,2CAYiB,CACd,GAAI,8BADIR,CACJ,uBADIA,CACJ,iBACA,iEAAkBA,CAAlB,EACH,CAAC,MAAOY,CAAP,CAAc,CACZC,UAAaC,SAAb,CAAuBF,CAAvB,CACH,CACJ,C,cAhEqCG,U","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {Reactive} from 'core/reactive';\nimport notification from 'core/notification';\nimport log from 'core/log';\nimport ajax from 'core/ajax';\n\n/**\n * Main course editor module.\n *\n * All formats can register new components on this object to create new reactive\n * UI components that watch the current course state.\n *\n * @module     core_course/courseeditor\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class CourseEditor extends Reactive {\n\n    /**\n    * Set up the course editor when the page is ready.\n    *\n    * @method init\n    * @param {int} courseid course id\n    */\n    async init(courseid) {\n\n        try {\n            // Async load the initial state.\n            const jsonstate = await ajax.call([{\n                methodname: 'core_course_get_state',\n                args: {courseid}\n            }])[0];\n            const statedata = JSON.parse(jsonstate);\n\n            // Check we have the minimum state elements.\n            statedata.course = statedata.course ?? {};\n            statedata.section = statedata.section ?? [];\n            statedata.cm = statedata.cm ?? [];\n\n            // Edit mode is part of the state but it could change over time.\n            // Components should use isEditing method to check the editing mode instead.\n            this.editing = false;\n            if (statedata.course !== undefined) {\n                this.editing = statedata.course.editmode ?? false;\n            }\n\n            this.setInitialState(statedata);\n        } catch (error) {\n            log.error(\"EXCEPTION RAISED WHILE INIT COURSE EDITOR\");\n            log.error(error);\n        }\n    }\n\n    /**\n     * Return the current edit mode.\n     *\n     * Components should use this method to check if edit mode is active.\n     *\n     * @return {boolean} if edit is enabled\n     */\n    isEditing() {\n        return this.editing ?? false;\n    }\n\n    /**\n    * Dispatch a change in the state.\n    *\n    * Usually reactive modules throw an error directly to the components when something\n    * goes wrong. However, course editor can directly display a notification.\n    *\n    * @method dispatch\n    * @param {string} actionname the action name (usually the mutation name)\n    * @param {*} param any number of params the mutaiton needs.\n    */\n    dispatch(...args) {\n        try {\n            super.dispatch(...args);\n        } catch (error) {\n            notification.exception(error);\n        }\n    }\n}\n"],"file":"courseeditor.min.js"}