{"version":3,"sources":["../../../src/local/editor/courseindexlazy.js"],"names":["Component","getElement","innerHTML","state","data","sections","editmode","reactive","isEditing","sectionlist","course","forEach","sectionid","sectioninfo","section","get","title","visible","id","cms","cmlist","cmid","cminfo","cm","push","name","hascms","length","hassections","Templates","render","then","html","js","appendNodeContents","fail","ex","log","error","target","newselectors","newcomponent","editor","register","ComponentBase"],"mappings":"wPAwBA,OACA,OACA,OACA,O,krDAGMA,CAAAA,C,+HAsBO,CAGL,KAAKC,UAAL,GAAkBC,SAAlB,CAA8B,yBAA9B,CACA,QACH,C,8CAOUC,C,CAAO,cAGRC,CAAI,CAAG,CACTC,QAAQ,CAAE,EADD,CAETC,QAAQ,CAAE,KAAKC,QAAL,CAAcC,SAAd,EAFD,CAHC,CAORC,CAAW,WAAGN,CAAK,CAACO,MAAN,CAAaD,WAAhB,gBAA+B,EAPlC,CAQdA,CAAW,CAACE,OAAZ,CAAoB,SAAAC,CAAS,CAAI,SACvBC,CAAW,WAAGV,CAAK,CAACW,OAAN,CAAcC,GAAd,CAAkBH,CAAlB,CAAH,gBAAmC,EADvB,CAEvBE,CAAO,CAAG,CACZE,KAAK,CAAEH,CAAW,CAACG,KADP,CAEZC,OAAO,CAAEJ,CAAW,CAACI,OAFT,CAGZC,EAAE,CAAEN,CAHQ,CAIZO,GAAG,CAAE,EAJO,CAFa,CAQvBC,CAAM,WAAGP,CAAW,CAACO,MAAf,gBAAyB,EARR,CAS7BA,CAAM,CAACT,OAAP,CAAe,SAAAU,CAAI,CAAI,CACnB,GAAMC,CAAAA,CAAM,CAAGnB,CAAK,CAACoB,EAAN,CAASR,GAAT,CAAaM,CAAb,CAAf,CACAP,CAAO,CAACK,GAAR,CAAYK,IAAZ,CAAiB,CACbC,IAAI,CAAEH,CAAM,CAACG,IADA,CAEbR,OAAO,CAAEK,CAAM,CAACL,OAFH,CAGbC,EAAE,CAAEG,CAHS,CAAjB,CAKH,CAPD,EAQAP,CAAO,CAACY,MAAR,CAAwC,CAAtB,EAAAZ,CAAO,CAACK,GAAR,CAAYQ,MAA9B,CACAvB,CAAI,CAACC,QAAL,CAAcmB,IAAd,CAAmBV,CAAnB,CACH,CAnBD,EAoBAV,CAAI,CAACwB,WAAL,CAA4C,CAAxB,EAAAxB,CAAI,CAACC,QAAL,CAAcsB,MAAlC,CAEAE,UAAUC,MAAV,CAAiB,+BAAjB,CAAkD1B,CAAlD,EACK2B,IADL,CACU,SAACC,CAAD,CAAOC,CAAP,CAAc,CAChB,CAAI,CAAChC,UAAL,GAAkBC,SAAlB,CAA8B,EAA9B,CACA2B,UAAUK,kBAAV,CAA6B,CAAI,CAACjC,UAAL,EAA7B,CAAgD+B,CAAhD,CAAsDC,CAAtD,EACA,QACH,CALL,EAKOE,IALP,CAKY,SAACC,CAAD,CAAQ,CACZC,UAAIC,KAAJ,CAAU,mCAAV,EACAD,UAAIC,KAAJ,CAAUF,CAAV,CACH,CARL,CASH,C,oCA7DWG,C,CAAQC,C,CAAc,CAC9B,GAAIC,CAAAA,CAAY,CAAG,GAAIzC,CAAAA,CAAJ,CAAc0C,SAAd,CAAnB,CACA,MAAOD,CAAAA,CAAY,CAACE,QAAb,CAAsBJ,CAAtB,CAA8BC,CAA9B,CACV,C,cAfmBI,S,YA4ET5C,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index lazy load initialize module.\n *\n * @module     core_course/courseindexlazy\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ComponentBase from 'core_course/local/editor/component';\nimport editor from 'core_course/editor';\nimport log from 'core/log';\nimport Templates from 'core/templates';\n\n\nclass Component extends ComponentBase {\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * We use a static method to prevent mustache templates to know which\n     * reactive instance is used.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} newselectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, newselectors) {\n        let newcomponent = new Component(editor);\n        return newcomponent.register(target, newselectors);\n    }\n\n    /**\n     * Component create hook.\n     *\n     * @returns {boolean}\n     */\n    create() {\n        // TODO: for now we replace the default drawer. Dele this when we have a proper\n        // course index component.\n        this.getElement().innerHTML = 'Loading course index...';\n        return true;\n    }\n\n    /**\n     * Render the real course index using the course state.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        // We are ready to replace the lazy load element with the real course index.\n        // Generate mustache data from the current state.\n        const data = {\n            sections: [],\n            editmode: this.reactive.isEditing(),\n        };\n        const sectionlist = state.course.sectionlist ?? [];\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid) ?? {};\n            const section = {\n                title: sectioninfo.title,\n                visible: sectioninfo.visible,\n                id: sectionid,\n                cms: [],\n            };\n            const cmlist = sectioninfo.cmlist ?? [];\n            cmlist.forEach(cmid => {\n                const cminfo = state.cm.get(cmid);\n                section.cms.push({\n                    name: cminfo.name,\n                    visible: cminfo.visible,\n                    id: cmid,\n                });\n            });\n            section.hascms = (section.cms.length != 0);\n            data.sections.push(section);\n        });\n        data.hassections = (data.sections.length != 0);\n\n        Templates.render('core_course/local/courseindex', data)\n            .then((html, js) => {\n                this.getElement().innerHTML = '';\n                Templates.appendNodeContents(this.getElement(), html, js);\n                return true;\n            }).fail((ex) => {\n                log.error('Cannot load course index template');\n                log.error(ex);\n            });\n    }\n}\n\nexport default Component;\n"],"file":"courseindexlazy.min.js"}