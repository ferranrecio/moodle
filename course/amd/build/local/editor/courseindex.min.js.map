{"version":3,"sources":["../../../src/local/editor/courseindex.js"],"names":["CourseIndex","name","selectors","section","cm","cicontent","newselectors","editor","registerComponent","watch","handler","cmUpdate","sectionUpdate","state","course","editmode","document","querySelector","addEventListener","toogleVisibility","bind","element","domelement","id","visible","classList","remove","add","locked","event","actionbutton","target","closest","dispatch","dataset","action"],"mappings":"6KAwBA,uD,oUAEMA,CAAAA,C,YAKF,YAAc,WAEV,KAAKC,IAAL,CAAY,aAAZ,CAEA,KAAKC,SAAL,CAAiB,CACbC,OAAO,CAAE,iBADI,CAEbC,EAAE,CAAE,YAFS,CAGbC,SAAS,CAAE,sBAHE,CAKpB,C,qCAQIC,C,CAAc,WAGf,KAAKJ,SAAL,CAAeC,OAAf,WAAyBG,CAAY,CAACH,OAAtC,gBAAiD,KAAKD,SAAL,CAAeC,OAAhE,CACA,KAAKD,SAAL,CAAeE,EAAf,WAAoBE,CAAY,CAACF,EAAjC,gBAAuC,KAAKF,SAAL,CAAeE,EAAtD,CACA,KAAKF,SAAL,CAAeG,SAAf,WAA2BC,CAAY,CAACD,SAAxC,gBAAqD,KAAKH,SAAL,CAAeG,SAApE,CAGAE,UAAOC,iBAAP,CAAyB,IAAzB,EAIA,QACH,C,iDAOa,CAIV,MAAO,CACH,CAACC,KAAK,CAAE,YAAR,CAAsBC,OAAO,CAAE,KAAKC,QAApC,CADG,CAEH,CAACF,KAAK,CAAE,iBAAR,CAA2BC,OAAO,CAAE,KAAKE,aAAzC,CAFG,CAIV,C,8CAOUC,C,CAAO,CAEd,GAAIA,CAAK,CAACC,MAAN,CAAaC,QAAjB,CAA2B,CAEvB,GAAMV,CAAAA,CAAS,CAAGW,QAAQ,CAACC,aAAT,CAAuB,KAAKf,SAAL,CAAeG,SAAtC,CAAlB,CACAA,CAAS,CAACa,gBAAV,CAA2B,OAA3B,CAAoC,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAApC,CACH,CACJ,C,4CAOmB,IAAVC,CAAAA,CAAU,GAAVA,OAAU,CAEZC,CAAU,CAAGN,QAAQ,CAACC,aAAT,WAA0B,KAAKf,SAAL,CAAeE,EAAzC,sBAAwDiB,CAAO,CAACE,EAAhE,OAFD,CAGhB,GAAI,CAACD,CAAL,CAAiB,CACb,MACH,CACD,GAAID,CAAO,CAACG,OAAZ,CAAqB,CACjBF,CAAU,CAACG,SAAX,CAAqBC,MAArB,CAA4B,QAA5B,EACAJ,CAAU,CAACG,SAAX,CAAqBC,MAArB,CAA4B,UAA5B,CACH,CAHD,IAGO,CACHJ,CAAU,CAACG,SAAX,CAAqBE,GAArB,CAAyB,QAAzB,EACAL,CAAU,CAACG,SAAX,CAAqBE,GAArB,CAAyB,UAAzB,CACH,CACD,GAAIN,CAAO,CAACO,MAAZ,CAAoB,CAChBN,CAAU,CAACG,SAAX,CAAqBE,GAArB,CAAyB,QAAzB,CACH,CAFD,IAEO,CACHL,CAAU,CAACG,SAAX,CAAqBC,MAArB,CAA4B,QAA5B,CACH,CACJ,C,sDAQwB,IAAVL,CAAAA,CAAU,GAAVA,OAAU,CAEjBC,CAAU,CAAGN,QAAQ,CAACC,aAAT,WAA0B,KAAKf,SAAL,CAAeC,OAAzC,uBAA8DkB,CAAO,CAACE,EAAtE,OAFI,CAGrB,GAAI,CAACD,CAAL,CAAiB,CACb,MACH,CACD,GAAID,CAAO,CAACG,OAAZ,CAAqB,CACjBF,CAAU,CAACG,SAAX,CAAqBC,MAArB,CAA4B,QAA5B,CACH,CAFD,IAEO,CACHJ,CAAU,CAACG,SAAX,CAAqBE,GAArB,CAAyB,QAAzB,CACH,CACJ,C,0DAWgBE,C,CAAO,CACpB,GAAMC,CAAAA,CAAY,CAAGD,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,eAArB,CAArB,CACA,GAAIF,CAAJ,CAAkB,CACdvB,UAAO0B,QAAP,CAAgBH,CAAY,CAACI,OAAb,CAAqBC,MAArC,CAA6C,CAACL,CAAY,CAACI,OAAb,CAAqBX,EAAtB,CAA7C,CACH,CACJ,C,kBAGU,GAAIvB,CAAAA,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index editor component.\n *\n * @module     core_course/courseindex\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport editor from 'core_course/editor';\n\nclass CourseIndex {\n\n    /**\n     * The class constructor.\n     */\n    constructor() {\n        // Optional component name.\n        this.name = 'courseindex';\n        // Default component css selectors.\n        this.selectors = {\n            section: '.ci-sectionitem',\n            cm: '.ci-cmitem',\n            cicontent: '#courseindex-content',\n        };\n    }\n\n    /**\n     * Initialize the component.\n     *\n     * @param {object} newselectors optional selectors override\n     * @returns {boolean}\n     */\n    init(newselectors) {\n\n        // Overwrite the components selectors if necessary.\n        this.selectors.section = newselectors.section ?? this.selectors.section;\n        this.selectors.cm = newselectors.cm ?? this.selectors.cm;\n        this.selectors.cicontent = newselectors.cicontent ?? this.selectors.cicontent;\n\n        // Register the component.\n        editor.registerComponent(this);\n\n        // Bind actions if necessary.\n\n        return true;\n    }\n\n    /**\n     * Return a list of state watchers.\n     *\n     * @returns {array} an array of state watchers functions.\n     */\n    getWatchers() {\n        // This is an example on how to capture any change in both cm and sections.\n        // To see how to capture specific element attributes such as visible or title\n        // look at core_course/local/cm_format module.\n        return [\n            {watch: 'cm:updated', handler: this.cmUpdate},\n            {watch: 'section:updated', handler: this.sectionUpdate},\n        ];\n    }\n\n    /**\n     * Render the real course index using the course state.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        // Create or bind the editor elements.\n        if (state.course.editmode) {\n            // Bind events. In this case we bind a click listener.\n            const cicontent = document.querySelector(this.selectors.cicontent);\n            cicontent.addEventListener(\"click\", this.toogleVisibility.bind(this));\n        }\n    }\n\n    /**\n     * Update an entry in the course index with the state information.\n     *\n     * @param {object} arg\n     */\n    cmUpdate({element}) {\n        // Get DOM element.\n        let domelement = document.querySelector(`${this.selectors.cm}[data-id='${element.id}']`);\n        if (!domelement) {\n            return;\n        }\n        if (element.visible) {\n            domelement.classList.remove(\"dimmed\");\n            domelement.classList.remove(\"bg-light\");\n        } else {\n            domelement.classList.add(\"dimmed\");\n            domelement.classList.add(\"bg-light\");\n        }\n        if (element.locked) {\n            domelement.classList.add(\"locked\");\n        } else {\n            domelement.classList.remove(\"locked\");\n        }\n    }\n\n    /**\n     *\n     * Update the section information with the current course state.\n     *\n     * @param {object} arg\n     */\n    sectionUpdate({element}) {\n        // Get DOM element.\n        let domelement = document.querySelector(`${this.selectors.section} [data-id='${element.id}']`);\n        if (!domelement) {\n            return;\n        }\n        if (element.visible) {\n            domelement.classList.remove(\"dimmed\");\n        } else {\n            domelement.classList.add(\"dimmed\");\n        }\n    }\n\n    /**\n     * Execute a mutation from a click event.\n     *\n     * This method is just an example on how to delegate evenets handling. In this case,\n     * this function should be located in the main editor to capture all possible\n     * actions.\n     *\n     * @param {*} event\n     */\n    toogleVisibility(event) {\n        const actionbutton = event.target.closest('[data-action]');\n        if (actionbutton) {\n            editor.dispatch(actionbutton.dataset.action, [actionbutton.dataset.id]);\n        }\n    }\n}\n\nexport default new CourseIndex();\n"],"file":"courseindex.min.js"}