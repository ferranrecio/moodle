{"version":3,"sources":["../../../src/local/editor/courseindex.js"],"names":["Component","reactive","name","selectors","section","cm","watch","handler","cmUpdate","sectionUpdate","isEditing","element","addEventListener","toogleVisibility","bind","domelement","document","querySelector","id","visible","classList","remove","add","locked","event","actionbutton","target","closest","dispatch","dataset","action","newselectors","newcomponent","editor","register","ComponentBase"],"mappings":"oNAwBA,OACA,O,krDAEMA,CAAAA,C,+BAOF,WAAYC,CAAZ,CAAsB,iBAClB,cAAMA,CAAN,EAEA,EAAKC,IAAL,CAAY,aAAZ,CAEA,EAAKC,SAAL,CAAiB,CACbC,OAAO,CAAE,iBADI,CAEbC,EAAE,CAAE,YAFS,CAAjB,CALkB,QASrB,C,oDAsBa,CAIV,MAAO,CACH,CAACC,KAAK,CAAE,YAAR,CAAsBC,OAAO,CAAE,KAAKC,QAApC,CADG,CAEH,CAACF,KAAK,CAAE,iBAAR,CAA2BC,OAAO,CAAE,KAAKE,aAAzC,CAFG,CAIV,C,+CAOY,CAET,GAAI,KAAKR,QAAL,CAAcS,SAAd,EAAJ,CAA+B,CAE3B,KAAKC,OAAL,CAAaC,gBAAb,CAA8B,OAA9B,CAAuC,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAvC,CACH,CACJ,C,4CAOmB,IAAVH,CAAAA,CAAU,GAAVA,OAAU,CAEZI,CAAU,CAAGC,QAAQ,CAACC,aAAT,WAA0B,KAAKd,SAAL,CAAeE,EAAzC,sBAAwDM,CAAO,CAACO,EAAhE,OAFD,CAGhB,GAAI,CAACH,CAAL,CAAiB,CACb,MACH,CACD,GAAIJ,CAAO,CAACQ,OAAZ,CAAqB,CACjBJ,CAAU,CAACK,SAAX,CAAqBC,MAArB,CAA4B,QAA5B,EACAN,CAAU,CAACK,SAAX,CAAqBC,MAArB,CAA4B,UAA5B,CACH,CAHD,IAGO,CACHN,CAAU,CAACK,SAAX,CAAqBE,GAArB,CAAyB,QAAzB,EACAP,CAAU,CAACK,SAAX,CAAqBE,GAArB,CAAyB,UAAzB,CACH,CACD,GAAIX,CAAO,CAACY,MAAZ,CAAoB,CAChBR,CAAU,CAACK,SAAX,CAAqBE,GAArB,CAAyB,QAAzB,CACH,CAFD,IAEO,CACHP,CAAU,CAACK,SAAX,CAAqBC,MAArB,CAA4B,QAA5B,CACH,CACJ,C,sDAQwB,IAAVV,CAAAA,CAAU,GAAVA,OAAU,CAEjBI,CAAU,CAAGC,QAAQ,CAACC,aAAT,WAA0B,KAAKd,SAAL,CAAeC,OAAzC,uBAA8DO,CAAO,CAACO,EAAtE,OAFI,CAGrB,GAAI,CAACH,CAAL,CAAiB,CACb,MACH,CACD,GAAIJ,CAAO,CAACQ,OAAZ,CAAqB,CACjBJ,CAAU,CAACK,SAAX,CAAqBC,MAArB,CAA4B,QAA5B,CACH,CAFD,IAEO,CACHN,CAAU,CAACK,SAAX,CAAqBE,GAArB,CAAyB,QAAzB,CACH,CACJ,C,0DAWgBE,C,CAAO,CACpB,GAAMC,CAAAA,CAAY,CAAGD,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,eAArB,CAArB,CACA,GAAIF,CAAJ,CAAkB,CACd,KAAKxB,QAAL,CAAc2B,QAAd,CAAuBH,CAAY,CAACI,OAAb,CAAqBC,MAA5C,CAAoD,CAACL,CAAY,CAACI,OAAb,CAAqBX,EAAtB,CAApD,CACH,CACJ,C,oCA3FWQ,C,CAAQK,C,CAAc,CAC9B,GAAIC,CAAAA,CAAY,CAAG,GAAIhC,CAAAA,CAAJ,CAAciC,SAAd,CAAnB,CACA,MAAOD,CAAAA,CAAY,CAACE,QAAb,CAAsBR,CAAtB,CAA8BK,CAA9B,CACV,C,cA/BmBI,S,YA0HTnC,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index editor component.\n *\n * @module     core_course/courseindex\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ComponentBase from 'core_course/local/editor/component';\nimport editor from 'core_course/editor';\n\nclass Component extends ComponentBase {\n\n    /**\n     * The class constructor.\n     *\n     * @param {reactive} reactive the reactive module\n     */\n    constructor(reactive) {\n        super(reactive);\n        // Optional component name.\n        this.name = 'courseindex';\n        // Default component css selectors.\n        this.selectors = {\n            section: '.ci-sectionitem',\n            cm: '.ci-cmitem',\n        };\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * We use a static method to prevent mustache templates to know which\n     * reactive instance is used.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} newselectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, newselectors) {\n        let newcomponent = new Component(editor);\n        return newcomponent.register(target, newselectors);\n    }\n\n    /**\n     * Return a list of state watchers.\n     *\n     * @returns {array} an array of state watchers functions.\n     */\n    getWatchers() {\n        // This is an example on how to capture any change in both cm and sections.\n        // To see how to capture specific element attributes such as visible or title\n        // look at core_course/local/cm_format module.\n        return [\n            {watch: 'cm:updated', handler: this.cmUpdate},\n            {watch: 'section:updated', handler: this.sectionUpdate},\n        ];\n    }\n\n    /**\n     * Render the real course index using the course state.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady() {\n        // Create or bind the editor elements.\n        if (this.reactive.isEditing()) {\n            // Bind events. In this case we bind a click listener.\n            this.element.addEventListener(\"click\", this.toogleVisibility.bind(this));\n        }\n    }\n\n    /**\n     * Update an entry in the course index with the state information.\n     *\n     * @param {object} arg\n     */\n    cmUpdate({element}) {\n        // Get DOM element.\n        let domelement = document.querySelector(`${this.selectors.cm}[data-id='${element.id}']`);\n        if (!domelement) {\n            return;\n        }\n        if (element.visible) {\n            domelement.classList.remove(\"dimmed\");\n            domelement.classList.remove(\"bg-light\");\n        } else {\n            domelement.classList.add(\"dimmed\");\n            domelement.classList.add(\"bg-light\");\n        }\n        if (element.locked) {\n            domelement.classList.add(\"locked\");\n        } else {\n            domelement.classList.remove(\"locked\");\n        }\n    }\n\n    /**\n     *\n     * Update the section information with the current course state.\n     *\n     * @param {object} arg\n     */\n    sectionUpdate({element}) {\n        // Get DOM element.\n        let domelement = document.querySelector(`${this.selectors.section} [data-id='${element.id}']`);\n        if (!domelement) {\n            return;\n        }\n        if (element.visible) {\n            domelement.classList.remove(\"dimmed\");\n        } else {\n            domelement.classList.add(\"dimmed\");\n        }\n    }\n\n    /**\n     * Execute a mutation from a click event.\n     *\n     * This method is just an example on how to delegate evenets handling. In this case,\n     * this function should be located in the main editor to capture all possible\n     * actions.\n     *\n     * @param {*} event\n     */\n    toogleVisibility(event) {\n        const actionbutton = event.target.closest('[data-action]');\n        if (actionbutton) {\n            this.reactive.dispatch(actionbutton.dataset.action, [actionbutton.dataset.id]);\n        }\n    }\n}\n\nexport default Component;\n"],"file":"courseindex.min.js"}