{"version":3,"sources":["../../../src/local/editor/statemanager.js"],"names":["StateManager","dispatchevent","target","dispatchEvent","document","locked","eventstopublish","initialPromise","Promise","resolve","addEventListener","initialStateDone","event","detail","state","initialstate","prop","hasOwnProperty","Array","isArray","StateMap","forEach","data","set","id","Proxy","handler","action","lockvalue","updates","update","processUpdate","name","fields","updatename","proxied","add","current","get","log","error","delete","publishEvents","statemanager","fieldChanges","publishedevents","Set","eventkey","eventname","eventdata","has","debug","element","obj","value","Error","JSON","stringify","push","deleteProperty","iterable","key","result","previous","Map"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Default state manager\n *\n * @module     core_course/editor/statemanager\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport log from 'core/log';\nimport {debounce} from 'core/utils';\n\n/**\n* Set up general state manager class.\n*\n* The state manager contains the state data, trigger update events and\n* can lock and unlock the state data.\n*\n* This module will be mover to core\\statemanager once the new editor dev starts.\n*\n* @return {void}\n*/\nconst StateManager = class {\n\n    /**\n     * Create a basic reactive state store.\n     *\n     * @param {function} dispatchevent the function to dispatch the custom event when the state changes.\n     * @param {element} target the state changed custom event target (document if none provided)\n     */\n    constructor(dispatchevent, target) {\n        // The dispatch event function\n        this.dispatchEvent = dispatchevent;\n        // The DOM container to trigger events.\n        this.target = target ?? document;\n        // State is not locked until initial state is set.\n        this.locked = false;\n        // List of events to publish as an event.\n        this.eventstopublish = [];\n\n        // The state_loaded event is special because it only happens one but all components\n        // may react to that state, even if they are registered after the init. For these reason\n        // we use a promise for that event.\n        this.initialPromise = new Promise((resolve) => {\n            const initialStateDone = (event) => {\n                resolve(event.detail.state);\n            };\n            this.target.addEventListener('state:loaded', initialStateDone);\n        });\n    }\n\n    /**\n     * Loads the initial state.\n     *\n     * Note this method will trigger a state changed event with \"state_loaded\" actionname.\n     *\n     * The state will be locked authomatically when the state is loaded.\n     *\n     * @param {object} initialstate\n     */\n    setInitialState(initialstate) {\n        let state = {};\n        for (const prop in initialstate) {\n            if (initialstate.hasOwnProperty(prop)) {\n                // Check is is an array.\n                if (Array.isArray(initialstate[prop])) {\n                    state[prop] = new StateMap(prop, this);\n                    initialstate[prop].forEach((data) => {\n                        state[prop].set(data.id ?? 0, new Proxy(data, handler(prop, this)));\n                    });\n                } else {\n                    state[prop] = new Proxy(initialstate[prop], handler(prop, this));\n                }\n            }\n        }\n        // Create the state object.\n        this.state = new Proxy(state, handler('', this));\n        // When the state is loaded we can lock it to prevent illegal changes.\n        this.locked = true;\n        this.dispatchEvent({\n            action: 'state:loaded',\n            state: this.state,\n        }, this.target);\n    }\n\n    /**\n     * Generate a promise that will be revolved when the initial state is loaded.\n     *\n     * @return {Promise} the resulting promise\n     */\n    getInitialPromise() {\n        return this.initialPromise;\n    }\n\n    /**\n     * Locks or unlocks the state to prevent illegal updates.\n     *\n     * @param {bool} lockvalue\n     */\n    setLocked(lockvalue) {\n        this.locked = lockvalue;\n    }\n\n    /**\n     * Process a state updates array and do all the necessary changes.\n     *\n     * Note this method unlocks the state while it is executing and relocks it\n     * when finishes.\n     *\n     * @param {array} updates\n     * @returns {bool}\n     */\n    processUpdates(updates) {\n        this.locked = false;\n        for (let update of updates) {\n            this.processUpdate(update.name, update.action, update.fields);\n        }\n        this.locked = true;\n        return true;\n    }\n\n    /**\n     * Private function process a single state updates.\n     *\n     * Note this method unlocks the state while it is executing and relocks it\n     * when finishes.\n     *\n     * @param {string} updatename\n     * @param {string} action\n     * @param {object} fields\n     */\n    processUpdate(updatename, action, fields) {\n        let state = this.state;\n\n        // Process cm creation.\n        if (action == 'create') {\n            // Create can be applied only to lists, not to objects.\n            let proxied = new Proxy(fields, handler(updatename, this));\n            if (state[updatename] instanceof StateMap) {\n                state[updatename].add(fields.id ?? 0, proxied);\n                return;\n            }\n            state[updatename] = proxied;\n            return;\n        }\n\n        // Get the current value.\n        let current = state[updatename];\n        if (current instanceof StateMap) {\n            current = state[updatename].get(fields.id ?? 0);\n            if (!current) {\n                log.error(`Inexistent ${updatename} ${fields.id ?? 0}`);\n                return;\n            }\n        }\n\n        // Process cm deletion.\n        if (action == 'delete') {\n            if (state[updatename] instanceof StateMap) {\n                state[updatename].delete(fields.id ?? 0);\n                return;\n            }\n            delete state[updatename];\n            return;\n        }\n\n        // Execute updates.\n        for (const prop in fields) {\n            if (fields.hasOwnProperty(prop)) {\n                current[prop] = fields[prop];\n            }\n        }\n    }\n};\n\nexport default StateManager;\n\n// Proxy helpers.\n\n/**\n * Dispatch all the pending events.\n *\n * This is a debounced function to prevent repeated updates.\n *\n * @param {*} state the affected current state.\n */\nconst publishEvents = debounce((statemanager) => {\n    const fieldChanges = statemanager.eventstopublish;\n    statemanager.eventstopublish = [];\n\n    // List of the published events to prevent redundancies.\n    let publishedevents = new Set();\n\n    fieldChanges.forEach(function(event) {\n\n        const eventkey = `${event.eventname}.${event.eventdata.id ?? 0}`;\n\n        if (!publishedevents.has(eventkey)) {\n            log.debug(`EVENT ${event.eventname}`);\n            statemanager.dispatchEvent({\n                action: event.eventname,\n                state: statemanager.state,\n                element: event.eventdata\n            }, statemanager.target);\n            // PubSub.publish(event.eventname, {state, element: event.eventdata});\n            publishedevents.add(eventkey);\n        }\n    });\n}, 10);\n\n\n/**\n * The proxy handler class.\n *\n * This proxy will trigger two events everytime an attribute is modified:\n * one for the specific attribute and one for the variable.\n *\n * @param {*} name\n * @param {*} statemanager\n * @returns {object}\n */\nconst handler = function(name, statemanager) {\n    return {\n        name: name,\n        statemanager: statemanager,\n        set: function(obj, prop, value) {\n            // Only mutations should be able to set state values.\n            if (this.statemanager.locked) {\n                throw new Error(`State locked. Use mutations to change ${prop} value.`);\n            }\n\n            if (JSON.stringify(obj[prop]) === JSON.stringify(value)) {\n                return true;\n            }\n\n            obj[prop] = value;\n\n            this.statemanager.eventstopublish.push({\n                eventname: `${this.name}.${prop}:updated`,\n                eventdata: obj,\n            });\n\n            // Register the general change.\n            this.statemanager.eventstopublish.push({\n                eventname: `${this.name}:updated`,\n                eventdata: obj,\n            });\n\n            publishEvents(this.statemanager);\n            return true;\n        },\n        deleteProperty: function(obj, prop) {\n            // Only mutations should be able to set state values.\n            if (this.statemanager.locked) {\n                throw new Error(`State locked. Use mutations to delete ${prop}.`);\n            }\n            if (prop in obj) {\n\n                delete obj[prop];\n\n                this.statemanager.eventstopublish.push({\n                    eventname: `${this.name}.${prop}:deleted`,\n                    eventdata: obj,\n                });\n\n                // Register the general change.\n                this.statemanager.eventstopublish.push({\n                    eventname: `${this.name}:updated`,\n                    eventdata: obj,\n                });\n\n                publishEvents(this.statemanager);\n            }\n            return true;\n        },\n    };\n};\n\n/**\n * Class to add event trigger into the JS Map class.\n */\nclass StateMap extends Map {\n    /**\n     * Creat the reactive Map.\n     *\n     * @param {string} name the property name\n     * @param {StateManager} statemanager the state manager\n     * @param {*} iterable an iterable object to create the Map\n     */\n    constructor(name, statemanager, iterable) {\n        // We don't have any \"this\" until be call super.\n        super(iterable);\n        this.name = name;\n        this.statemanager = statemanager;\n    }\n    /**\n     * Set an element into the map\n     *\n     * @param {*} key the key to store\n     * @param {*} value the value to store\n     * @returns {Map} the resulting Map object\n     */\n    set(key, value) {\n        const result = super.set(key, value);\n        // If the state is not ready yet means the initial state is not yet loaded.\n        if (this.statemanager.state === undefined) {\n            return result;\n        }\n        // Trigger update opr create event.\n        let action = (super.has(key)) ? 'updated' : 'created';\n        this.statemanager.eventstopublish.push({\n            eventname: `${this.name}:${action}`,\n            eventdata: super.get(key),\n        });\n        publishEvents(this.statemanager);\n        return result;\n    }\n    /**\n     * Delete an element from the map\n     *\n     * @param {*} key\n     * @returns {boolean}\n     */\n    delete(key) {\n        const result = super.delete(key);\n        if (!result) {\n            return result;\n        }\n        // Trigger deleted event\n        const previous = super.get(key);\n        this.statemanager.eventstopublish.push({\n            eventname: `${this.name}:deleted`,\n            eventdata: previous,\n        });\n        publishEvents(this.statemanager);\n        return result;\n    }\n}\n"],"file":"statemanager.min.js"}