{"version":3,"sources":["../../../src/local/editor/mutations.js"],"names":["mutations","callEditWebservice","action","courseid","ids","ajax","call","methodname","args","ajaxresult","JSON","parse","log","error","setLocked","statemanager","data","newvalue","forEach","id","has","get","locked","cm_hide","cmids","state","filter","cm","visible","course","updates","processUpdates","cm_show"],"mappings":"+KAwBA,OACA,O,kXAEA,GAAMA,CAAAA,CAAS,CAAG,CAURC,kBAVQ,4CAUa,WAAMC,CAAN,CAAcC,CAAd,CAAwBC,CAAxB,iHAEAC,WAAKC,IAAL,CAAU,CAAC,CAC9BC,UAAU,CAAE,kBADkB,CAE9BC,IAAI,CAAE,CACFN,MAAM,CAANA,CADE,CAEFC,QAAQ,CAARA,CAFE,CAGFC,GAAG,CAAHA,CAHE,CAFwB,CAAD,CAAV,EAOnB,CAPmB,CAFA,QAEnBK,CAFmB,iCAUhBC,IAAI,CAACC,KAAL,CAAWF,CAAX,CAVgB,qCAYvBG,UAAIC,KAAJ,yBAA2BX,CAA3B,aACAU,UAAIC,KAAJ,OAbuB,yBAchB,EAdgB,wDAVb,wDAqCRC,SArCQ,4CAqCI,WAAMC,CAAN,CAAoBC,CAApB,CAA0BZ,CAA1B,CAA+Ba,CAA/B,mFAIlBF,CAAY,CAACD,SAAb,KACAV,CAAG,CAACc,OAAJ,CAAY,SAACC,CAAD,CAAQ,CAChB,GAAIH,CAAI,CAACI,GAAL,CAASD,CAAT,CAAJ,CAAkB,CACdH,CAAI,CAACK,GAAL,CAASF,CAAT,EAAaG,MAAb,CAAsBL,CACzB,CACJ,CAJD,EAMAF,CAAY,CAACD,SAAb,KAXkB,wCArCJ,wDAAlB,CA0DAd,CAAS,CAACuB,OAAV,4CAAoB,WAAMR,CAAN,CAAoBS,CAApB,6FACZC,CADY,CACJV,CAAY,CAACU,KADT,CAGVrB,CAHU,CAGJoB,CAAK,CAACE,MAAN,CAAa,SAACP,CAAD,CAAQ,CAC7B,GAAI,CAACM,CAAK,CAACE,EAAN,CAASP,GAAT,CAAaD,CAAb,CAAL,CAAuB,CACnBP,UAAIC,KAAJ,iCAAmCM,CAAnC,qBACH,CACD,MAAOM,CAAAA,CAAK,CAACE,EAAN,CAASN,GAAT,CAAaF,CAAb,EAAiBS,OAC3B,CALW,CAHI,CAUhB5B,CAAS,CAACc,SAAV,CAAoBC,CAApB,CAAkCU,CAAK,CAACE,EAAxC,CAA4CvB,CAA5C,KAVgB,eAYIJ,CAAAA,CAAS,CAACC,kBAAV,CAA6B,SAA7B,CAAwCwB,CAAK,CAACI,MAAN,CAAaV,EAArD,CAAyDf,CAAzD,CAZJ,QAYZ0B,CAZY,QAahBf,CAAY,CAACgB,cAAb,CAA4BD,CAA5B,EAEA9B,CAAS,CAACc,SAAV,CAAoBC,CAApB,CAAkCU,CAAK,CAACE,EAAxC,CAA4CvB,CAA5C,KAfgB,wCAApB,wDA0BAJ,CAAS,CAACgC,OAAV,4CAAoB,WAAMjB,CAAN,CAAoBS,CAApB,6FACZC,CADY,CACJV,CAAY,CAACU,KADT,CAGVrB,CAHU,CAGJoB,CAAK,CAACE,MAAN,CAAa,SAACP,CAAD,CAAQ,CAC7B,GAAIM,CAAK,CAACE,EAAN,CAASN,GAAT,CAAaF,CAAb,UAAJ,CAAoC,CAChCP,UAAIC,KAAJ,iCAAmCM,CAAnC,qBACH,CACD,MAAO,CAACM,CAAK,CAACE,EAAN,CAASN,GAAT,CAAaF,CAAb,EAAiBS,OAC5B,CALW,CAHI,CAUhB5B,CAAS,CAACc,SAAV,CAAoBC,CAApB,CAAkCU,CAAK,CAACE,EAAxC,CAA4CvB,CAA5C,KAVgB,eAYIJ,CAAAA,CAAS,CAACC,kBAAV,CAA6B,SAA7B,CAAwCwB,CAAK,CAACI,MAAN,CAAaV,EAArD,CAAyDf,CAAzD,CAZJ,QAYZ0B,CAZY,QAchBf,CAAY,CAACgB,cAAb,CAA4BD,CAA5B,EAEA9B,CAAS,CAACc,SAAV,CAAoBC,CAApB,CAAkCU,CAAK,CAACE,EAAxC,CAA4CvB,CAA5C,KAhBgB,wCAApB,wD,UAmBeJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Default mutation manager\n *\n * @module     core_course/editor/mutations\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport log from 'core/log';\nimport ajax from 'core/ajax';\n\nconst mutations = {};\n\n/**\n * Call core_course_edit webservice.\n *\n * @method callEditWebservice\n * @param {string} action\n * @param {int} courseid\n * @param {array} ids\n */\nmutations.callEditWebservice = async(action, courseid, ids) => {\n    try {\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_course_edit',\n            args: {\n                action,\n                courseid,\n                ids,\n            }\n        }])[0];\n        return JSON.parse(ajaxresult);\n    } catch (error) {\n        log.error(`Error calling ${action} action`);\n        log.error(error);\n        return [];\n    }\n};\n\n/**\n * Set the locked value to all elements in a list.\n *\n * @method setLocked\n * @param {StateManager} statemanager the state element\n * @param {Map} data the state element\n * @param {array} ids\n * @param {bool} newvalue\n */\nmutations.setLocked = async(statemanager, data, ids, newvalue) => {\n    // Before doing any manual change to the state we need to unlock it.\n    // That is the reason why mutations uses the full statemanager instead that\n    // just the state as the components.\n    statemanager.setLocked(false);\n    ids.forEach((id) => {\n        if (data.has(id)) {\n            data.get(id).locked = newvalue;\n        }\n    });\n    // Lock again the state to prevent illegal writes.\n    statemanager.setLocked(true);\n};\n\n/**\n* Hide an activity.\n*\n* @method cm_hide\n* @param {StateManager} statemanager the current state\n* @param {array} cmids the list of cm ids to hide\n*/\nmutations.cm_hide = async(statemanager, cmids) => {\n    let state = statemanager.state;\n    // Filter cm ids that are already hidden or inexistent.\n    const ids = cmids.filter((id) => {\n        if (!state.cm.has(id)) {\n            log.error(`Course module with ID ${id} does not exists`);\n        }\n        return state.cm.get(id).visible;\n    });\n\n    mutations.setLocked(statemanager, state.cm, ids, true);\n\n    let updates = await mutations.callEditWebservice('cm_hide', state.course.id, ids);\n    statemanager.processUpdates(updates);\n\n    mutations.setLocked(statemanager, state.cm, ids, false);\n\n};\n\n/**\n* Show an activity.\n*\n* @method cm_show\n* @param {StateManager} statemanager the current state\n* @param {array} cmids the list of cm ids to hide\n*/\nmutations.cm_show = async(statemanager, cmids) => {\n    let state = statemanager.state;\n    // Filter cm ids that are already visible or inexistent.\n    const ids = cmids.filter((id) => {\n        if (state.cm.get(id) === undefined) {\n            log.error(`Course module with ID ${id} does not exists`);\n        }\n        return !state.cm.get(id).visible;\n    });\n\n    mutations.setLocked(statemanager, state.cm, ids, true);\n\n    let updates = await mutations.callEditWebservice('cm_show', state.course.id, ids);\n\n    statemanager.processUpdates(updates);\n\n    mutations.setLocked(statemanager, state.cm, ids, false);\n};\n\nexport default mutations;\n"],"file":"mutations.min.js"}