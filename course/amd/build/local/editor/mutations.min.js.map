{"version":3,"sources":["../../../src/local/editor/mutations.js"],"names":["Mutations","action","courseid","ids","ajax","call","methodname","args","ajaxresult","JSON","parse","statemanager","data","newvalue","setLocked","forEach","id","has","get","locked","cmids","state","filter","cm","log","error","visible","callEditWebservice","course","updates","processUpdates"],"mappings":"+KAwBA,OACA,O,srBAEMA,CAAAA,C,8HASuBC,C,CAAQC,C,CAAUC,C,wGAChBC,WAAKC,IAAL,CAAU,CAAC,CAC9BC,UAAU,CAAE,kBADkB,CAE9BC,IAAI,CAAE,CACFN,MAAM,CAANA,CADE,CAEFC,QAAQ,CAARA,CAFE,CAGFC,GAAG,CAAHA,CAHE,CAFwB,CAAD,CAAV,EAOnB,CAPmB,C,QAAnBK,C,iCAQGC,IAAI,CAACC,KAAL,CAAWF,CAAX,C,gKAYDG,C,CAAcC,C,CAAMT,C,CAAKU,C,CAAU,CAIzCF,CAAY,CAACG,SAAb,KACAX,CAAG,CAACY,OAAJ,CAAY,SAACC,CAAD,CAAQ,CAChB,GAAIJ,CAAI,CAACK,GAAL,CAASD,CAAT,CAAJ,CAAkB,CACdJ,CAAI,CAACM,GAAL,CAASF,CAAT,EAAaG,MAAb,CAAsBN,CACzB,CACJ,CAJD,EAMAF,CAAY,CAACG,SAAb,IACH,C,4EASYH,C,CAAcS,C,6FACnBC,C,CAAQV,CAAY,CAACU,K,CAEnBlB,C,CAAMiB,CAAK,CAACE,MAAN,CAAa,SAACN,CAAD,CAAQ,CAC7B,GAAI,CAACK,CAAK,CAACE,EAAN,CAASN,GAAT,CAAaD,CAAb,CAAL,CAAuB,CACnBQ,UAAIC,KAAJ,iCAAmCT,CAAnC,qBACH,CACD,MAAOK,CAAAA,CAAK,CAACE,EAAN,CAASL,GAAT,CAAaF,CAAb,EAAiBU,OAC3B,CALW,C,CAOZ,KAAKZ,SAAL,CAAeH,CAAf,CAA6BU,CAAK,CAACE,EAAnC,CAAuCpB,CAAvC,K,eAEoB,MAAKwB,kBAAL,CAAwB,SAAxB,CAAmCN,CAAK,CAACO,MAAN,CAAaZ,EAAhD,CAAoDb,CAApD,C,QAAhB0B,C,QACJlB,CAAY,CAACmB,cAAb,CAA4BD,CAA5B,EAEA,KAAKf,SAAL,CAAeH,CAAf,CAA6BU,CAAK,CAACE,EAAnC,CAAuCpB,CAAvC,K,uLAUSQ,C,CAAcS,C,6FACnBC,C,CAAQV,CAAY,CAACU,K,CAEnBlB,C,CAAMiB,CAAK,CAACE,MAAN,CAAa,SAACN,CAAD,CAAQ,CAC7B,GAAIK,CAAK,CAACE,EAAN,CAASL,GAAT,CAAaF,CAAb,UAAJ,CAAoC,CAChCQ,UAAIC,KAAJ,iCAAmCT,CAAnC,qBACH,CACD,MAAO,CAACK,CAAK,CAACE,EAAN,CAASL,GAAT,CAAaF,CAAb,EAAiBU,OAC5B,CALW,C,CAOZ,KAAKZ,SAAL,CAAeH,CAAf,CAA6BU,CAAK,CAACE,EAAnC,CAAuCpB,CAAvC,K,wBAGwB,MAAKwB,kBAAL,CAAwB,SAAxB,CAAmCN,CAAK,CAACO,MAAN,CAAaZ,EAAhD,CAAoDb,CAApD,C,QAAhB0B,C,QACJlB,CAAY,CAACmB,cAAb,CAA4BD,CAA5B,E,6DAKJ,KAAKf,SAAL,CAAeH,CAAf,CAA6BU,CAAK,CAACE,EAAnC,CAAuCpB,CAAvC,K,+IAIOH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Default mutation manager\n *\n * @module     core_course/editor/mutations\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport log from 'core/log';\nimport ajax from 'core/ajax';\n\nclass Mutations {\n    /**\n     * Call core_course_edit webservice.\n     *\n     * @method callEditWebservice\n     * @param {string} action\n     * @param {int} courseid\n     * @param {array} ids\n     */\n    async callEditWebservice(action, courseid, ids) {\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_course_edit',\n            args: {\n                action,\n                courseid,\n                ids,\n            }\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Set the locked value to all elements in a list.\n     *\n     * @method setLocked\n     * @param {StateManager} statemanager the state element\n     * @param {Map} data the state element\n     * @param {array} ids\n     * @param {bool} newvalue\n     */\n    setLocked(statemanager, data, ids, newvalue) {\n        // Before doing any manual change to the state we need to unlock it.\n        // That is the reason why mutations uses the full statemanager instead that\n        // just the state as the components.\n        statemanager.setLocked(false);\n        ids.forEach((id) => {\n            if (data.has(id)) {\n                data.get(id).locked = newvalue;\n            }\n        });\n        // Lock again the state to prevent illegal writes.\n        statemanager.setLocked(true);\n    }\n\n    /**\n    * Hide an activity.\n    *\n    * @method cm_hide\n    * @param {StateManager} statemanager the current state\n    * @param {array} cmids the list of cm ids to hide\n    */\n    async cmHide(statemanager, cmids) {\n        let state = statemanager.state;\n        // Filter cm ids that are already hidden or inexistent.\n        const ids = cmids.filter((id) => {\n            if (!state.cm.has(id)) {\n                log.error(`Course module with ID ${id} does not exists`);\n            }\n            return state.cm.get(id).visible;\n        });\n\n        this.setLocked(statemanager, state.cm, ids, true);\n\n        let updates = await this.callEditWebservice('cm_hide', state.course.id, ids);\n        statemanager.processUpdates(updates);\n\n        this.setLocked(statemanager, state.cm, ids, false);\n    }\n\n    /**\n    * Show an activity.\n    *\n    * @method cm_show\n    * @param {StateManager} statemanager the current state\n    * @param {array} cmids the list of cm ids to hide\n    */\n    async cmShow(statemanager, cmids) {\n        let state = statemanager.state;\n        // Filter cm ids that are already visible or inexistent.\n        const ids = cmids.filter((id) => {\n            if (state.cm.get(id) === undefined) {\n                log.error(`Course module with ID ${id} does not exists`);\n            }\n            return !state.cm.get(id).visible;\n        });\n\n        this.setLocked(statemanager, state.cm, ids, true);\n\n        try {\n            let updates = await this.callEditWebservice('cm_show', state.course.id, ids);\n            statemanager.processUpdates(updates);\n        } catch (error) {\n            // TODO: notify error.\n        }\n\n        this.setLocked(statemanager, state.cm, ids, false);\n    }\n}\n\nexport default Mutations;\n"],"file":"mutations.min.js"}