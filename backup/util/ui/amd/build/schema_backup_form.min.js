define("core_backup/schema_backup_form",["exports","core/str"],(function(_exports,_str){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;
/**
   * Schema selector javascript controls.
   *
   * This module controls:
   * - The select all feature.
   * - Disabling activities checkboxes when the section is not selected.
   * - Move the delegated section to the correct place.
   *
   * @module     core_backup/schema_backup_form
   * @copyright  2024 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class BackupFormController{constructor(modNames){this.selectors={firstSection:"fieldset#id_coursesettings .fcontainer .grouped_settings.section_level",checkboxes:'input[type="checkbox"]',allIncluded:"#backup-all-included",noneIncluded:"#backup-none-included",allUserdata:"#backup-all-userdata",noneUserdata:"#backup-none-userdata",modsToggler:"#mod_select_links_toggler"},this.selectorGenerators={cmAll:modName=>"#backup-all-mod_".concat(modName),cmNone:modName=>"#backup-none-mod_".concat(modName),cmAllUserdata:modName=>"#backup-all-userdata-mod_".concat(modName),cmNoneUserdata:modName=>"#backup-none-userdata-mod_".concat(modName)},this.modNames=modNames,this.formId=null,this.withuserdata=!1}async fetchStrings(){const stringsToLoad=[{key:"all",component:"moodle"},{key:"none",component:"moodle"},{key:"select",component:"moodle"},{key:"showtypes",component:"backup"},{key:"hidetypes",component:"backup"}],loadedStrings=await(0,_str.getStrings)(stringsToLoad);let count=0;this.strings=stringsToLoad.reduce(((strings,stringData)=>(strings[stringData.key]=loadedStrings[count],count++,strings)),{})}clickSelectorLinkHandler(event,checked,type,modName){event.preventDefault();const prefix=modName?"setting_activity_".concat(modName,"_"):null,checkboxes=document.querySelectorAll(this.selectors.checkboxes);for(const checkbox of checkboxes)prefix&&!checkbox.name.startsWith(prefix)||checkbox.name.endsWith(type)&&(checkbox.checked=checked);this.formId&&M.form&&M.form.updateFormState(this.formId)}getSelectAllNoneCheckboxField(classname,typeName,heading,extra){return extra=extra||"",'<div class="'.concat(classname,'" id="backup_selectors_').concat(typeName,'">\n            <div class="fitem fitem_fcheckbox backup_selector">\n                <div class="fitemtitle">').concat(heading,'</div>\n                <div class="felement">\n                    <a id="backup-all-').concat(typeName,'" href="#">').concat(this.strings.all,'</a> /\n                    <a id="backup-none-').concat(typeName,'" href="#">').concat(this.strings.none,"</a>\n                    ").concat(extra,"\n                </div>\n            </div>\n        </div>")}getCollapseLink(elementId,linkText){return'<a\n            id="'.concat(elementId,'_toggler"\n            data-toggle="collapse"\n            href="#').concat(elementId,'"\n            aria-expanded="false"\n            aria-controls="').concat(elementId,'"\n        >\n            ').concat(linkText,"\n        </a>")}generateModulesSelectorsElement(){const modlist=document.createElement("div");modlist.id="mod_select_links",modlist.className="collapse",modlist.currentlyshown=!1;for(const modName in this.modNames){if(!this.modNames.hasOwnProperty(modName))continue;let html=this.getSelectAllNoneCheckboxField("include_setting section_level","mod_"+modName,this.modNames[modName]);this.withuserdata&&(html+=this.getSelectAllNoneCheckboxField("normal_setting","userdata-mod_"+modName,this.modNames[modName]));const modlinks=document.createElement("div");modlinks.className="grouped_settings section_level",modlinks.innerHTML=html,this.initModulesSelectorsEvents(modlinks,modName),modlist.appendChild(modlinks)}return modlist}initModulesSelectorsEvents(element,modName){element.querySelector(this.selectorGenerators.cmAll(modName)).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!0,"_included",modName)}));if(element.querySelector(this.selectorGenerators.cmNone(modName)).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!1,"_included",modName)})),this.withuserdata){element.querySelector(this.selectorGenerators.cmAllUserdata(modName)).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!0,this.withuserdata,modName)}));element.querySelector(this.selectorGenerators.cmNoneUserdata(modName)).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!1,this.withuserdata,modName)}))}}generateGlobalSelectorsElement(){let html=this.getSelectAllNoneCheckboxField("include_setting section_level","included",this.strings.select,this.getCollapseLink("mod_select_links","(".concat(this.strings.showtypes,")")));this.withuserdata&&(html+=this.getSelectAllNoneCheckboxField("normal_setting","userdata",this.strings.select));const links=document.createElement("div");return links.className="grouped_settings section_level",links.innerHTML=html,this.initGlobalSelectorsEvents(links),links}initGlobalSelectorsEvents(element){element.querySelector(this.selectors.modsToggler).addEventListener("click",(()=>{setTimeout(this.refreshModulesSelectorToggler.bind(this),100)})),element.querySelector(this.selectors.allIncluded).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!0,"_included")})),element.querySelector(this.selectors.noneIncluded).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!1,"_included")})),this.withuserdata&&(element.querySelector(this.selectors.allUserdata).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!0,this.withuserdata)})),element.querySelector(this.selectors.noneUserdata).addEventListener("click",(e=>{this.clickSelectorLinkHandler(e,!1,this.withuserdata)})))}refreshModulesSelectorToggler(){const modSelectLinksToggler=document.querySelector(this.selectors.modsToggler);let linkText;linkText="true"===modSelectLinksToggler.getAttribute("aria-expanded")?this.strings.hidetypes:this.strings.showtypes,modSelectLinksToggler.textContent="(".concat(linkText,")")}generateSelectorsElement(){const links=this.generateGlobalSelectorsElement();return links.appendChild(this.generateModulesSelectorsElement()),links}addSelectors(){const firstSection=document.querySelector(this.selectors.firstSection);if(!firstSection)return;if(!firstSection.querySelector(this.selectors.checkboxes))return;this.formId=firstSection.closest("form").getAttribute("id");document.querySelectorAll(this.selectors.checkboxes).forEach((checkbox=>{const name=checkbox.name;name.endsWith("_userdata")?this.withuserdata="_userdata":name.endsWith("_userinfo")&&(this.withuserdata="_userinfo")})),firstSection.parentNode.insertBefore(this.generateSelectorsElement(),firstSection)}async init(){await this.fetchStrings(),this.addSelectors()}}_exports.init=modNames=>{new BackupFormController(modNames).init()}}));

//# sourceMappingURL=schema_backup_form.min.js.map