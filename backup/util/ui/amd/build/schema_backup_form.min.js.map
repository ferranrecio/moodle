{"version":3,"file":"schema_backup_form.min.js","sources":["../src/schema_backup_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Schema selector javascript controls.\n *\n * This module controls:\n * - The select all feature.\n * - Disabling activities checkboxes when the section is not selected.\n * - Move the delegated section to the correct place.\n *\n * @module     core_backup/schema_backup_form\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getStrings} from 'core/str';\n\n/**\n * Adds select all/none links to the top of the backup/restore/import schema page.\n */\nclass BackupFormController {\n    /**\n     * Creates a new instance of the SchemaBackupForm class.\n     * @param {Array<string>} modNames - The names of the modules.\n     */\n    constructor(modNames) {\n        this.selectors = {\n            firstSection: 'fieldset#id_coursesettings .fcontainer .grouped_settings.section_level',\n            checkboxes: 'input[type=\"checkbox\"]',\n            allIncluded: '#backup-all-included',\n            noneIncluded: '#backup-none-included',\n            allUserdata: '#backup-all-userdata',\n            noneUserdata: '#backup-none-userdata',\n            modsToggler: '#mod_select_links_toggler',\n        };\n        this.selectorGenerators = {\n            cmAll: (modName) => `#backup-all-mod_${modName}`,\n            cmNone: (modName) => `#backup-none-mod_${modName}`,\n            cmAllUserdata: (modName) => `#backup-all-userdata-mod_${modName}`,\n            cmNoneUserdata: (modName) => `#backup-none-userdata-mod_${modName}`,\n        };\n        this.modNames = modNames;\n        this.formId = null;\n        this.withuserdata = false;\n    }\n\n    /**\n     * Fetches the required strings for the backup form.\n     * @returns {Promise<void>} A promise that resolves when the strings are fetched.\n     */\n    async fetchStrings() {\n        const stringsToLoad = [\n            {key: 'all', component: 'moodle'},\n            {key: 'none', component: 'moodle'},\n            {key: 'select', component: 'moodle'},\n            {key: 'showtypes', component: 'backup'},\n            {key: 'hidetypes', component: 'backup'},\n        ];\n        const loadedStrings = await getStrings(stringsToLoad);\n\n        let count = 0;\n        this.strings = stringsToLoad.reduce((strings, stringData) => {\n            strings[stringData.key] = loadedStrings[count];\n            count++;\n            return strings;\n        }, {});\n    }\n\n    /**\n     * Handles the click event for the select all/none checkboxes.\n     *\n     * @param {Event} event - The event object.\n     * @param {boolean} checked - The checked state for the checkboxes.\n     * @param {string} type - The type of checkbox.\n     * @param {string} [modName] - The module name.\n     */\n    clickSelectorLinkHandler(event, checked, type, modName) {\n        event.preventDefault();\n\n        const prefix = modName ? `setting_activity_${modName}_` : null;\n\n        const checkboxes = document.querySelectorAll(this.selectors.checkboxes);\n        for (const checkbox of checkboxes) {\n            if (prefix && !checkbox.name.startsWith(prefix)) {\n                continue;\n            }\n            if (checkbox.name.endsWith(type)) {\n                checkbox.checked = checked;\n            }\n        }\n\n        // At this point, we really need to persuade the form we are part of to\n        // update all of its disabledIf rules. However, as far as I can see,\n        // given the way that lib/form/form.js is written, that is impossible.\n        if (this.formId && M.form) {\n            M.form.updateFormState(this.formId);\n        }\n    }\n\n    /**\n     * Returns the HTML markup for a select all/none checkbox field.\n     *\n     * @param {string} classname - The class name for the container div.\n     * @param {string} typeName - The ID type for the checkbox.\n     * @param {string} heading - The heading for the checkbox field.\n     * @param {string} [extra] - Additional HTML markup to include.\n     * @returns {string} The HTML markup for the select all/none checkbox field.\n     */\n    getSelectAllNoneCheckboxField(classname, typeName, heading, extra) {\n        extra = extra || '';\n        return `<div class=\"${classname}\" id=\"backup_selectors_${typeName}\">\n            <div class=\"fitem fitem_fcheckbox backup_selector\">\n                <div class=\"fitemtitle\">${heading}</div>\n                <div class=\"felement\">\n                    <a id=\"backup-all-${typeName}\" href=\"#\">${this.strings.all}</a> /\n                    <a id=\"backup-none-${typeName}\" href=\"#\">${this.strings.none}</a>\n                    ${extra}\n                </div>\n            </div>\n        </div>`;\n    }\n\n    /**\n     * Returns a collapse link HTML.\n     *\n     * @param {string} elementId - The ID of the element to collapse.\n     * @param {string} linkText - The text to display for the link.\n     * @returns {string} The collapse link HTML element.\n     */\n    getCollapseLink(elementId, linkText) {\n        return `<a\n            id=\"${elementId}_toggler\"\n            data-toggle=\"collapse\"\n            href=\"#${elementId}\"\n            aria-expanded=\"false\"\n            aria-controls=\"${elementId}\"\n        >\n            ${linkText}\n        </a>`;\n    }\n\n    /**\n     * Generate DOM element containing a list of modules with select all/none checkboxes.\n     * @returns {HTMLElement} The DOM element representing the module list.\n     */\n    generateModulesSelectorsElement() {\n        const modlist = document.createElement('div');\n        modlist.id = 'mod_select_links';\n        modlist.className = 'collapse';\n        modlist.currentlyshown = false;\n\n        for (const modName in this.modNames) {\n            if (!this.modNames.hasOwnProperty(modName)) {\n                continue;\n            }\n            let html = this.getSelectAllNoneCheckboxField(\n                'include_setting section_level',\n                'mod_' + modName,\n                this.modNames[modName]\n            );\n            if (this.withuserdata) {\n                html += this.getSelectAllNoneCheckboxField(\n                    'normal_setting',\n                    'userdata-mod_' + modName,\n                    this.modNames[modName]\n                );\n            }\n\n            const modlinks = document.createElement('div');\n            modlinks.className = 'grouped_settings section_level';\n            modlinks.innerHTML = html;\n            this.initModulesSelectorsEvents(modlinks, modName);\n            modlist.appendChild(modlinks);\n        }\n        return modlist;\n    }\n\n    /**\n     * Initializes the event listeners for the module selectors in the UI.\n     *\n     * @param {HTMLElement} element - The parent element containing the module selectors.\n     * @param {string} modName - The name of the module.\n     */\n    initModulesSelectorsEvents(element, modName) {\n        const backupAll = element.querySelector(this.selectorGenerators.cmAll(modName));\n        backupAll.addEventListener('click', (e) => {\n            this.clickSelectorLinkHandler(e, true, '_included', modName);\n        });\n\n        const backupNone = element.querySelector(this.selectorGenerators.cmNone(modName));\n        backupNone.addEventListener('click', (e) => {\n            this.clickSelectorLinkHandler(e, false, '_included', modName);\n        });\n\n        if (this.withuserdata) {\n            const backupAllUserdata = element.querySelector(this.selectorGenerators.cmAllUserdata(modName));\n            backupAllUserdata.addEventListener('click', (e) => {\n                this.clickSelectorLinkHandler(e, true, this.withuserdata, modName);\n            });\n\n            const backupNoneUserdata = element.querySelector(this.selectorGenerators.cmNoneUserdata(modName));\n            backupNoneUserdata.addEventListener('click', (e) => {\n                this.clickSelectorLinkHandler(e, false, this.withuserdata, modName);\n            });\n        }\n    }\n\n    /**\n     * Returns the global select all/none container element.\n     * @returns {HTMLElement} The global selectors element.\n     */\n    generateGlobalSelectorsElement() {\n        let html = this.getSelectAllNoneCheckboxField(\n            'include_setting section_level',\n            'included',\n            this.strings.select,\n            this.getCollapseLink('mod_select_links', `(${this.strings.showtypes})`)\n        );\n        if (this.withuserdata) {\n            html += this.getSelectAllNoneCheckboxField(\n                'normal_setting',\n                'userdata',\n                this.strings.select\n            );\n        }\n        const links = document.createElement('div');\n        links.className = 'grouped_settings section_level';\n        links.innerHTML = html;\n        this.initGlobalSelectorsEvents(links);\n\n        return links;\n    }\n\n    /**\n     * Initializes the global selectors events.\n     *\n     * @param {HTMLElement} element - The element to attach the events to.\n     */\n    initGlobalSelectorsEvents(element) {\n        const modSelectLinksToggler = element.querySelector(this.selectors.modsToggler);\n        modSelectLinksToggler.addEventListener('click', () => {\n            // Wait a bit to let the collapse animation finish.\n            setTimeout(this.refreshModulesSelectorToggler.bind(this), 100);\n        });\n\n        element.querySelector(this.selectors.allIncluded).addEventListener('click', (e) => {\n            this.clickSelectorLinkHandler(e, true, '_included');\n        });\n        element.querySelector(this.selectors.noneIncluded).addEventListener('click', (e) => {\n            this.clickSelectorLinkHandler(e, false, '_included');\n        });\n        if (this.withuserdata) {\n            element.querySelector(this.selectors.allUserdata).addEventListener('click', (e) => {\n                this.clickSelectorLinkHandler(e, true, this.withuserdata);\n            });\n            element.querySelector(this.selectors.noneUserdata).addEventListener('click', (e) => {\n                this.clickSelectorLinkHandler(e, false, this.withuserdata);\n            });\n        }\n    }\n\n    /**\n     * Refreshes the modules selector toggler.\n     *\n     * The toggler uses Bootstrap collapsible.\n     * However, the link text is not updated automatically.\n     */\n    refreshModulesSelectorToggler() {\n        const modSelectLinksToggler = document.querySelector(this.selectors.modsToggler);\n        let linkText;\n        if (modSelectLinksToggler.getAttribute('aria-expanded') === 'true') {\n            linkText = this.strings.hidetypes;\n        } else {\n            linkText = this.strings.showtypes;\n        }\n        modSelectLinksToggler.textContent = `(${linkText})`;\n    }\n\n    /**\n     * Generates the full selectors element to add to the page.\n     *\n     * @returns {HTMLElement} The selectors element.\n     */\n    generateSelectorsElement() {\n        const links = this.generateGlobalSelectorsElement();\n        // Add select all/none for each module type.\n        links.appendChild(this.generateModulesSelectorsElement());\n        return links;\n    }\n\n    /**\n     * Adds select all/none functionality to the backup form.\n     */\n    addSelectors() {\n        const firstSection = document.querySelector(this.selectors.firstSection);\n        if (!firstSection) {\n            // This is not a relevant page.\n            return;\n        }\n        if (!firstSection.querySelector(this.selectors.checkboxes)) {\n            // No checkboxes.\n            return;\n        }\n\n        this.formId = firstSection.closest('form').getAttribute('id');\n\n        const checkboxes = document.querySelectorAll(this.selectors.checkboxes);\n        checkboxes.forEach((checkbox) => {\n            const name = checkbox.name;\n            if (name.endsWith('_userdata')) {\n                this.withuserdata = '_userdata';\n            } else if (name.endsWith('_userinfo')) {\n                this.withuserdata = '_userinfo';\n            }\n        });\n\n        // Add global select all/none options.\n        firstSection.parentNode.insertBefore(this.generateSelectorsElement(), firstSection);\n    }\n\n    /**\n     * Initializes the schema backup form.\n     * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n     */\n    async init() {\n        await this.fetchStrings();\n        this.addSelectors();\n    }\n}\n\n/**\n * Initializes the backup form.\n *\n * @param {Array<string>} modNames - The names of the modules.\n */\nexport const init = (modNames) => {\n    const formController = new BackupFormController(modNames);\n    formController.init();\n};\n"],"names":["BackupFormController","constructor","modNames","selectors","firstSection","checkboxes","allIncluded","noneIncluded","allUserdata","noneUserdata","modsToggler","selectorGenerators","cmAll","modName","cmNone","cmAllUserdata","cmNoneUserdata","formId","withuserdata","stringsToLoad","key","component","loadedStrings","count","strings","reduce","stringData","clickSelectorLinkHandler","event","checked","type","preventDefault","prefix","document","querySelectorAll","this","checkbox","name","startsWith","endsWith","M","form","updateFormState","getSelectAllNoneCheckboxField","classname","typeName","heading","extra","all","none","getCollapseLink","elementId","linkText","generateModulesSelectorsElement","modlist","createElement","id","className","currentlyshown","hasOwnProperty","html","modlinks","innerHTML","initModulesSelectorsEvents","appendChild","element","querySelector","addEventListener","e","generateGlobalSelectorsElement","select","showtypes","links","initGlobalSelectorsEvents","setTimeout","refreshModulesSelectorToggler","bind","modSelectLinksToggler","getAttribute","hidetypes","textContent","generateSelectorsElement","addSelectors","closest","forEach","parentNode","insertBefore","fetchStrings","init"],"mappings":"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"}