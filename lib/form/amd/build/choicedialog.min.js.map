{"version":3,"file":"choicedialog.min.js","sources":["../src/choicedialog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Choice Dialog Form element.\n *\n * @module core_form/choicedialog\n * @copyright 2019 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since 4.3\n */\n\nimport {get_string as getString} from 'core/str';\nimport {markFormAsDirty} from 'core_form/changechecker';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\n\nprefetchStrings('core', ['apply']);\n\nconst CLASSES = {\n    NOTCLICKABLE: 'not-clickable',\n    HIDDEN: 'd-none',\n};\n\nconst SELECTORS = {\n    PREVIEWICON: `[data-for='choicedialog-icon']`,\n    PREVIEWTEXT: `[data-for='choicedialog-selected']`,\n};\n\n/**\n * Internal form element class.\n *\n * @private\n * @class     ChoiceDialog\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass ChoiceDialog {\n    /**\n     * Class constructor.\n     *\n     * @param {String} elementId Form element id\n     */\n    constructor(elementId) {\n        this.elementId = elementId;\n        this.mainSelect = document.getElementById(this.elementId);\n        this.preview = document.getElementById(`${this.elementId}_preview`);\n        this.modal = null;\n\n        const label = document.querySelector(`label[for='${this.mainSelect?.id}']`);\n        if (label) {\n            this.fieldName = label.innerText;\n        } else {\n            this.fieldName = '';\n        }\n    }\n\n    /**\n     * Add form element event listener.\n     */\n    addEventListeners() {\n        if (!this.mainSelect || !this.preview) {\n            return;\n        }\n        this.preview.addEventListener(\n            'click',\n            this.showModal.bind(this)\n        );\n        this.mainSelect.addEventListener(\n            'change',\n            this.updateChoicePreview.bind(this)\n        );\n        // Enabling or disabling the select does not trigger any JS event.\n        const observerCallback = (mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type !== 'attributes' || mutation.attributeName !== 'disabled') {\n                    return;\n                }\n                this.updateChoicePreview();\n            });\n        };\n        new MutationObserver(observerCallback).observe(\n            this.mainSelect,\n            {attributes: true, attributeFilter: ['disabled']}\n        );\n    }\n\n    /**\n     * Show the choice modal.\n     * @param {Event} event the click event\n     */\n    showModal(event) {\n        event.preventDefault();\n        if (this.isDisabled()) {\n            return;\n        }\n        const setupPending = new Pending('core_form:choiceDialogSetup');\n        if (this.modal !== null) {\n            this.modal.show().then(() => {\n                this.modal.getSelectedRadio()?.focus();\n                setupPending.resolve();\n                return;\n            }).catch(Notification.exception);\n            return;\n        }\n        const buttonTextPromise = getString('apply', 'core');\n        const modalParams = {\n            title: this.fieldName,\n            body: this.generateRadioOptions(),\n            type: ModalFactory.types.RADIO,\n        };\n        ModalFactory.create(modalParams).then(async(modal) => {\n            const applyText = await buttonTextPromise;\n            modal.setSaveButtonText(applyText);\n            modal.show();\n            this.addModalEventHandlers(modal);\n            modal.getRadioReadyPromise().then(() => {\n                modal.getSelectedRadio()?.focus();\n                setupPending.resolve();\n                return;\n            }).catch(Notification.exception);\n            this.modal = modal;\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Generate the radio modal options array.\n     * @return {Array}\n     */\n    generateRadioOptions() {\n        const radioOptions = [];\n\n        const selectedOptionIndex = this.mainSelect.selectedIndex;\n        let optionIndex = 0;\n\n        const options = this.mainSelect.querySelectorAll(`option`);\n        for (const option of options) {\n            const radioOption = this.getOptionPreviewData(option);\n            radioOption.value = optionIndex;\n            if (optionIndex === selectedOptionIndex) {\n                radioOption.selected = true;\n            }\n            radioOptions.push(radioOption);\n            optionIndex++;\n        }\n        return radioOptions;\n    }\n\n    /**\n     * Generate the preview data of a specific select option.\n     * @param {HTMLElement} option the select option element\n     * @returns {Object} the preview template data\n     */\n    getOptionPreviewData(option) {\n        const optionPeview = {\n            \"name\": option.innerText,\n        };\n        if (this.isDisabled() || option.disabled) {\n            optionPeview.disabled = true;\n        }\n        if (option.dataset?.description) {\n            optionPeview.description = decodeURIComponent(option.dataset.description);\n        }\n        if (option.dataset?.icon) {\n            optionPeview.icon = decodeURIComponent(option.dataset.icon);\n        }\n        return optionPeview;\n    }\n\n    /**\n     * Get the field icon.\n     * @returns {String}\n     */\n    getFieldIcon() {\n        if (this.mainSelect?.dataset?.fieldicon) {\n            return decodeURIComponent(this.mainSelect.dataset.fieldicon);\n        }\n        return '';\n    }\n\n    /**\n     * Setup radio modal events.\n     * @param {Modal} modal the loaded modal event\n     */\n    addModalEventHandlers(modal) {\n        modal.getRoot().on(\n            ModalEvents.save,\n            () => {\n                const previousSelection = this.mainSelect.selectedIndex;\n                const selectedOptionIndex = modal.getSelectedValue();\n\n                if (previousSelection === selectedOptionIndex) {\n                    return;\n                }\n                this.mainSelect.selectedIndex = selectedOptionIndex;\n                markFormAsDirty(this.mainSelect.closest('form'));\n                // Change the select element via JS does not trigger the standard change event.\n                this.mainSelect.dispatchEvent(new Event('change'));\n            }\n        );\n    }\n\n    /**\n     * Check if the field is disabled.\n     * @returns {Boolean}\n     */\n    isDisabled() {\n        return this.mainSelect?.hasAttribute('disabled');\n    }\n\n    /**\n     * Update selected option preview in form.\n     */\n    async updateChoicePreview() {\n        if (!this.mainSelect || !this.preview) {\n            return;\n        }\n\n        this.preview.disabled = this.isDisabled();\n        this.preview.classList.toggle(CLASSES.NOTCLICKABLE, this.preview.disabled);\n\n        const selectedIndex = this.mainSelect.selectedIndex;\n        if (this.preview.dataset.selectedIndex == selectedIndex) {\n            return;\n        }\n        const selectedOption = this.mainSelect.options[selectedIndex];\n        const context = this.getOptionPreviewData(selectedOption);\n        this.preview.querySelector(SELECTORS.PREVIEWTEXT).innerHTML = context.name;\n        this.preview.querySelector(SELECTORS.PREVIEWICON).innerHTML = context.icon ?? this.getFieldIcon();\n        this.preview.dataset.selectedIndex = selectedIndex;\n    }\n\n    /**\n     * Disable the choice dialog and convert it into a regular select field.\n     */\n    disableInteractiveDialog() {\n        this.mainSelect?.classList.remove(CLASSES.HIDDEN);\n        this.preview?.classList.remove(...this.preview.classList);\n        this.preview?.classList.add(CLASSES.HIDDEN);\n    }\n\n    /**\n     * Check if the field has a force dialog attribute.\n     *\n     * The force dialog is a setting to force the javascript control even in\n     * behat test.\n     *\n     * @returns {Boolean} if the dialog modal should be forced or not\n     */\n    hasForceDialog() {\n        return !!this.mainSelect?.dataset.forceDialog;\n    }\n}\n\n/**\n * Initialises a choice dialog field.\n *\n * @method init\n * @param {String} elementId Form element id\n * @listens event:uploadStarted\n * @listens event:uploadCompleted\n */\nexport const init = (elementId) => {\n    const choicedialog = new ChoiceDialog(elementId);\n    // This field is just a select wrapper. To optimize tests, we don't want to keep behat\n    // waiting for extra loadings in this case. The set field steps are about testing other\n    // stuff, not to test fancy javascript form fields. However, we keep the possibility of\n    // testing the javascript part using behat when necessary.\n    if (document.body.classList.contains('behat-site') && !choicedialog.hasForceDialog()) {\n        choicedialog.disableInteractiveDialog();\n        return;\n    }\n    choicedialog.addEventListeners();\n    choicedialog.updateChoicePreview();\n};\n"],"names":["CLASSES","SELECTORS","ChoiceDialog","constructor","elementId","mainSelect","document","getElementById","this","preview","modal","label","querySelector","_this$mainSelect","id","fieldName","innerText","addEventListeners","addEventListener","showModal","bind","updateChoicePreview","MutationObserver","mutations","forEach","mutation","type","attributeName","observe","attributes","attributeFilter","event","preventDefault","isDisabled","setupPending","Pending","show","then","getSelectedRadio","focus","resolve","catch","Notification","exception","buttonTextPromise","modalParams","title","body","generateRadioOptions","ModalFactory","types","RADIO","create","async","applyText","setSaveButtonText","addModalEventHandlers","getRadioReadyPromise","radioOptions","selectedOptionIndex","selectedIndex","optionIndex","options","querySelectorAll","option","radioOption","getOptionPreviewData","value","selected","push","optionPeview","disabled","dataset","_option$dataset","description","decodeURIComponent","_option$dataset2","icon","getFieldIcon","_this$mainSelect2","_this$mainSelect2$dat","fieldicon","getRoot","on","ModalEvents","save","previousSelection","getSelectedValue","closest","dispatchEvent","Event","_this$mainSelect3","hasAttribute","classList","toggle","selectedOption","context","innerHTML","name","disableInteractiveDialog","remove","add","hasForceDialog","_this$mainSelect5","forceDialog","choicedialog","contains"],"mappings":"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"}