define("core_form/choicedialog",["exports","core/str","core_form/changechecker","core/modal_factory","core/modal_events","core/notification","core/pending","core/prefetch"],(function(_exports,_str,_changechecker,_modal_factory,_modal_events,_notification,_pending,_prefetch){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Choice Dialog Form element.
   *
   * @module core_form/choicedialog
   * @copyright 2019 The Open University
   * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   * @since 4.3
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_notification=_interopRequireDefault(_notification),_pending=_interopRequireDefault(_pending),(0,_prefetch.prefetchStrings)("core",["apply"]);const CLASSES_NOTCLICKABLE="not-clickable",CLASSES_HIDDEN="d-none",SELECTORS_PREVIEWICON="[data-for='choicedialog-icon']",SELECTORS_PREVIEWTEXT="[data-for='choicedialog-selected']";
/**
   * Internal form element class.
   *
   * @private
   * @class     ChoiceDialog
   * @copyright  2023 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class ChoiceDialog{constructor(elementId){var _this$mainSelect;this.elementId=elementId,this.mainSelect=document.getElementById(this.elementId),this.preview=document.getElementById("".concat(this.elementId,"_preview")),this.modal=null;const label=document.querySelector("label[for='".concat(null===(_this$mainSelect=this.mainSelect)||void 0===_this$mainSelect?void 0:_this$mainSelect.id,"']"));this.fieldName=label?label.innerText:""}addEventListeners(){if(!this.mainSelect||!this.preview)return;this.preview.addEventListener("click",this.showModal.bind(this)),this.mainSelect.addEventListener("change",this.updateChoicePreview.bind(this));new MutationObserver((mutations=>{mutations.forEach((mutation=>{"attributes"===mutation.type&&"disabled"===mutation.attributeName&&this.updateChoicePreview()}))})).observe(this.mainSelect,{attributes:!0,attributeFilter:["disabled"]})}showModal(event){if(event.preventDefault(),this.isDisabled())return;const setupPending=new _pending.default("core_form:choiceDialogSetup");if(null!==this.modal)return void this.modal.show().then((()=>{var _this$modal$getSelect;null===(_this$modal$getSelect=this.modal.getSelectedRadio())||void 0===_this$modal$getSelect||_this$modal$getSelect.focus(),setupPending.resolve()})).catch(_notification.default.exception);const buttonTextPromise=(0,_str.get_string)("apply","core"),modalParams={title:this.fieldName,body:this.generateRadioOptions(),type:_modal_factory.default.types.RADIO};_modal_factory.default.create(modalParams).then((async modal=>{const applyText=await buttonTextPromise;modal.setSaveButtonText(applyText),modal.show(),this.addModalEventHandlers(modal),modal.getRadioReadyPromise().then((()=>{var _modal$getSelectedRad;null===(_modal$getSelectedRad=modal.getSelectedRadio())||void 0===_modal$getSelectedRad||_modal$getSelectedRad.focus(),setupPending.resolve()})).catch(_notification.default.exception),this.modal=modal})).catch(_notification.default.exception)}generateRadioOptions(){const radioOptions=[],selectedOptionIndex=this.mainSelect.selectedIndex;let optionIndex=0;const options=this.mainSelect.querySelectorAll("option");for(const option of options){const radioOption=this.getOptionPreviewData(option);radioOption.value=optionIndex,optionIndex===selectedOptionIndex&&(radioOption.selected=!0),radioOptions.push(radioOption),optionIndex++}return radioOptions}getOptionPreviewData(option){var _option$dataset,_option$dataset2;const optionPeview={name:option.innerText};return(this.isDisabled()||option.disabled)&&(optionPeview.disabled=!0),null!==(_option$dataset=option.dataset)&&void 0!==_option$dataset&&_option$dataset.description&&(optionPeview.description=decodeURIComponent(option.dataset.description)),null!==(_option$dataset2=option.dataset)&&void 0!==_option$dataset2&&_option$dataset2.icon&&(optionPeview.icon=decodeURIComponent(option.dataset.icon)),optionPeview}getFieldIcon(){var _this$mainSelect2,_this$mainSelect2$dat;return null!==(_this$mainSelect2=this.mainSelect)&&void 0!==_this$mainSelect2&&null!==(_this$mainSelect2$dat=_this$mainSelect2.dataset)&&void 0!==_this$mainSelect2$dat&&_this$mainSelect2$dat.fieldicon?decodeURIComponent(this.mainSelect.dataset.fieldicon):""}addModalEventHandlers(modal){modal.getRoot().on(_modal_events.default.save,(()=>{const previousSelection=this.mainSelect.selectedIndex,selectedOptionIndex=modal.getSelectedValue();previousSelection!==selectedOptionIndex&&(this.mainSelect.selectedIndex=selectedOptionIndex,(0,_changechecker.markFormAsDirty)(this.mainSelect.closest("form")),this.mainSelect.dispatchEvent(new Event("change")))}))}isDisabled(){var _this$mainSelect3;return null===(_this$mainSelect3=this.mainSelect)||void 0===_this$mainSelect3?void 0:_this$mainSelect3.hasAttribute("disabled")}async updateChoicePreview(){var _context$icon;if(!this.mainSelect||!this.preview)return;this.preview.disabled=this.isDisabled(),this.preview.classList.toggle(CLASSES_NOTCLICKABLE,this.preview.disabled);const selectedIndex=this.mainSelect.selectedIndex;if(this.preview.dataset.selectedIndex==selectedIndex)return;const selectedOption=this.mainSelect.options[selectedIndex],context=this.getOptionPreviewData(selectedOption);this.preview.querySelector(SELECTORS_PREVIEWTEXT).innerHTML=context.name,this.preview.querySelector(SELECTORS_PREVIEWICON).innerHTML=null!==(_context$icon=context.icon)&&void 0!==_context$icon?_context$icon:this.getFieldIcon(),this.preview.dataset.selectedIndex=selectedIndex}disableInteractiveDialog(){var _this$mainSelect4,_this$preview,_this$preview2;null===(_this$mainSelect4=this.mainSelect)||void 0===_this$mainSelect4||_this$mainSelect4.classList.remove(CLASSES_HIDDEN),null===(_this$preview=this.preview)||void 0===_this$preview||_this$preview.classList.remove(...this.preview.classList),null===(_this$preview2=this.preview)||void 0===_this$preview2||_this$preview2.classList.add(CLASSES_HIDDEN)}hasForceDialog(){var _this$mainSelect5;return!(null===(_this$mainSelect5=this.mainSelect)||void 0===_this$mainSelect5||!_this$mainSelect5.dataset.forceDialog)}}_exports.init=elementId=>{const choicedialog=new ChoiceDialog(elementId);!document.body.classList.contains("behat-site")||choicedialog.hasForceDialog()?(choicedialog.addEventListeners(),choicedialog.updateChoicePreview()):choicedialog.disableInteractiveDialog()}}));

//# sourceMappingURL=choicedialog.min.js.map