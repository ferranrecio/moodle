{"version":3,"file":"modal_factory.min.js","sources":["../src/modal_factory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Create a modal.\n *\n * @module     core/modal_factory\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n    [\n        'jquery', 'core/modal_events', 'core/modal_registry', 'core/modal',\n        'core/modal_save_cancel', 'core/modal_delete_cancel', 'core/modal_cancel',\n        'core/local/modal/alert', 'core/local/modal/radio',\n        'core/templates', 'core/notification', 'core/custom_interaction_events',\n        'core/pending'\n    ],\n    function(\n        $, ModalEvents, ModalRegistry, Modal, ModalSaveCancel, ModalDeleteCancel,\n        ModalCancel, ModalAlert, ModalRadio, Templates, Notification, CustomEvents, Pending\n    ) {\n\n    // The templates for each type of modal.\n    var TEMPLATES = {\n        DEFAULT: 'core/modal',\n        SAVE_CANCEL: 'core/modal_save_cancel',\n        DELETE_CANCEL: 'core/modal_delete_cancel',\n        CANCEL: 'core/modal_cancel',\n        ALERT: 'core/local/modal/alert',\n        RADIO: 'core/local/modal/radio',\n    };\n\n    /**\n     * The available types of modals.\n     *\n     * @constant\n     * @static\n     * @public\n     * @property {String} DEFAULT The default modal\n     * @property {String} SAVE_CANCEL A modal which can be used to either save, or cancel.\n     * @property {String} DELETE_CANCEL A modal which can be used to either delete, or cancel.\n     * @property {String} CANCEL A modal which displayed a cancel button\n     * @property {String} ALERT An information modal which only displays information.\n     */\n    var TYPES = {\n        DEFAULT: 'DEFAULT',\n        SAVE_CANCEL: 'SAVE_CANCEL',\n        DELETE_CANCEL: 'DELETE_CANCEL',\n        CANCEL: 'CANCEL',\n        ALERT: 'ALERT',\n        RADIO: 'RADIO',\n    };\n\n    // Register the common set of modals.\n    ModalRegistry.register(TYPES.DEFAULT, Modal, TEMPLATES.DEFAULT);\n    ModalRegistry.register(TYPES.SAVE_CANCEL, ModalSaveCancel, TEMPLATES.SAVE_CANCEL);\n    ModalRegistry.register(TYPES.DELETE_CANCEL, ModalDeleteCancel, TEMPLATES.DELETE_CANCEL);\n    ModalRegistry.register(TYPES.CANCEL, ModalCancel, TEMPLATES.CANCEL);\n    ModalRegistry.register(TYPES.ALERT, ModalAlert, TEMPLATES.ALERT);\n    ModalRegistry.register(TYPES.RADIO, ModalRadio, TEMPLATES.RADIO);\n\n    /**\n     * Set up the events required to show the modal and return focus when the modal\n     * is closed.\n     *\n     * @method setUpTrigger\n     * @private\n     * @param {Promise} modalPromise The modal instance\n     * @param {object} triggerElement The jQuery element to open the modal\n     * @param {object} modalConfig The modal configuration given to the factory\n     */\n    var setUpTrigger = function(modalPromise, triggerElement, modalConfig) {\n        // The element that actually shows the modal.\n        var actualTriggerElement = null;\n        // Check if the client has provided a callback function to be called\n        // before the modal is displayed.\n        var hasPreShowCallback = (typeof modalConfig.preShowCallback == 'function');\n        // Function to handle the trigger element being activated.\n        var triggeredCallback = function(e, data) {\n            var pendingPromise = new Pending('core/modal_factory:setUpTrigger:triggeredCallback');\n            actualTriggerElement = $(e.currentTarget);\n            modalPromise.then(\n                function(modal) {\n                    if (hasPreShowCallback) {\n                        // If the client provided a pre-show callback then execute\n                        // it now before showing the modal.\n                        modalConfig.preShowCallback(actualTriggerElement, modal);\n                    }\n\n                    modal.show();\n\n                    return modal;\n                }\n            ).then(\n                pendingPromise.resolve\n            ).catch(\n                Notification.exception\n            );\n            data.originalEvent.preventDefault();\n        };\n\n        // The trigger element can either be a single element or it can be an\n        // element + selector pair to create a delegated event handler to trigger\n        // the modal.\n        if (Array.isArray(triggerElement)) {\n            var selector = triggerElement[1];\n            triggerElement = triggerElement[0];\n\n            CustomEvents.define(triggerElement, [CustomEvents.events.activate]);\n            triggerElement.on(CustomEvents.events.activate, selector, triggeredCallback);\n        } else {\n            CustomEvents.define(triggerElement, [CustomEvents.events.activate]);\n            triggerElement.on(CustomEvents.events.activate, triggeredCallback);\n        }\n\n        modalPromise.then(\n            function(modal) {\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Focus on the trigger element that actually launched the modal.\n                    if (actualTriggerElement !== null) {\n                        actualTriggerElement.focus();\n                    }\n                });\n                return modal;\n            }\n        ).catch(\n            Notification.exception\n        );\n    };\n\n    /**\n     * Create the correct instance of a modal based on the givem type. Sets up\n     * the trigger between the modal and the trigger element.\n     *\n     * @method createFromElement\n     * @private\n     * @param {object} registryConf A config from the ModalRegistry\n     * @param {object} modalElement The modal HTML jQuery object\n     * @return {object} Modal instance\n     */\n    var createFromElement = function(registryConf, modalElement) {\n        modalElement = $(modalElement);\n        var Module = registryConf.module;\n        var modal = new Module(modalElement);\n\n        return modal;\n    };\n\n    /**\n     * Create the correct modal instance for the given type, including loading\n     * the correct template.\n     *\n     * @method createFromType\n     * @private\n     * @param {object} registryConf A config from the ModalRegistry\n     * @param {object} templateContext The context to render the template with\n     * @returns {promise} Resolved with a Modal instance\n     */\n    var createFromType = function(registryConf, templateContext) {\n        var templateName = registryConf.template;\n\n        var modalPromise = Templates.render(templateName, templateContext)\n            .then(function(html) {\n                var modalElement = $(html);\n                return createFromElement(registryConf, modalElement);\n            })\n            .fail(Notification.exception);\n\n        return modalPromise;\n    };\n\n    /**\n     * Create a Modal instance.\n     *\n     * @method create\n     * @param {object} modalConfig The configuration to create the modal instance\n     * @param {object} triggerElement The trigger HTML jQuery object\n     * @return {promise} Resolved with a Modal instance\n     */\n    var create = function(modalConfig, triggerElement) {\n        var type = modalConfig.type || TYPES.DEFAULT;\n        var isLarge = modalConfig.large ? true : false;\n        // If 'scrollable' is not configured, set the modal to be scrollable by default.\n        var isScrollable = modalConfig.hasOwnProperty('scrollable') ? modalConfig.scrollable : true;\n        var registryConf = null;\n        var templateContext = {};\n\n        registryConf = ModalRegistry.get(type);\n\n        if (!registryConf) {\n            Notification.exception({message: 'Unable to find modal of type: ' + type});\n        }\n\n        if (typeof modalConfig.templateContext != 'undefined') {\n            templateContext = modalConfig.templateContext;\n        }\n\n        var modalPromise = createFromType(registryConf, templateContext)\n            .then(function(modal) {\n                if (typeof modalConfig.title != 'undefined') {\n                    modal.setTitle(modalConfig.title);\n                }\n\n                if (typeof modalConfig.body != 'undefined') {\n                    modal.setBody(modalConfig.body);\n                }\n\n                if (typeof modalConfig.footer != 'undefined') {\n                    modal.setFooter(modalConfig.footer);\n                }\n\n                if (modalConfig.buttons) {\n                    Object.entries(modalConfig.buttons).forEach(function([key, value]) {\n                        modal.setButtonText(key, value);\n                    });\n                }\n\n                if (isLarge) {\n                    modal.setLarge();\n                }\n\n                if (typeof modalConfig.removeOnClose !== 'undefined') {\n                    // If configured remove the modal when hiding it.\n                    modal.setRemoveOnClose(modalConfig.removeOnClose);\n                }\n\n                modal.setScrollable(isScrollable);\n\n                return modal;\n            });\n\n        if (typeof triggerElement != 'undefined') {\n            setUpTrigger(modalPromise, triggerElement, modalConfig);\n        }\n\n        return modalPromise;\n    };\n\n    return {\n        create: create,\n        types: TYPES,\n    };\n});\n"],"names":["define","$","ModalEvents","ModalRegistry","Modal","ModalSaveCancel","ModalDeleteCancel","ModalCancel","ModalAlert","ModalRadio","Templates","Notification","CustomEvents","Pending","TEMPLATES","TYPES","DEFAULT","SAVE_CANCEL","DELETE_CANCEL","CANCEL","ALERT","RADIO","register","createFromType","registryConf","templateContext","templateName","template","modalPromise","render","then","html","modalElement","Module","module","createFromElement","fail","exception","create","modalConfig","triggerElement","type","isLarge","large","isScrollable","hasOwnProperty","scrollable","get","message","modal","title","setTitle","body","setBody","footer","setFooter","buttons","Object","entries","forEach","key","value","setButtonText","setLarge","removeOnClose","setRemoveOnClose","setScrollable","actualTriggerElement","hasPreShowCallback","preShowCallback","triggeredCallback","e","data","pendingPromise","currentTarget","show","resolve","catch","originalEvent","preventDefault","Array","isArray","selector","events","activate","on","getRoot","hidden","focus","setUpTrigger","types"],"mappings":"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"}