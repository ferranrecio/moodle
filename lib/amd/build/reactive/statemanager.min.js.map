{"version":3,"sources":["../../src/reactive/statemanager.js"],"names":["StateManager","dispatchevent","target","dispatchEvent","document","locked","eventstopublish","initialPromise","Promise","resolve","addEventListener","initialStateDone","event","detail","state","publishEvents","_publishEvents","initialstate","Error","Proxy","handler","prop","hasOwnProperty","action","lockvalue","updates","Array","isArray","forEach","update","name","processUpdate","fields","updatename","StateMap","add","current","id","get","delete","fieldChanges","sort","a","b","weights","created","updated","deleted","aweight","bweight","eventname","length","publishedevents","Set","eventkey","eventdata","has","element","statemanager","proxyvalues","set","obj","value","receiver","JSON","stringify","loadValues","push","deleteProperty","iterable","key","checkValue","result","previous","values","data","newvalue","Map"],"mappings":"6zFA6BMA,CAAAA,CAAY,YAQd,WAAYC,CAAZ,CAA2BC,CAA3B,CAAmC,sBAE/B,KAAKC,aAAL,CAAqBF,CAArB,CAEA,KAAKC,MAAL,QAAcA,CAAd,WAAcA,CAAd,CAAcA,CAAd,CAAwBE,QAAxB,CAEA,KAAKC,MAAL,IAEA,KAAKC,eAAL,CAAuB,EAAvB,CAKA,KAAKC,cAAL,CAAsB,GAAIC,CAAAA,OAAJ,CAAY,SAACC,CAAD,CAAa,CAI3C,CAAI,CAACP,MAAL,CAAYQ,gBAAZ,CAA6B,cAA7B,CAHyB,QAAnBC,CAAAA,gBAAmB,CAACC,CAAD,CAAW,CAChCH,CAAO,CAACG,CAAK,CAACC,MAAN,CAAaC,KAAd,CACV,CACD,CACH,CALqB,CAAtB,CAQA,KAAKC,aAAL,CAAqB,eAAS,KAAKC,cAAd,CAA8B,EAA9B,CACxB,CA9Ba,2DAyCEC,CAzCF,CAyCgB,CAE1B,GAAI,KAAKH,KAAL,SAAJ,CAA8B,CAC1B,KAAMI,CAAAA,KAAK,CAAC,4CAAD,CACd,CAGD,GAAIJ,CAAAA,CAAK,CAAG,GAAIK,CAAAA,KAAJ,CAAU,EAAV,CAAcC,CAAO,CAAC,OAAD,CAAU,IAAV,IAArB,CAAZ,CACA,IAAK,GAAMC,CAAAA,CAAX,GAAmBJ,CAAAA,CAAnB,CAAiC,CAC7B,GAAIA,CAAY,CAACK,cAAb,CAA4BD,CAA5B,CAAJ,CAAuC,CACnCP,CAAK,CAACO,CAAD,CAAL,CAAcJ,CAAY,CAACI,CAAD,CAC7B,CACJ,CACD,KAAKP,KAAL,CAAaA,CAAb,CAGA,KAAKT,MAAL,IACA,KAAKF,aAAL,CAAmB,CACfoB,MAAM,CAAE,cADO,CAEfT,KAAK,CAAE,KAAKA,KAFG,CAAnB,CAGG,KAAKZ,MAHR,CAIH,CA9Da,6DAqEM,CAChB,MAAO,MAAKK,cACf,CAvEa,4CA8EJiB,CA9EI,CA8EO,CACjB,KAAKnB,MAAL,CAAcmB,CACjB,CAhFa,sDA0FCC,CA1FD,CA0FU,YACpB,KAAKpB,MAAL,IACA,GAAI,CAACqB,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAL,CAA6B,CACzB,KAAMP,CAAAA,KAAK,CAAC,gCAAD,CACd,CACDO,CAAO,CAACG,OAAR,CAAgB,SAACC,CAAD,CAAY,CACxB,GAAIA,CAAM,CAACC,IAAP,SAAJ,CAA+B,CAC3B,KAAMZ,CAAAA,KAAK,CAAC,2BAAD,CACd,CACD,CAAI,CAACa,aAAL,CACIF,CAAM,CAACC,IADX,CACiBD,CAAM,CAACN,MADxB,CACgCM,CAAM,CAACG,MADvC,CAGH,CAPD,EAQA,KAAK3B,MAAL,GACH,CAxGa,oDAoHA4B,CApHA,CAoHYV,CApHZ,CAoHoBS,CApHpB,CAoH4B,CACtC,GAAIlB,CAAAA,CAAK,CAAG,KAAKA,KAAjB,CAEA,GAAI,CAACkB,CAAL,CAAa,CACT,KAAMd,CAAAA,KAAK,CAAC,6BAAD,CACd,CAGD,GAAc,QAAV,EAAAK,CAAJ,CAAwB,CAEpB,GAAIT,CAAK,CAACmB,CAAD,CAAL,UAA6BC,CAAAA,CAAjC,CAA2C,CACvCpB,CAAK,CAACmB,CAAD,CAAL,CAAkBE,GAAlB,CAAsBH,CAAtB,EACA,MACH,CACDlB,CAAK,CAACmB,CAAD,CAAL,CAAoBD,CAApB,CACA,MACH,CAGD,GAAII,CAAAA,CAAO,CAAGtB,CAAK,CAACmB,CAAD,CAAnB,CACA,GAAIG,CAAO,WAAYF,CAAAA,CAAvB,CAAiC,CAC7B,GAAIF,CAAM,CAACK,EAAP,SAAJ,CAA6B,CACzB,KAAMnB,CAAAA,KAAK,0BAAmBe,CAAnB,kBACd,CACDG,CAAO,CAAGtB,CAAK,CAACmB,CAAD,CAAL,CAAkBK,GAAlB,CAAsBN,CAAM,CAACK,EAA7B,CAAV,CACA,GAAI,CAACD,CAAL,CAAc,CACV,KAAMlB,CAAAA,KAAK,sBAAee,CAAf,aAA6BD,CAAM,CAACK,EAApC,EACd,CACJ,CAGD,GAAc,QAAV,EAAAd,CAAJ,CAAwB,CACpB,GAAIT,CAAK,CAACmB,CAAD,CAAL,UAA6BC,CAAAA,CAAjC,CAA2C,CACvCpB,CAAK,CAACmB,CAAD,CAAL,CAAkBM,MAAlB,CAAyBP,CAAM,CAACK,EAAhC,EACA,MACH,CACD,MAAOvB,CAAAA,CAAK,CAACmB,CAAD,CAAZ,CACA,MACH,CAGD,GAAc,QAAV,EAAAV,CAAM,EAAgBA,CAAM,SAAhC,CAAgD,CAC5C,IAAK,GAAMF,CAAAA,CAAX,GAAmBW,CAAAA,CAAnB,CAA2B,CACvB,GAAIA,CAAM,CAACV,cAAP,CAAsBD,CAAtB,CAAJ,CAAiC,CAC7Be,CAAO,CAACf,CAAD,CAAP,CAAgBW,CAAM,CAACX,CAAD,CACzB,CACJ,CAEJ,CACJ,CArKa,uDA4KG,YACPmB,CAAY,CAAG,KAAKlC,eADb,CAEb,KAAKA,eAAL,CAAuB,EAAvB,CAKAkC,CAAY,CAACC,IAAb,CAAkB,SAACC,CAAD,CAAIC,CAAJ,CAAU,SAClBC,CAAO,CAAG,CACZC,OAAO,CAAE,CADG,CAEZC,OAAO,CAAE,CAFG,CAGZC,OAAO,CAAE,CAHG,CADQ,CAMlBC,CAAO,WAAGJ,CAAO,CAACF,CAAC,CAACnB,MAAH,CAAV,gBAAwB,CANb,CAOlB0B,CAAO,WAAGL,CAAO,CAACD,CAAC,CAACpB,MAAH,CAAV,gBAAwB,CAPb,CASxB,GAAIyB,CAAO,GAAKC,CAAhB,CAAyB,CACrB,MAAON,CAAAA,CAAC,CAACO,SAAF,CAAYC,MAAZ,CAAqBT,CAAC,CAACQ,SAAF,CAAYC,MAC3C,CACD,MAAOH,CAAAA,CAAO,CAAGC,CACpB,CAbD,EAgBA,GAAIG,CAAAA,CAAe,CAAG,GAAIC,CAAAA,GAA1B,CAEAb,CAAY,CAACZ,OAAb,CAAqB,SAAChB,CAAD,CAAW,OAEtB0C,CAAQ,WAAM1C,CAAK,CAACsC,SAAZ,uBAAyBtC,CAAK,CAAC2C,SAAN,CAAgBlB,EAAzC,gBAA+C,CAA/C,CAFc,CAI5B,GAAI,CAACe,CAAe,CAACI,GAAhB,CAAoBF,CAApB,CAAL,CAAoC,CAChC,CAAI,CAACnD,aAAL,CAAmB,CACfoB,MAAM,CAAEX,CAAK,CAACsC,SADC,CAEfpC,KAAK,CAAE,CAAI,CAACA,KAFG,CAGf2C,OAAO,CAAE7C,CAAK,CAAC2C,SAHA,CAAnB,CAIG,CAAI,CAACrD,MAJR,EAMAkD,CAAe,CAACjB,GAAhB,CAAoBmB,CAApB,CACH,CACJ,CAbD,CAcH,CAnNa,e,WAsNHtD,C,IAeToB,CAAAA,CAAO,CAAG,SAASU,CAAT,CAAe4B,CAAf,CAA6BC,CAA7B,CAA0C,OAEtDA,CAAW,WAAGA,CAAH,kBAAX,CAEA,MAAO,CAEH7B,IAAI,CAAJA,CAFG,CAIH4B,YAAY,CAAZA,CAJG,CAMHC,WAAW,CAAXA,CANG,CAgBHC,GAAG,CAAE,aAASC,CAAT,CAAcxC,CAAd,CAAoByC,CAApB,CAA2BC,CAA3B,CAAqC,CAGtC,GAAI,KAAKL,YAAL,CAAkBrD,MAAtB,CAA8B,CAC1B,KAAM,IAAIa,CAAAA,KAAJ,iDAAmDG,CAAnD,sBAAoE,KAAKS,IAAzE,MACT,CAGD,GAAIkC,IAAI,CAACC,SAAL,CAAeJ,CAAG,CAACxC,CAAD,CAAlB,IAA8B2C,IAAI,CAACC,SAAL,CAAeH,CAAf,CAAlC,CAAyD,CACrD,QACH,CAED,GAAIvC,CAAAA,CAAM,CAAIsC,CAAG,CAACxC,CAAD,CAAH,SAAD,CAA4B,SAA5B,CAAwC,SAArD,CAGA,GAAI,KAAKsC,WAAT,CAAsB,CAClB,GAAIjC,KAAK,CAACC,OAAN,CAAcmC,CAAd,CAAJ,CAA0B,CACtBD,CAAG,CAACxC,CAAD,CAAH,CAAY,GAAIa,CAAAA,CAAJ,CAAab,CAAb,CAAmB,KAAKqC,YAAxB,EAAsCQ,UAAtC,CAAiDJ,CAAjD,CACf,CAFD,IAEO,CACHD,CAAG,CAACxC,CAAD,CAAH,CAAY,GAAIF,CAAAA,KAAJ,CAAU2C,CAAV,CAAiB1C,CAAO,CAACC,CAAD,CAAO,KAAKqC,YAAZ,CAAxB,CACf,CACJ,CAND,IAMO,CACHG,CAAG,CAACxC,CAAD,CAAH,CAAYyC,CACf,CAGD,GAAI,KAAKJ,YAAL,CAAkB5C,KAAlB,SAAJ,CAA2C,CACvC,QACH,CAGD,KAAK4C,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkBT,CAAlB,aAA0BE,CAA1B,CAD0B,CAEnCgC,SAAS,CAAEQ,CAFwB,CAGnCxC,MAAM,CAANA,CAHmC,CAAvC,EAOA,GAAIsC,CAAG,CAACxB,EAAJ,SAAJ,CAA0B,CACtB,KAAKqB,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkB+B,CAAG,CAACxB,EAAtB,cAA6BhB,CAA7B,aAAqCE,CAArC,CAD0B,CAEnCgC,SAAS,CAAEQ,CAFwB,CAGnCxC,MAAM,CAANA,CAHmC,CAAvC,EAKA,KAAKmC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkB+B,CAAG,CAACxB,EAAtB,cAA6Bd,CAA7B,CAD0B,CAEnCgC,SAAS,CAAEQ,CAFwB,CAGnCxC,MAAM,CAANA,CAHmC,CAAvC,CAKH,CAGD,KAAKmC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,YAD0B,CAEnCyB,SAAS,CAAEQ,CAFwB,CAGnCxC,MAAM,CAAE,SAH2B,CAAvC,EAMA,KAAKmC,YAAL,CAAkB3C,aAAlB,CAAgC,KAAK2C,YAArC,EACA,QACH,CA5EE,CAoFHU,cAAc,CAAE,wBAASP,CAAT,CAAcxC,CAAd,CAAoB,CAEhC,GAAI,KAAKqC,YAAL,CAAkBrD,MAAtB,CAA8B,CAC1B,KAAM,IAAIa,CAAAA,KAAJ,iDAAmDG,CAAnD,gBAA8D,KAAKS,IAAnE,MACT,CACD,GAAIT,CAAI,GAAIwC,CAAAA,CAAZ,CAAiB,CAEb,MAAOA,CAAAA,CAAG,CAACxC,CAAD,CAAV,CAEA,KAAKqC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkBT,CAAlB,YAD0B,CAEnCkC,SAAS,CAAEM,CAFwB,CAGnCtC,MAAM,CAAE,SAH2B,CAAvC,EAOA,GAAIsC,CAAG,CAACxB,EAAJ,SAAJ,CAA0B,CACtB,KAAKqB,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkB+B,CAAG,CAACxB,EAAtB,cAA6BhB,CAA7B,YAD0B,CAEnCkC,SAAS,CAAEM,CAFwB,CAGnCtC,MAAM,CAAE,SAH2B,CAAvC,EAKA,KAAKmC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkB+B,CAAG,CAACxB,EAAtB,aAD0B,CAEnCkB,SAAS,CAAEM,CAFwB,CAGnCtC,MAAM,CAAE,SAH2B,CAAvC,CAKH,CAGD,KAAKmC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,YAD0B,CAEnCyB,SAAS,CAAEM,CAFwB,CAGnCtC,MAAM,CAAE,SAH2B,CAAvC,EAMA,KAAKmC,YAAL,CAAkB3C,aAAlB,CAAgC,KAAK2C,YAArC,CACH,CACD,QACH,CA3HE,CA6HV,C,CAKKxB,C,+BAQF,WAAYJ,CAAZ,CAAkB4B,CAAlB,CAAgCW,CAAhC,CAA0C,iBAEtC,cAAMA,CAAN,EACA,EAAKvC,IAAL,CAAYA,CAAZ,CACA,EAAK4B,YAAL,CAAoBA,CAApB,CAJsC,QAKzC,C,mCAWGY,C,CAAKR,C,CAAO,CAEZ,GAAI,KAAKJ,YAAL,CAAkBrD,MAAtB,CAA8B,CAC1B,KAAM,IAAIa,CAAAA,KAAJ,iDAAmDoD,CAAnD,sBAAmE,KAAKxC,IAAxE,MACT,CAED,KAAKyC,UAAL,CAAgBT,CAAhB,EAEA,GAAIQ,CAAG,SAAH,EAA6B,IAAR,GAAAA,CAAzB,CAAuC,CACnC,KAAMpD,CAAAA,KAAK,CAAC,8CAAD,CACd,CAGD,GAAI4C,CAAK,CAACzB,EAAN,GAAaiC,CAAjB,CAAsB,CAClB,KAAM,IAAIpD,CAAAA,KAAJ,wBAA0B,KAAKY,IAA/B,8BAAwDgC,CAAK,CAACzB,EAA9D,uBAA8EiC,CAA9E,eACT,CAfW,GAiBR/C,CAAAA,CAAM,CAAG,uCAAW+C,CAAX,EAAmB,SAAnB,CAA+B,SAjBhC,CAoBNE,CAAM,wCAAaF,CAAb,CAAkB,GAAInD,CAAAA,KAAJ,CAAU2C,CAAV,CAAiB1C,CAAO,CAAC,KAAKU,IAAN,CAAY,KAAK4B,YAAjB,CAAxB,CAAlB,CApBA,CAuBZ,GAAI,KAAKA,YAAL,CAAkB5C,KAAlB,SAAJ,CAA2C,CACvC,MAAO0D,CAAAA,CACV,CAGD,KAAKd,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkBgC,CAAK,CAACzB,EAAxB,cAA+Bd,CAA/B,CAD0B,CAEnCgC,SAAS,wCAAYe,CAAZ,CAF0B,CAGnC/C,MAAM,CAANA,CAHmC,CAAvC,EAKA,KAAKmC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkBP,CAAlB,CAD0B,CAEnCgC,SAAS,wCAAYe,CAAZ,CAF0B,CAGnC/C,MAAM,CAANA,CAHmC,CAAvC,EAMA,KAAKmC,YAAL,CAAkB3C,aAAlB,CAAgC,KAAK2C,YAArC,EACA,MAAOc,CAAAA,CACV,C,8CAWUV,C,CAAO,CACd,GAAsB,QAAlB,MAAQA,CAAR,GAAwC,IAAV,GAAAA,CAAlC,CAAkD,CAC9C,KAAM5C,CAAAA,KAAK,CAAC,sCAAD,CACd,CAED,GAAI4C,CAAK,CAACzB,EAAN,SAAJ,CAA4B,CACxB,KAAMnB,CAAAA,KAAK,CAAC,6DAAD,CACd,CACJ,C,gCAUG4C,C,CAAO,CACP,KAAKS,UAAL,CAAgBT,CAAhB,EACA,MAAO,MAAKF,GAAL,CAASE,CAAK,CAACzB,EAAf,CAAmByB,CAAnB,CACV,C,uCAQMQ,C,CAAK,CAGR,GAAI,KAAKZ,YAAL,CAAkBrD,MAAtB,CAA8B,CAC1B,KAAM,IAAIa,CAAAA,KAAJ,iDAAmDoD,CAAnD,sBAAmE,KAAKxC,IAAxE,MACT,CALO,GAOF2C,CAAAA,CAAQ,wCAAaH,CAAb,CAPN,CASFE,CAAM,2CAAgBF,CAAhB,CATJ,CAUR,GAAI,CAACE,CAAL,CAAa,CACT,MAAOA,CAAAA,CACV,CAED,KAAKd,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,aAAkBwC,CAAlB,aAD0B,CAEnCf,SAAS,CAAEkB,CAFwB,CAGnClD,MAAM,CAAE,SAH2B,CAAvC,EAKA,KAAKmC,YAAL,CAAkBpD,eAAlB,CAAkC6D,IAAlC,CAAuC,CACnCjB,SAAS,WAAK,KAAKpB,IAAV,YAD0B,CAEnCyB,SAAS,CAAEkB,CAFwB,CAGnClD,MAAM,CAAE,SAH2B,CAAvC,EAKA,KAAKmC,YAAL,CAAkB3C,aAAlB,CAAgC,KAAK2C,YAArC,EACA,MAAOc,CAAAA,CACV,C,uCAWQ,CACL,GAAIA,CAAAA,CAAM,CAAG,EAAb,CACA,KAAK5C,OAAL,CAAa,SAACkC,CAAD,CAAW,CACpBU,CAAM,CAACL,IAAP,CAAYL,CAAZ,CACH,CAFD,EAGA,MAAOU,CAAAA,CACV,C,8CAWUE,C,CAAQ,YACfA,CAAM,CAAC9C,OAAP,CAAe,SAAC+C,CAAD,CAAU,CACrB,CAAI,CAACJ,UAAL,CAAgBI,CAAhB,EADqB,GAEfL,CAAAA,CAAG,CAAGK,CAAI,CAACtC,EAFI,CAGjBuC,CAAQ,CAAG,GAAIzD,CAAAA,KAAJ,CAAUwD,CAAV,CAAgBvD,CAAO,CAAC,CAAI,CAACU,IAAN,CAAY,CAAI,CAAC4B,YAAjB,CAAvB,CAHM,CAIrB,CAAI,CAACE,GAAL,CAASU,CAAT,CAAcM,CAAd,CACH,CALD,EAMA,MAAO,KACV,C,gBAvKkBC,G","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive simple state manager.\n *\n * The state manager contains the state data, trigger update events and\n * can lock and unlock the state data.\n *\n * @module     core/reactive/statemanager\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {debounce} from 'core/utils';\n\nconst StateManager = class {\n\n    /**\n     * Create a basic reactive state store.\n     *\n     * @param {function} dispatchevent the function to dispatch the custom event when the state changes.\n     * @param {element} target the state changed custom event target (document if none provided)\n     */\n    constructor(dispatchevent, target) {\n        // The dispatch event function\n        this.dispatchEvent = dispatchevent;\n        // The DOM container to trigger events.\n        this.target = target ?? document;\n        // State is not locked until initial state is set.\n        this.locked = false;\n        // List of events to publish as an event.\n        this.eventstopublish = [];\n\n        // The state_loaded event is special because it only happens one but all components\n        // may react to that state, even if they are registered after the init. For these reason\n        // we use a promise for that event.\n        this.initialPromise = new Promise((resolve) => {\n            const initialStateDone = (event) => {\n                resolve(event.detail.state);\n            };\n            this.target.addEventListener('state:loaded', initialStateDone);\n        });\n\n        // Add a public debounced publishEvents function.\n        this.publishEvents = debounce(this._publishEvents, 10);\n    }\n\n    /**\n     * Loads the initial state.\n     *\n     * Note this method will trigger a state changed event with \"state_loaded\" actionname.\n     *\n     * The state will be locked authomatically when the state is loaded.\n     *\n     * @param {object} initialstate\n     */\n    setInitialState(initialstate) {\n\n        if (this.state !== undefined) {\n            throw Error('Initial state can only be initialized ones');\n        }\n\n        // Create the state object.\n        let state = new Proxy({}, handler('state', this, true));\n        for (const prop in initialstate) {\n            if (initialstate.hasOwnProperty(prop)) {\n                state[prop] = initialstate[prop];\n            }\n        }\n        this.state = state;\n\n        // When the state is loaded we can lock it to prevent illegal changes.\n        this.locked = true;\n        this.dispatchEvent({\n            action: 'state:loaded',\n            state: this.state,\n        }, this.target);\n    }\n\n    /**\n     * Generate a promise that will be revolved when the initial state is loaded.\n     *\n     * @return {Promise} the resulting promise\n     */\n    getInitialPromise() {\n        return this.initialPromise;\n    }\n\n    /**\n     * Locks or unlocks the state to prevent illegal updates.\n     *\n     * @param {bool} lockvalue\n     */\n    setLocked(lockvalue) {\n        this.locked = lockvalue;\n    }\n\n    /**\n     * Process a state updates array and do all the necessary changes.\n     *\n     * Note this method unlocks the state while it is executing and relocks it\n     * when finishes.\n     *\n     * @param {array} updates\n     */\n    processUpdates(updates) {\n        this.locked = false;\n        if (!Array.isArray(updates)) {\n            throw Error('State updates must be an array');\n        }\n        updates.forEach((update) => {\n            if (update.name === undefined) {\n                throw Error('Missing state update name');\n            }\n            this.processUpdate(\n                update.name, update.action, update.fields\n            );\n        });\n        this.locked = true;\n    }\n\n    /**\n     * Private function process a single state updates.\n     *\n     * Note this method unlocks the state while it is executing and relocks it\n     * when finishes.\n     *\n     * @param {string} updatename\n     * @param {string} action\n     * @param {object} fields\n     */\n    processUpdate(updatename, action, fields) {\n        let state = this.state;\n\n        if (!fields) {\n            throw Error('Missing state update fields');\n        }\n\n        // Process cm creation.\n        if (action == 'create') {\n            // Create can be applied only to lists, not to objects.\n            if (state[updatename] instanceof StateMap) {\n                state[updatename].add(fields);\n                return;\n            }\n            state[updatename] = fields;\n            return;\n        }\n\n        // Get the current value.\n        let current = state[updatename];\n        if (current instanceof StateMap) {\n            if (fields.id === undefined) {\n                throw Error(`Missing id for ${updatename} state update`);\n            }\n            current = state[updatename].get(fields.id);\n            if (!current) {\n                throw Error(`Inexistent ${updatename} ${fields.id}`);\n            }\n        }\n\n        // Process cm deletion.\n        if (action == 'delete') {\n            if (state[updatename] instanceof StateMap) {\n                state[updatename].delete(fields.id);\n                return;\n            }\n            delete state[updatename];\n            return;\n        }\n\n        // Execute updates.\n        if (action == 'update' || action === undefined) {\n            for (const prop in fields) {\n                if (fields.hasOwnProperty(prop)) {\n                    current[prop] = fields[prop];\n                }\n            }\n            return;\n        }\n    }\n\n    /**\n     * Internal method to publish events.\n     *\n     * This is a private method, use de beounced \"publishEvents\" instead.\n     */\n    _publishEvents() {\n        const fieldChanges = this.eventstopublish;\n        this.eventstopublish = [];\n\n        // State changes can be registered in any orded. However it will avoid many\n        // components errors if they are sorted to have creations-updates-deletes\n        // in case some component needs to create or destroy DOM elements.\n        fieldChanges.sort((a, b) => {\n            const weights = {\n                created: 0,\n                updated: 1,\n                deleted: 2,\n            };\n            const aweight = weights[a.action] ?? 0;\n            const bweight = weights[b.action] ?? 0;\n            // In case both have the same weight, the eventname length decide.\n            if (aweight === bweight) {\n                return b.eventname.length - a.eventname.length;\n            }\n            return aweight - bweight;\n        });\n\n        // List of the published events to prevent redundancies.\n        let publishedevents = new Set();\n\n        fieldChanges.forEach((event) => {\n\n            const eventkey = `${event.eventname}.${event.eventdata.id ?? 0}`;\n\n            if (!publishedevents.has(eventkey)) {\n                this.dispatchEvent({\n                    action: event.eventname,\n                    state: this.state,\n                    element: event.eventdata\n                }, this.target);\n                // PubSub.publish(event.eventname, {state, element: event.eventdata});\n                publishedevents.add(eventkey);\n            }\n        });\n    }\n};\n\nexport default StateManager;\n\n// Proxy helpers.\n\n/**\n * The proxy handler class.\n *\n * This proxy will trigger two events everytime an attribute is modified:\n * one for the specific attribute and one for the variable.\n *\n * @param {string} name the variable name used for identify triggered actions\n * @param {StateManager} statemanager\n * @param {boolean} proxyvalues if new values must be proxied (default false)\n * @returns {object}\n */\nconst handler = function(name, statemanager, proxyvalues) {\n\n    proxyvalues = proxyvalues ?? false;\n\n    return {\n        /** Var {string} name the state element name. */\n        name,\n        /** Var {StateManager} statemanager the state manager object. */\n        statemanager,\n        /** Var {boolean} if new values must be proxied. */\n        proxyvalues,\n        /**\n         * Set trap to trigger events when the state change.\n         *\n         * @param {object} obj the source object (not proxied)\n         * @param {string} prop the attribute to set\n         * @param {*} value the value to save\n         * @param {*} receiver the proxied element to be attached to events\n         * @returns {boolean} if the value is set\n         */\n        set: function(obj, prop, value, receiver) {\n\n            // Only mutations should be able to set state values.\n            if (this.statemanager.locked) {\n                throw new Error(`State locked. Use mutations to change ${prop} value in ${this.name}.`);\n            }\n\n            // Check any data change.\n            if (JSON.stringify(obj[prop]) === JSON.stringify(value)) {\n                return true;\n            }\n\n            let action = (obj[prop] !== undefined) ? 'updated' : 'created';\n\n            // Proxy value if necessary.\n            if (this.proxyvalues) {\n                if (Array.isArray(value)) {\n                    obj[prop] = new StateMap(prop, this.statemanager).loadValues(value);\n                } else {\n                    obj[prop] = new Proxy(value, handler(prop, this.statemanager));\n                }\n            } else {\n                obj[prop] = value;\n            }\n\n            // If the state is not ready yet means the initial state is not yet loaded.\n            if (this.statemanager.state === undefined) {\n                return true;\n            }\n\n            // Publish attribute update or create event.\n            this.statemanager.eventstopublish.push({\n                eventname: `${this.name}.${prop}:${action}`,\n                eventdata: receiver,\n                action,\n            });\n\n            // Trigger extra events if the element has an ID attrribute.\n            if (obj.id !== undefined) {\n                this.statemanager.eventstopublish.push({\n                    eventname: `${this.name}[${obj.id}].${prop}:${action}`,\n                    eventdata: receiver,\n                    action,\n                });\n                this.statemanager.eventstopublish.push({\n                    eventname: `${this.name}[${obj.id}]:${action}`,\n                    eventdata: receiver,\n                    action,\n                });\n            }\n\n            // Register the general change.\n            this.statemanager.eventstopublish.push({\n                eventname: `${this.name}:updated`,\n                eventdata: receiver,\n                action: 'updated',\n            });\n\n            this.statemanager.publishEvents(this.statemanager);\n            return true;\n        },\n        /**\n         * Delete property trap to trigger state change events.\n         *\n         * @param {*} obj the affected object (not proxied)\n         * @param {*} prop the prop to delete\n         * @returns {boolean} if prop is deleted\n         */\n        deleteProperty: function(obj, prop) {\n            // Only mutations should be able to set state values.\n            if (this.statemanager.locked) {\n                throw new Error(`State locked. Use mutations to delete ${prop} in ${this.name}.`);\n            }\n            if (prop in obj) {\n\n                delete obj[prop];\n\n                this.statemanager.eventstopublish.push({\n                    eventname: `${this.name}.${prop}:deleted`,\n                    eventdata: obj,\n                    action: 'deleted',\n                });\n\n                // Trigger extra events if the element has an ID attrribute.\n                if (obj.id !== undefined) {\n                    this.statemanager.eventstopublish.push({\n                        eventname: `${this.name}[${obj.id}].${prop}:deleted`,\n                        eventdata: obj,\n                        action: 'deleted',\n                    });\n                    this.statemanager.eventstopublish.push({\n                        eventname: `${this.name}[${obj.id}]:updated`,\n                        eventdata: obj,\n                        action: 'updated',\n                    });\n                }\n\n                // Register the general change.\n                this.statemanager.eventstopublish.push({\n                    eventname: `${this.name}:updated`,\n                    eventdata: obj,\n                    action: 'updated',\n                });\n\n                this.statemanager.publishEvents(this.statemanager);\n            }\n            return true;\n        },\n    };\n};\n\n/**\n * Class to add event trigger into the JS Map class.\n */\nclass StateMap extends Map {\n    /**\n     * Creat the reactive Map.\n     *\n     * @param {string} name the property name\n     * @param {StateManager} statemanager the state manager\n     * @param {iterable} iterable an iterable object to create the Map\n     */\n    constructor(name, statemanager, iterable) {\n        // We don't have any \"this\" until be call super.\n        super(iterable);\n        this.name = name;\n        this.statemanager = statemanager;\n    }\n    /**\n     * Set an element into the map\n     *\n     * Each value needs it's own id attribute. Objects withouts id will be rejected.\n     * The function will throw an error if the value id and the key are not the same.\n     *\n     * @param {*} key the key to store\n     * @param {*} value the value to store\n     * @returns {Map} the resulting Map object\n     */\n    set(key, value) {\n        // Only mutations should be able to set state values.\n        if (this.statemanager.locked) {\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\n        }\n\n        this.checkValue(value);\n\n        if (key === undefined || key === null) {\n            throw Error('State lists keys cannot be null or undefined');\n        }\n\n        // ID is mandatory and should be the same as the key.\n        if (value.id !== key) {\n            throw new Error(`State error: ${this.name} list element ID (${value.id}) and key (${key}) mismatch`);\n        }\n\n        let action = (super.has(key)) ? 'updated' : 'created';\n\n        // Save proxied data into the list.\n        const result = super.set(key, new Proxy(value, handler(this.name, this.statemanager)));\n\n        // If the state is not ready yet means the initial state is not yet loaded.\n        if (this.statemanager.state === undefined) {\n            return result;\n        }\n\n        // Trigger update opr create events.\n        this.statemanager.eventstopublish.push({\n            eventname: `${this.name}[${value.id}]:${action}`,\n            eventdata: super.get(key),\n            action,\n        });\n        this.statemanager.eventstopublish.push({\n            eventname: `${this.name}:${action}`,\n            eventdata: super.get(key),\n            action,\n        });\n\n        this.statemanager.publishEvents(this.statemanager);\n        return result;\n    }\n\n    /**\n     * Check a value is valid to be stored in a a State List.\n     *\n     * Only objects with id attribute can be stored in State lists.\n     *\n     * This method throws an error if the value is not valid.\n     *\n     * @param {object} value (with ID)\n     */\n    checkValue(value) {\n        if (!typeof value === 'object' && value !== null) {\n            throw Error('State lists can contain objects only');\n        }\n\n        if (value.id === undefined) {\n            throw Error('State lists elements must contains at least an id attribute');\n        }\n    }\n\n    /**\n     * Insert a new element int a list.\n     *\n     * Each value needs it's own id attribute. Objects withouts id will be rejected.\n     *\n     * @param {object} value the value to add (needs an id attribute)\n     * @returns {Map} the resulting Map object\n     */\n    add(value) {\n        this.checkValue(value);\n        return this.set(value.id, value);\n    }\n\n    /**\n     * Delete an element from the map\n     *\n     * @param {*} key\n     * @returns {boolean}\n     */\n    delete(key) {\n\n        // Only mutations should be able to set state values.\n        if (this.statemanager.locked) {\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\n        }\n\n        const previous = super.get(key);\n\n        const result = super.delete(key);\n        if (!result) {\n            return result;\n        }\n\n        this.statemanager.eventstopublish.push({\n            eventname: `${this.name}[${key}]:deleted`,\n            eventdata: previous,\n            action: 'deleted',\n        });\n        this.statemanager.eventstopublish.push({\n            eventname: `${this.name}:deleted`,\n            eventdata: previous,\n            action: 'deleted',\n        });\n        this.statemanager.publishEvents(this.statemanager);\n        return result;\n    }\n\n    /**\n     * Return a suitable structure for JSON conversion.\n     *\n     * This function is needed because new values are compared in JSON StateMap has Private\n     * attributes which cannot be stringified (like this.statremanager which will produce an\n     * infinite recursivity).\n     *\n     * @returns {array}\n     */\n    toJSON() {\n        let result = [];\n        this.forEach((value) => {\n            result.push(value);\n        });\n        return result;\n    }\n\n    /**\n     * Insert a full list of values without triggering events.\n     *\n     * This method is used mainly to initialize the list. Note each element is indexed by its \"id\" attribute.\n     * This is a basic restriction of StateMap. All elements need an id attribute, otherwise it won't be saved.\n     *\n     * @param {iterable} values the values to load\n     * @returns {StateMap} return the this value\n     */\n    loadValues(values) {\n        values.forEach((data) => {\n            this.checkValue(data);\n            const key = data.id;\n            let newvalue = new Proxy(data, handler(this.name, this.statemanager));\n            this.set(key, newvalue);\n        });\n        return this;\n    }\n}\n"],"file":"statemanager.min.js"}