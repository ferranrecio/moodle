{"version":3,"sources":["../../src/reactive/component.js"],"names":["Component","descriptor","element","HTMLElement","Error","reactive","selectors","events","create","addSelectors","registerComponent","newselectors","selectorname","hasOwnProperty","eventname","detail","dispatchEvent","CustomEvent","bubbles"],"mappings":"6cAwBMA,CAAAA,C,YAgBF,WAAYC,CAAZ,CAAwB,WAEpB,GAAIA,CAAU,CAACC,OAAX,WAAoC,EAAED,CAAU,CAACC,OAAX,WAA8BC,CAAAA,WAAhC,CAAxC,CAAsF,CAClF,KAAMC,CAAAA,KAAK,mEACd,CAED,GAAIH,CAAU,CAACI,QAAX,SAAJ,CAAuC,CACnC,KAAMD,CAAAA,KAAK,4DACd,CAED,KAAKC,QAAL,CAAgBJ,CAAU,CAACI,QAA3B,CAEA,KAAKH,OAAL,CAAeD,CAAU,CAACC,OAA1B,CAGA,KAAKI,SAAL,CAAiB,EAAjB,CAGA,KAAKC,MAAL,CAAc,EAAd,CAGA,KAAKC,MAAL,CAAYP,CAAZ,EAGA,GAAIA,CAAU,CAACK,SAAX,SAAJ,CAAwC,CACpC,KAAKG,YAAL,CAAkBR,CAAU,CAACK,SAA7B,CACH,CAGD,KAAKD,QAAL,CAAcK,iBAAd,CAAgC,IAAhC,CACH,C,kDAOY,CACT,MAAO,MAAKR,OACf,C,kDAOYS,C,CAAc,CACvB,IAAK,GAAMC,CAAAA,CAAX,GAA2BD,CAAAA,CAA3B,CAAyC,CACrC,GAAIA,CAAY,CAACE,cAAb,CAA4BD,CAA5B,GAAmF,QAAtC,QAAOD,CAAAA,CAAY,CAACC,CAAD,CAApE,CAAiG,CAC7F,KAAKN,SAAL,CAAeM,CAAf,EAA+BD,CAAY,CAACC,CAAD,CAC9C,CACJ,CACJ,C,gDAQWA,C,CAAc,CACtB,MAAO,MAAKN,SAAL,CAAeM,CAAf,CACV,C,6CAOW,CACR,MAAO,MAAKL,MACf,C,uCAiBkB,CAElB,C,oDAaaO,C,CAAWC,C,CAAQ,CAC7B,KAAKb,OAAL,CAAac,aAAb,CAA2B,GAAIC,CAAAA,WAAJ,CAAgBH,CAAhB,CAA2B,CAClDI,OAAO,GAD2C,CAElDH,MAAM,CAAEA,CAF0C,CAA3B,CAA3B,CAIH,C,iDAWa,CACV,MAAO,EACV,C,+CAKY,CAEZ,C,0BAGUf,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive UI component base class.\n *\n * @module     core/reactive/component\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nclass Component {\n\n    /**\n     * The class constructor.\n     *\n     * The only param this method gets is a constructor with all the mandatory\n     * and optional component data. Component will receive the same descriptor\n     * as create method param.\n     *\n     * The main descriptor attributes are:\n     * - reactive {reactive}: this is mandatory reactive module to register\n     * - element {DOMelement}: all components needs an element to anchor events\n     * - (optional) selectors {object}: an optional object to override query selectors\n     *\n     * @param {object} descriptor data to create the object.\n     */\n    constructor(descriptor) {\n\n        if (descriptor.element === undefined || !(descriptor.element instanceof HTMLElement)) {\n            throw Error(`Reactive components needs a main DOM element to dispatch events`);\n        }\n\n        if (descriptor.reactive === undefined) {\n            throw Error(`Reactive components needs a reactive module to work with`);\n        }\n\n        this.reactive = descriptor.reactive;\n\n        this.element = descriptor.element;\n\n        // Empty default component selectors.\n        this.selectors = {};\n\n        // Empty default evenet list.\n        this.events = {};\n\n        // Call create function to get the component defaults.\n        this.create(descriptor);\n\n        // Overwrite the components selectors if necessary.\n        if (descriptor.selectors !== undefined) {\n            this.addSelectors(descriptor.selectors);\n        }\n\n        // Register the component.\n        this.reactive.registerComponent(this);\n    }\n\n    /**\n     * Get the main DOM element of ths component.\n     *\n     * @returns {element} the DOM element\n     */\n    getElement() {\n        return this.element;\n    }\n\n    /**\n     * Add or update the component selectors.\n     *\n     * @param {object} newselectors an object of new selectors.\n     */\n    addSelectors(newselectors) {\n        for (const selectorname in newselectors) {\n            if (newselectors.hasOwnProperty(selectorname) && typeof newselectors[selectorname] === 'string') {\n                this.selectors[selectorname] = newselectors[selectorname];\n            }\n        }\n    }\n\n    /**\n     * Return a component selector.\n     *\n     * @param {string} selectorname the selector name\n     * @return {string|undefined} the query selector\n     */\n    getSelector(selectorname) {\n        return this.selectors[selectorname];\n    }\n\n    /**\n     * Return a component specific event names.\n     *\n     * @return {object} and object with all the component event names.\n     */\n    getEvents() {\n        return this.events;\n    }\n\n    /**\n     * Component create function.\n     *\n     * Default init method will call create when all internal attributes but\n     * the component is not yet registered in the reactive module.\n     *\n     * This method is mainly for any component to define its own defaults such as:\n     * - this.selectors {object} the default query selectors of this component.\n     * - this.events {object} a list of event names this component dispatch\n     * - extract any data form the main dom element (this.element)\n     * - any other data this component uses\n     *\n     * @param {object} descriptor the component descriptor\n     */\n    // eslint-disable-next-line no-unused-vars\n    create(descriptor) {\n        // Components may override this method to initialize selects, events or other data.\n    }\n\n    /**\n     * Dispatch a custom event form this.element\n     *\n     * This is just a quick way to dispatch custom events from within a component.\n     * Components are free to use an alternative function to dispatch custom\n     * events. The only restriction is that it should be dispatched on this.element\n     * and specify \"bubbles:true\" to alert component listeners.\n     *\n     * @param {string} eventname the event name\n     * @param {*} detail event detail data\n     */\n    dispatchEvent(eventname, detail) {\n        this.element.dispatchEvent(new CustomEvent(eventname, {\n            bubbles: true,\n            detail: detail,\n        }));\n    }\n\n    /**\n     * Return the list of watchers that component has.\n     *\n     * Each watcher is represented by an object with two attributes:\n     * - watch (string) the specific state event to watch. Example 'section.visible:updated'\n     * - handler (function) the function to call when the watching state change happens\n     *\n     * @returns {array} array of watchers.\n     */\n    getWatchers() {\n        return [];\n    }\n\n    /**\n     * Reactive module will call this method when the state is ready.\n     */\n    stateReady() {\n        // Components can override this method.\n    }\n}\n\nexport default Component;\n"],"file":"component.min.js"}