define("core/local/modal/radio",["exports","core/modal","core/modal_events","core/notification","core/pending","core/templates","core/normalise"],(function(_exports,_modal,_modal_events,_notification,_pending,_templates,_normalise){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * A radio buttons selector modal.
   *
   * @module     core/local/modal/radio
   * @copyright  2023 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_modal=_interopRequireDefault(_modal),_modal_events=_interopRequireDefault(_modal_events),_notification=_interopRequireDefault(_notification),_pending=_interopRequireDefault(_pending),_templates=_interopRequireDefault(_templates);const selectors_OPTIONSRADIO="[type='radio']";class _default extends _modal.default{constructor(root){super(root),this.getFooter().find(this.getActionSelector("save")).length||_notification.default.exception({message:"No save button found"}),this.getFooter().find(this.getActionSelector("cancel")).length||_notification.default.exception({message:"No cancel button found"}),this.modalSetupPromise=new _pending.default("core/modal:radioModalSetup"+this.getModalCount()),this.optionsCount=0,this.selectedValue=null,this.setButtonDisabled("save",!0)}getRadioReadyPromise(){return this.modalSetupPromise}getSelectedValue(){return this.selectedValue}registerEventListeners(){super.registerEventListeners(),this.registerCloseOnSave(),this.registerCloseOnCancel()}setFooter(){_notification.default.exception({message:"Can not change the footer of a radio modal"})}setSaveButtonText(value){return this.setButtonText("save",value)}getSelectedRadio(){const modalBody=(0,_normalise.getFirst)(this.getBody());return null==modalBody?void 0:modalBody.querySelector("".concat(selectors_OPTIONSRADIO,":checked"))}async setBody(options){Array.isArray(options)||_notification.default.exception({message:"Radio modal body should be an array of options"});const modalOptions=[];for(const option of options){const normalizedOption=await this._normaliseOptionObject(option);modalOptions.push(normalizedOption)}const bodyPromise=_templates.default.render("core/local/modal/radiobody",{options:modalOptions});this.getRoot().on(_modal_events.default.bodyRendered,(()=>{null!==this.selectedValue&&this.setButtonDisabled("save",!1),this._registerRadioEventListeners()})),super.setBody(bodyPromise)}async _normaliseOptionObject(option){var _option$id;this.optionsCount++,void 0!==option.value&&void 0!==option.name||_notification.default.exception({message:"Missing name or value in radio modal option."});const modalOption={value:option.value,name:option.name,optionid:null!==(_option$id=option.id)&&void 0!==_option$id?_option$id:"radioModalOption".concat(this.optionsCount)};1==this.optionsCount&&(modalOption.first=!0),option.description&&(modalOption.description=option.description),option.icon&&(modalOption.icon=option.icon),option.disabled&&(modalOption.disabled=!0),option.selected&&(this.selectedValue=option.value,modalOption.selected=!0);for(const awaitValue of["name","description","icon"])void 0!==modalOption[awaitValue]&&"string"!=typeof modalOption[awaitValue]&&(modalOption[awaitValue]=await modalOption[awaitValue]);return modalOption}_registerRadioEventListeners(){(0,_normalise.getFirst)(this.getBody()).querySelectorAll(selectors_OPTIONSRADIO).forEach((radio=>{radio.addEventListener("change",(()=>{this._updateSelectedValue(),this.setButtonDisabled("save",!1)})),radio.parentNode.addEventListener("click",(()=>{radio.disabled||(radio.checked=!0,this._updateSelectedValue(),this.setButtonDisabled("save",!1))}));const submitHandler=event=>{radio.disabled||(event.preventDefault(),this._updateSelectedValue(),this.dispatchActionEvent(_modal_events.default.save))};radio.parentNode.addEventListener("dblclick",submitHandler),radio.addEventListener("keydown",(event=>{["Enter"," ","Space"].includes(event.key)&&submitHandler(event)}))})),this.modalSetupPromise.resolve()}_updateSelectedValue(){const originalValue=this.selectedValue,selectedRadio=this.getSelectedRadio();selectedRadio&&(this.selectedValue=selectedRadio.value),originalValue!==this.selectedValue&&this._dispatchValueChangedEvent()}_dispatchValueChangedEvent(){const target=(0,_normalise.getFirst)(this.getRoot());void 0===target&&(target=document),target.dispatchEvent(new CustomEvent(_modal_events.default.radioChanged,{bubbles:!0,detail:this}))}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=radio.min.js.map