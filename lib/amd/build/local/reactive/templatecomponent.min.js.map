{"version":3,"file":"templatecomponent.min.js","sources":["../../../src/local/reactive/templatecomponent.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport VirtualDOM from 'core/local/reactive/virtualdom';\nimport BaseComponent from 'core/local/reactive/basecomponent';\nimport WeightedQueue from 'core/local/reactive/weightedqueue';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\n\nconst instances = new WeakMap();\nconst renderQueue = new WeightedQueue();\n\n/**\n * Template component base class.\n *\n * A template component is a reactive component that uses virtual DOM to refresh the\n * template when the state is updated.\n *\n * @module     core/local/reactive/templatecomponent\n * @class     core/local/reactive/templatecomponent\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport default class extends BaseComponent {\n    /**\n     * The class constructor.\n     *\n     * The only param this method gets is a constructor with all the mandatory\n     * and optional component data. Component will receive the same descriptor\n     * as create method param.\n     *\n     * This method will call the \"create\" method before registering the component into\n     * the reactive module. This way any component can add default selectors and events.\n     *\n     * @param {descriptor} descriptor data to create the object.\n     */\n    constructor(descriptor) {\n        super(descriptor);\n        this.currentTemplateData = null;\n        this.renderPriority = this.calculateRenderPriority();\n        this.injectedTemplateContent = null;\n    }\n\n    /**\n     * Static method to init a template component instance.\n     *\n     * This method is used to prevent creating multiple template components\n     * for the same DOM element.\n     *\n     * @param {descriptor} descriptor data to create the object.\n     */\n    static createTemplateComponent(descriptor) {\n        if (descriptor.element === undefined || !(descriptor.element instanceof HTMLElement)) {\n            throw Error(`Missing a main DOM element to create a template component.`);\n        }\n        if (instances.has(descriptor.element)) {\n            return instances.get(descriptor.element);\n        }\n        const newInstance = new this(descriptor);\n        instances.set(descriptor.element, newInstance);\n        return newInstance;\n    }\n\n    /**\n     * Return the template component controlling the element, if any.\n     *\n     * @param {HTMLElement} element\n     * @returns {TemplateComponent|undefined}\n     */\n    getElementComponent(element) {\n        return instances.get(element);\n    }\n\n    /**\n     * Return the template name.\n     *\n     * Components must override this method.\n     *\n     * @returns {string}\n     */\n    getTemplateName() {\n        return undefined;\n    }\n\n    /**\n     * Return the template data.\n     *\n     * Components must override this method. Returning a null will remove the component.\n     *\n     * @returns {Object|Array|null}\n     */\n    getTemplateData() {\n        return undefined;\n    }\n\n    /**\n     * Determine if the parent component can inject the template..\n     *\n     * By default, each component will refresh their own template on every\n     * state:updated event. However, if a parent component is responsible\n     * for the template, the child component can allow the parent to inject\n     * the template and avoid unnecessary template refreshes.\n     *\n     * @returns {boolean} true if the component template can be injected.\n     */\n    allowTemplateInjection() {\n        return false;\n    }\n\n    /**\n     * Request a template refresh.\n     */\n    refreshTemplate() {\n        renderQueue.add(\n            this._executeRefreshTemplate.bind(this),\n            this.renderPriority\n        );\n        renderQueue.executeDebounce();\n    }\n\n    /**\n     * Execute the refresh template if needed.\n     *\n     * This is an auxiliar method executed when the component is being refreshed.\n     * The rendering queue determines the order of the components to be rendered\n     * and allows parent compoments to inject the template into the child components.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    async _executeRefreshTemplate() {\n        // It is possible a parent component has already removed this component.\n        if (!this.element.isConnected) {\n            this.reactive.unregisterComponent(this);\n            return;\n        }\n\n        // Also, it is possible some parent component has injected the template.\n        if (this.injectedTemplateContent !== null) {\n            VirtualDOM.applyHTMLElement(this, this.injectedTemplateContent);\n            this.injectedTemplateContent = null;\n            return;\n        }\n\n        await this._reloadTemplateIfNeeded();\n    }\n\n    /**\n     * Inject the template content into the component.\n     *\n     * This method is called when a parent component is applying a virtual dom\n     * and fins a subcomponent that allows template injection.\n     *\n     * @param {HTMLElement} newContent content to apply.\n     */\n    injectContent(newContent) {\n        if (!this.allowTemplateInjection()) {\n            return;\n        }\n        this.injectedTemplateContent = newContent;\n    }\n\n    /**\n     * Reload the template if needed.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    async _reloadTemplateIfNeeded() {\n        let templateData = this.getTemplateData();\n\n        // If the component cannot generate its own data is because it expects\n        // a parent component to inject the template. However, if we are here means\n        // we do not have injected content. This could happen because the base element\n        // has been changed and the component is replaced.\n        if (templateData === undefined && this.allowTemplateInjection()) {\n            this.reactive.unregisterComponent(this);\n            return;\n        }\n\n        if (templateData === undefined) {\n            throw new Error(\n                'Method getTemplateData must return the template data, or null to remove  (' + this.name ?? 'unkown' + ').'\n            );\n        }\n\n        // Null data means the component should be removed.\n        if (templateData === null) {\n            this.reactive.unregisterComponent(this);\n            return;\n        }\n\n        // Reactive data cannot be altered outsite a mutation. However, the template library\n        // will add some new data. We need to copy all the data to a full copy before continuing.\n        // Furthermore, we also need the currentTemplateData to be a full copy to compare new values.\n        const templateDataJson = JSON.stringify(templateData);\n        templateData = JSON.parse(templateDataJson);\n\n        if (templateDataJson === JSON.stringify(this.currentTemplateData)) {\n            return;\n        }\n\n        const templateName = this.getTemplateName();\n        if (!templateName) {\n            throw new Error(\n                'Method getTemplateName must return the template name (' + this.name ?? 'unkown' + ').'\n            );\n        }\n\n        try {\n            const {html, js} = await Templates.renderForPromise(templateName, templateData);\n            VirtualDOM.applyTemplate(this, html, js);\n            // Await Templates.replaceNodeContents(favouriteArea, html, js);\n            this.currentTemplateData = templateData;\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Calculate the component render priority.\n     *\n     * @returns {number} zero for independent components, or depth for injectable components.\n     */\n    calculateRenderPriority() {\n        // Components without template injections will be rendered first because\n        // they will be the ones that will inject the template into the parent.\n        if (!this.allowTemplateInjection()) {\n            return 0;\n        }\n\n        // For components with template injection the priority is how deep is the component tree.\n        let priority = 0;\n        let parent = this.element.parentElement;\n        while (parent) {\n            if (parent.getAttribute('data-mdl-component-hash')) {\n                priority++;\n            }\n            parent = parent.parentElement;\n        }\n        return priority;\n    }\n\n    /**\n     * Component watchers.\n     *\n     * By default, all template components will watch the state:updated event to refresh the template.\n     * However, for complex reactive applications, the rendering could be optimized by watching only\n     * the specific state properties that affect the template.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `state:updated`, handler: this.refreshTemplate},\n        ];\n    }\n}\n"],"names":["instances","WeakMap","renderQueue","WeightedQueue","BaseComponent","constructor","descriptor","currentTemplateData","renderPriority","this","calculateRenderPriority","injectedTemplateContent","undefined","element","HTMLElement","Error","has","get","newInstance","set","getElementComponent","getTemplateName","getTemplateData","allowTemplateInjection","refreshTemplate","add","_executeRefreshTemplate","bind","executeDebounce","isConnected","applyHTMLElement","_reloadTemplateIfNeeded","reactive","unregisterComponent","injectContent","newContent","templateData","name","templateDataJson","JSON","stringify","parse","templateName","html","js","Templates","renderForPromise","applyTemplate","error","exception","priority","parent","parentElement","getAttribute","getWatchers","watch","handler"],"mappings":"ssBAqBMA,UAAY,IAAIC,QAChBC,YAAc,IAAIC;;;;;;;;;;;;uBAcKC,uBAazBC,YAAYC,kBACFA,iBACDC,oBAAsB,UACtBC,eAAiBC,KAAKC,+BACtBC,wBAA0B,oCAWJL,oBACAM,IAAvBN,WAAWO,WAA2BP,WAAWO,mBAAmBC,mBAC9DC,uEAENf,UAAUgB,IAAIV,WAAWO,gBAClBb,UAAUiB,IAAIX,WAAWO,eAE9BK,YAAc,IAAIT,KAAKH,mBAC7BN,UAAUmB,IAAIb,WAAWO,QAASK,aAC3BA,YASXE,oBAAoBP,gBACTb,UAAUiB,IAAIJ,SAUzBQ,mBAWAC,mBAcAC,gCACW,EAMXC,kBACItB,YAAYuB,IACRhB,KAAKiB,wBAAwBC,KAAKlB,MAClCA,KAAKD,gBAETN,YAAY0B,qDAePnB,KAAKI,QAAQgB,mBAMmB,OAAjCpB,KAAKE,6CACMmB,iBAAiBrB,KAAMA,KAAKE,mCAClCA,wBAA0B,kBAI7BF,KAAKsB,+BAXFC,SAASC,oBAAoBxB,MAsB1CyB,cAAcC,YACL1B,KAAKc,gCAGLZ,wBAA0BwB,gDAU3BC,aAAe3B,KAAKa,0BAMHV,IAAjBwB,cAA8B3B,KAAKc,0CAC9BS,SAASC,oBAAoBxB,uBAIjBG,IAAjBwB,mBACM,IAAIrB,mBACN,6EAA+EN,KAAK4B,0BAAQ,eAK/E,OAAjBD,8BACKJ,SAASC,oBAAoBxB,YAOhC6B,iBAAmBC,KAAKC,UAAUJ,iBACxCA,aAAeG,KAAKE,MAAMH,kBAEtBA,mBAAqBC,KAAKC,UAAU/B,KAAKF,kCAIvCmC,aAAejC,KAAKY,gCACrBqB,mBACK,IAAI3B,oBACN,yDAA2DN,KAAK4B,4BAAQ,sBAKtEM,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiBJ,aAAcN,kCACvDW,cAActC,KAAMkC,KAAMC,SAEhCrC,oBAAsB6B,aAC7B,MAAOY,6BACQC,UAAUD,QAS/BtC,8BAGSD,KAAKc,gCACC,MAIP2B,SAAW,EACXC,OAAS1C,KAAKI,QAAQuC,mBACnBD,QACCA,OAAOE,aAAa,4BACpBH,WAEJC,OAASA,OAAOC,qBAEbF,SAYXI,oBACW,CACH,CAACC,sBAAwBC,QAAS/C,KAAKe"}