{"version":3,"file":"templatecomponent.min.js","sources":["../../../src/local/reactive/templatecomponent.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport VirtualDOM from 'core/local/reactive/virtualdom';\nimport BaseComponent from 'core/local/reactive/basecomponent';\nimport WeightedQueue from 'core/local/reactive/weightedqueue';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\n\n/**\n * @typedef {import('./reactive')} Reactive\n */\n\nconst instances = new WeakMap();\nconst renderQueue = new WeightedQueue();\n\n/**\n * Template component base class.\n *\n * A template component is a reactive component that uses virtual DOM to refresh the\n * template when the state is updated.\n *\n * @module     core/local/reactive/templatecomponent\n * @class     core/local/reactive/templatecomponent\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport default class extends BaseComponent {\n    /**\n     * The class constructor.\n     *\n     * The only param this method gets is a constructor with all the mandatory\n     * and optional component data. Component will receive the same descriptor\n     * as create method param.\n     *\n     * This method will call the \"create\" method before registering the component into\n     * the reactive module. This way any component can add default selectors and events.\n     *\n     * @param {descriptor} descriptor data to create the object.\n     */\n    constructor(descriptor) {\n        super(descriptor);\n\n        if (!descriptor.selector) {\n            throw new Error('Template reactive components need a main selector (' + this.name + ').');\n        }\n\n        /**\n         * The current template data needed to calculate if the template needs refresh.\n         * @type {Object|Array|null} .\n         */\n        this.currentTemplateData = null;\n\n        /**\n         * The render priority for the component. Zero is for components (max priority),\n         * and the depth of the component tree for injectable components.\n         * @type {number}\n         */\n        this.renderPriority = this.calculateRenderPriority();\n\n        /**\n         * If the component is waiting for a refresh.\n         * @type {boolean}\n         */\n        this.refreshPending = false;\n\n        VirtualDOM.cleanDomElement(this.element);\n    }\n\n    /**\n     * Static method to init a template component instance.\n     *\n     * This method is used to prevent creating multiple template components\n     * for the same DOM element.\n     *\n     * @param {string} selector the DOM main element selector\n     * @param {Reactive} reactive the DOM main element selector\n     * @param {object} otherSelectors optional css selector overrides\n     */\n    static createTemplateComponent(selector, reactive, otherSelectors) {\n        if (selector === undefined) {\n            throw Error(`Missing a main DOM selector to create a template component.`);\n        }\n\n        const descriptor = {\n            selector,\n            element: document.querySelector(selector),\n            reactive,\n            selectors: otherSelectors,\n        };\n\n        if (!descriptor.element) {\n            throw Error(`Main template element not found for selector ${descriptor.selector}.`);\n        }\n        if (instances.has(descriptor.element)) {\n            return instances.get(descriptor.element);\n        }\n\n        const newInstance = new this(descriptor);\n        instances.set(descriptor.element, newInstance);\n        return newInstance;\n    }\n\n    /**\n     * Return the template component controlling the element, if any.\n     *\n     * @param {HTMLElement} element\n     * @returns {TemplateComponent|undefined}\n     */\n    getElementComponent(element) {\n        return instances.get(element);\n    }\n\n    /**\n     * Return the template name.\n     *\n     * Components must override this method.\n     *\n     * @returns {string}\n     */\n    getTemplateName() {\n        return undefined;\n    }\n\n    /**\n     * Return the template data.\n     *\n     * Components must override this method to auto-refresh the template\n     * when the state changes. If not, the component will only refresh when\n     * the parent component refreshes the template.\n     *\n     * Returning a null will indicate the template to not render\n     * and unregister the component.\n     *\n     * @returns {Object|Array|null|undefined}\n     */\n    getTemplateData() {\n        return undefined;\n    }\n\n    /**\n     * Determine if the parent component can inject the template..\n     *\n     * By default, each component will refresh their own template on every\n     * state:updated event. However, if a parent component is responsible\n     * for the template, the child component can allow the parent to inject\n     * the template and avoid unnecessary template refreshes.\n     *\n     * @returns {boolean} true if the component template can be injected.\n     */\n    allowTemplateInjection() {\n        return false;\n    }\n\n    /**\n     * Request a template refresh.\n     */\n    refreshTemplate() {\n        if (this.refreshPending) {\n            return;\n        }\n        this.refreshPending = true;\n\n        renderQueue.add(\n            this._executeRefreshTemplate.bind(this),\n            this.renderPriority\n        );\n        renderQueue.executeDebounce();\n    }\n\n    /**\n     * Execute the refresh template if needed.\n     *\n     * This is an auxiliar method executed when the component is being refreshed.\n     * The rendering queue determines the order of the components to be rendered\n     * and allows parent compoments to inject the template into the child components.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    async _executeRefreshTemplate() {\n        // A parent content has injected the template for us.\n        if (!this.refreshPending) {\n            return;\n        }\n\n        this.refreshPending = false;\n\n        // It is possible a parent component has already removed this component form the page.\n        if (!this.element.isConnected) {\n            this.reactive.unregisterComponent(this);\n            return;\n        }\n\n        await this._reloadTemplateIfNeeded();\n    }\n\n    /**\n     * Inject the template content into the component.\n     *\n     * This method is called when a parent component is applying a virtual dom\n     * and fins a subcomponent that allows template injection.\n     *\n     * @param {HTMLElement} newContent content to apply.\n     */\n    injectContent(newContent) {\n        if (!this.allowTemplateInjection()) {\n            return;\n        }\n        VirtualDOM.applyHTMLElement(this, newContent);\n        this.refreshPending = false;\n    }\n\n    /**\n     * Reload the template if needed.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    async _reloadTemplateIfNeeded() {\n        let templateData = this.getTemplateData();\n\n        // Components that only updates via parent template injection won't generate any data.\n        // They refresh only when the parent change, not when the state changes.\n        if (templateData === undefined) {\n            return;\n        }\n\n        // Null data means the component should be removed.\n        if (templateData === null) {\n            this.reactive.unregisterComponent(this);\n            return;\n        }\n\n        // Reactive data cannot be altered outsite a mutation. However, the template library\n        // will add some new data. We need to copy all the data to a full copy before continuing.\n        // Furthermore, we also need the currentTemplateData to be a full copy to compare new values.\n        const templateDataJson = JSON.stringify(templateData);\n        templateData = JSON.parse(templateDataJson);\n\n        if (templateDataJson === JSON.stringify(this.currentTemplateData)) {\n            return;\n        }\n\n        const templateName = this.getTemplateName();\n        if (!templateName) {\n            throw new Error(\n                'Method getTemplateName must return the template name (' + this.name + ').'\n            );\n        }\n\n        try {\n            const {html, js} = await Templates.renderForPromise(templateName, templateData);\n            VirtualDOM.applyTemplate(this, html, js);\n            // Await Templates.replaceNodeContents(favouriteArea, html, js);\n            this.currentTemplateData = templateData;\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Calculate the component render priority.\n     *\n     * @returns {number} zero for independent components, or depth for injectable components.\n     */\n    calculateRenderPriority() {\n        // Components without template injections will be rendered first because\n        // they will be the ones that will inject the template into the parent.\n        if (!this.allowTemplateInjection()) {\n            return 0;\n        }\n\n        // For components with template injection the priority is how deep is the component tree.\n        let priority = 0;\n        let parent = this.element.parentElement;\n        while (parent) {\n            if (parent.getAttribute('data-mdl-component-hash')) {\n                priority++;\n            }\n            parent = parent.parentElement;\n        }\n        return priority;\n    }\n\n    /**\n     * Component watchers.\n     *\n     * By default, all template components will watch the state:updated event to refresh the template.\n     * However, for complex reactive applications, the rendering could be optimized by watching only\n     * the specific state properties that affect the template.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `state:updated`, handler: this.refreshTemplate},\n        ];\n    }\n}\n"],"names":["instances","WeakMap","renderQueue","WeightedQueue","BaseComponent","constructor","descriptor","selector","Error","this","name","currentTemplateData","renderPriority","calculateRenderPriority","refreshPending","cleanDomElement","element","reactive","otherSelectors","undefined","document","querySelector","selectors","has","get","newInstance","set","getElementComponent","getTemplateName","getTemplateData","allowTemplateInjection","refreshTemplate","add","_executeRefreshTemplate","bind","executeDebounce","isConnected","_reloadTemplateIfNeeded","unregisterComponent","injectContent","newContent","applyHTMLElement","templateData","templateDataJson","JSON","stringify","parse","templateName","html","js","Templates","renderForPromise","applyTemplate","error","exception","priority","parent","parentElement","getAttribute","getWatchers","watch","handler"],"mappings":"ssBAyBMA,UAAY,IAAIC,QAChBC,YAAc,IAAIC;;;;;;;;;;;;uBAcKC,uBAazBC,YAAYC,qBACFA,aAEDA,WAAWC,eACN,IAAIC,MAAM,sDAAwDC,KAAKC,KAAO,WAOnFC,oBAAsB,UAOtBC,eAAiBH,KAAKI,+BAMtBC,gBAAiB,sBAEXC,gBAAgBN,KAAKO,wCAaLT,SAAUU,SAAUC,wBAC9BC,IAAbZ,eACMC,2EAGJF,WAAa,CACfC,SAAAA,SACAS,QAASI,SAASC,cAAcd,UAChCU,SAAAA,SACAK,UAAWJ,oBAGVZ,WAAWU,cACNR,6DAAsDF,WAAWC,kBAEvEP,UAAUuB,IAAIjB,WAAWU,gBAClBhB,UAAUwB,IAAIlB,WAAWU,eAG9BS,YAAc,IAAIhB,KAAKH,mBAC7BN,UAAU0B,IAAIpB,WAAWU,QAASS,aAC3BA,YASXE,oBAAoBX,gBACThB,UAAUwB,IAAIR,SAUzBY,mBAgBAC,mBAcAC,gCACW,EAMXC,kBACQtB,KAAKK,sBAGJA,gBAAiB,EAEtBZ,YAAY8B,IACRvB,KAAKwB,wBAAwBC,KAAKzB,MAClCA,KAAKG,gBAETV,YAAYiC,mDAeP1B,KAAKK,sBAILA,gBAAiB,EAGjBL,KAAKO,QAAQoB,kBAKZ3B,KAAK4B,+BAJFpB,SAASqB,oBAAoB7B,OAe1C8B,cAAcC,YACL/B,KAAKqB,+CAGCW,iBAAiBhC,KAAM+B,iBAC7B1B,gBAAiB,uCAUlB4B,aAAejC,KAAKoB,0BAIHV,IAAjBuB,uBAKiB,OAAjBA,8BACKzB,SAASqB,oBAAoB7B,YAOhCkC,iBAAmBC,KAAKC,UAAUH,iBACxCA,aAAeE,KAAKE,MAAMH,kBAEtBA,mBAAqBC,KAAKC,UAAUpC,KAAKE,kCAIvCoC,aAAetC,KAAKmB,sBACrBmB,mBACK,IAAIvC,MACN,yDAA2DC,KAAKC,KAAO,gBAKrEsC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiBJ,aAAcL,kCACvDU,cAAc3C,KAAMuC,KAAMC,SAEhCtC,oBAAsB+B,aAC7B,MAAOW,6BACQC,UAAUD,QAS/BxC,8BAGSJ,KAAKqB,gCACC,MAIPyB,SAAW,EACXC,OAAS/C,KAAKO,QAAQyC,mBACnBD,QACCA,OAAOE,aAAa,4BACpBH,WAEJC,OAASA,OAAOC,qBAEbF,SAYXI,oBACW,CACH,CAACC,sBAAwBC,QAASpD,KAAKsB"}