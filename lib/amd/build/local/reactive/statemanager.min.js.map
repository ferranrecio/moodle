{"version":3,"sources":["../../../src/local/reactive/statemanager.js"],"names":["StateManager","dispatchevent","target","dispatchEvent","document","readonly","eventstopublish","initialPromise","Promise","resolve","addEventListener","initialStateDone","event","detail","state","initialstate","Error","Proxy","handler","prop","hasOwnProperty","action","_publishEvents","updates","Array","isArray","forEach","update","name","processUpdate","fields","updatename","StateMap","add","current","id","get","delete","field","data","parentaction","push","eventname","eventdata","fieldChanges","sort","a","b","weights","created","updated","deleted","aweight","bweight","length","publishedevents","Set","eventkey","has","element","statemanager","proxyvalues","set","obj","value","receiver","JSON","stringify","loadValues","registerStateAction","deleteProperty","iterable","key","checkValue","result","previous","values","newvalue","Map"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive simple state manager.\n *\n * The state manager contains the state data, trigger update events and\n * can lock and unlock the state data.\n *\n * This file contains the three main elements of the state manager:\n * - State manager: the public class to alter the state and process update messages.\n * - Proxy handler: a private helper class to trigger events when a state object is modified.\n * - StateMap class: a private class extending Map class that triggers event when a state list is modifed.\n *\n * @module     core/local/reactive/statemanager\n * @package    core_course\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * State manager class.\n *\n * This class handle the reactive state and ensure that only valid mutations can modify the state.\n * It also provide methods to apply batch state update messages (see processUpdates function doc\n * for more details on update messages).\n *\n * Implementing a deep state manager is complex and will require many frontend resources. To keep\n * the state fast and simple, the state can ONLY store two kind of data:\n *  - Object with attributes\n *  - List of objects with id attributes.\n *\n * This is an example of a valid state:\n *\n * {\n *  course: {\n *      name: 'course name',\n *      shortname: 'courseshort',\n *      sectionlist: [21, 34]\n *  },\n *  sections: [\n *      {id: 21, name: 'Topic 1', visible: true},\n *      {id: 34, name: 'Topic 2', visible: false,\n *  ],\n * }\n *\n * The following cases are NOT allowed at a state ROOT level (throws an exception if they are assigned):\n *  - Simple values (strings, boolean...).\n *  - Arrays of simple values.\n *  - Array of objects without ID attribute (all arrays will be converted to maps and requires an ID).\n *\n * Thanks to those limitations it can simplify the state update messages and the event names. If You\n * need to store simple data, just group them in an object.\n *\n * To grant any state change triggers the proper events, the class uses two private structures:\n * - proxy handler: any object stored in the state is proxied using this class.\n * - StateMap class: any object list in the state will be converted to StateMap using the\n *   objects id attribute.\n */\nconst StateManager = class {\n\n    /**\n     * Create a basic reactive state store.\n     *\n     * The state manager is meant to work independently with native JS events.\n     * To ensure each reactive module can use it in its own way, the parent element must provide\n     * a valid event dispatcher function and an optional DOM element to anchor the event.\n     *\n     * @param {function} dispatchevent the function to dispatch the custom event when the state changes.\n     * @param {element} target the state changed custom event target (document if none provided)\n     */\n    constructor(dispatchevent, target) {\n\n        // The dispatch event function\n        this.dispatchEvent = dispatchevent;\n        // The DOM container to trigger events.\n        this.target = target ?? document;\n        // State is not locked until initial state is set.\n        this.readonly = false;\n        // List of events to publish as an event.\n        this.eventstopublish = [];\n\n        // The state_loaded event is special because it only happens one but all components\n        // may react to that state, even if they are registered after the init. For these reason\n        // we use a promise for that event.\n        this.initialPromise = new Promise((resolve) => {\n            const initialStateDone = (event) => {\n                resolve(event.detail.state);\n            };\n            this.target.addEventListener('state:loaded', initialStateDone);\n        });\n    }\n\n    /**\n     * Loads the initial state.\n     *\n     * Note this method will trigger a state changed event with \"state_loaded\" actionname.\n     *\n     * The state will be locked automatically when the state is loaded.\n     *\n     * @param {object} initialstate\n     */\n    setInitialState(initialstate) {\n\n        if (this.state !== undefined) {\n            throw Error('Initial state can only be initialized ones');\n        }\n\n        // Create the state object.\n        let state = new Proxy({}, handler('state', this, true));\n        for (const prop in initialstate) {\n            if (initialstate.hasOwnProperty(prop)) {\n                state[prop] = initialstate[prop];\n            }\n        }\n        this.state = state;\n\n        // When the state is loaded we can lock it to prevent illegal changes.\n        this.readonly = true;\n        this.dispatchEvent({\n            action: 'state:loaded',\n            state: this.state,\n        }, this.target);\n    }\n\n    /**\n     * Generate a promise that will be resolved when the initial state is loaded.\n     *\n     * In most cases the final state will be loaded using an ajax call. This is the reason\n     * why states manager are created with an unlocked empty state and won't be reactive until\n     * the initial state is set.\n     *\n     * @return {Promise} the resulting promise\n     */\n    getInitialPromise() {\n        return this.initialPromise;\n    }\n\n    /**\n     * Locks or unlocks the state to prevent illegal updates.\n     *\n     * Mutations use this method to modify the state. Once the state is updated, they must\n     * block again the state.\n     *\n     * All changes done while the state is writable will be registered using registerStateAction.\n     * When the state is set to readonly again the method will trigger _publishEvents to communicate\n     * changes to all watchers.\n     *\n     * @param {bool} readonly if the state is in read only mode enabled\n     */\n    setReadOnly(readonly) {\n        this.readonly = readonly;\n\n        // When the state is in readonly again is time to publish all events.\n        if (this.readonly) {\n            this._publishEvents();\n        }\n    }\n\n    /**\n     * Process a state updates array and do all the necessary changes.\n     *\n     * Note this method unlocks the state while it is executing and relocks it\n     * when finishes.\n     *\n     * @param {array} updates\n     */\n    processUpdates(updates) {\n        if (!Array.isArray(updates)) {\n            throw Error('State updates must be an array');\n        }\n        updates.forEach((update) => {\n            if (update.name === undefined) {\n                throw Error('Missing state update name');\n            }\n            this.processUpdate(\n                update.name, update.action, update.fields\n            );\n        });\n    }\n\n    /**\n     * Private function process a single state updates.\n     *\n     * Note this method unlocks the state while it is executing a state change\n     * and relocks it when finishes.\n     *\n     * @param {string} updatename\n     * @param {string} action\n     * @param {object} fields\n     */\n    processUpdate(updatename, action, fields) {\n\n        let state = this.state;\n\n        if (!fields) {\n            throw Error('Missing state update fields');\n        }\n\n        // Process cm creation.\n        if (action == 'create') {\n            // Unlock the state to do some changes.\n            this.readonly = false;\n\n            // Create can be applied only to lists, not to objects.\n            if (state[updatename] instanceof StateMap) {\n                state[updatename].add(fields);\n                this.readonly = true;\n                return;\n            }\n            state[updatename] = fields;\n            this.readonly = true;\n            return;\n        }\n\n        // Get the current value.\n        let current = state[updatename];\n        if (current instanceof StateMap) {\n            if (fields.id === undefined) {\n                throw Error(`Missing id for ${updatename} state update`);\n            }\n            current = state[updatename].get(fields.id);\n            if (!current) {\n                throw Error(`Inexistent ${updatename} ${fields.id}`);\n            }\n        }\n\n        // Unlock the state to do some changes.\n        this.readonly = false;\n\n        // Process cm deletion.\n        if (action == 'delete') {\n            if (state[updatename] instanceof StateMap) {\n                state[updatename].delete(fields.id);\n                this.readonly = true;\n                return;\n            }\n            delete state[updatename];\n            this.readonly = true;\n            return;\n        }\n\n        // Execute updates.\n        if (action == 'update' || action === undefined) {\n            for (const prop in fields) {\n                if (fields.hasOwnProperty(prop)) {\n                    current[prop] = fields[prop];\n                }\n            }\n            this.readonly = true;\n            return;\n        }\n    }\n\n    /**\n     * Register a state modification and generate the necessary events.\n     *\n     * This method is used mainly by proxy helpers to dispatch state change event.\n     * However, mutations can use it to inform components about non reactive changes\n     * in the state (only the two first levels of the state are reactive).\n     *\n     * @param {string} field the affected state field name\n     * @param {string|null} prop the affecter field property (null if affect the full object)\n     * @param {string} action the action done (created/updated/deleted)\n     * @param {*} data the affected data\n     */\n    registerStateAction(field, prop, action, data) {\n\n        let parentaction = 'updated';\n\n        if (prop !== null) {\n            this.eventstopublish.push({\n                eventname: `${field}.${prop}:${action}`,\n                eventdata: data,\n                action,\n            });\n        } else {\n            parentaction = action;\n        }\n\n        // Trigger extra events if the element has an ID attribute.\n        if (data.id !== undefined) {\n            if (prop !== null) {\n                this.eventstopublish.push({\n                    eventname: `${field}[${data.id}].${prop}:${action}`,\n                    eventdata: data,\n                    action,\n                });\n            }\n            this.eventstopublish.push({\n                eventname: `${field}[${data.id}]:${parentaction}`,\n                eventdata: data,\n                action: parentaction,\n            });\n        }\n\n        // Register the general change.\n        this.eventstopublish.push({\n            eventname: `${field}:${parentaction}`,\n            eventdata: data,\n            action: parentaction,\n        });\n\n        // Register state updated event.\n        this.eventstopublish.push({\n            eventname: `state:updated`,\n            eventdata: data,\n            action: 'updated',\n        });\n    }\n\n    /**\n     * Internal method to publish events.\n     *\n     * This is a private method, it will be invoked when the state is set back to readonly.\n     */\n    _publishEvents() {\n        const fieldChanges = this.eventstopublish;\n        this.eventstopublish = [];\n\n        // State changes can be registered in any order. However it will avoid many\n        // components errors if they are sorted to have creations-updates-deletes in case\n        // some component needs to create or destroy DOM elements before updating them.\n        fieldChanges.sort((a, b) => {\n            const weights = {\n                created: 0,\n                updated: 1,\n                deleted: 2,\n            };\n            const aweight = weights[a.action] ?? 0;\n            const bweight = weights[b.action] ?? 0;\n            // In case both have the same weight, the eventname length decide.\n            if (aweight === bweight) {\n                return a.eventname.length - b.eventname.length;\n            }\n            return aweight - bweight;\n        });\n\n        // List of the published events to prevent redundancies.\n        let publishedevents = new Set();\n\n        fieldChanges.forEach((event) => {\n\n            const eventkey = `${event.eventname}.${event.eventdata.id ?? 0}`;\n\n            if (!publishedevents.has(eventkey)) {\n                this.dispatchEvent({\n                    action: event.eventname,\n                    state: this.state,\n                    element: event.eventdata\n                }, this.target);\n                // PubSub.publish(event.eventname, {state, element: event.eventdata});\n                publishedevents.add(eventkey);\n            }\n        });\n    }\n};\n\nexport default StateManager;\n\n// Proxy helpers.\n\n/**\n * The proxy handler class.\n *\n * This proxy will trigger the folliwing events everytime an attribute is modified:\n *  - The specific attribute updated, created or deleter (example: \"cm.visible:updated\")\n *  - The general state object updated, created or deleted (example: \"cm:updated\")\n *  - If the element has an ID attribute, the specific event with id (example: \"cm[42].visible:updated\")\n *  - If the element has an ID attribute, the general event with id (example: \"cm[42]:updated\")\n *\n * The proxied variable will throw an error if it is altered when the state manager is locked.\n *\n * @param {string} name the variable name used for identify triggered actions\n * @param {StateManager} statemanager the state manager object\n * @param {boolean} proxyvalues if new values must be proxied (used only at state root level)\n * @returns {object} an object with all the handler functions.\n */\nconst handler = function(name, statemanager, proxyvalues) {\n\n    proxyvalues = proxyvalues ?? false;\n\n    return {\n        /** Var {string} name the state element name. */\n        name,\n\n        /** Var {StateManager} statemanager the state manager object. */\n        statemanager,\n\n        /** Var {boolean} if new values must be proxied. */\n        proxyvalues,\n\n        /**\n         * Set trap to trigger events when the state changes.\n         *\n         * @param {object} obj the source object (not proxied)\n         * @param {string} prop the attribute to set\n         * @param {*} value the value to save\n         * @param {*} receiver the proxied element to be attached to events\n         * @returns {boolean} if the value is set\n         */\n        set: function(obj, prop, value, receiver) {\n\n            // Only mutations should be able to set state values.\n            if (this.statemanager.readonly) {\n                throw new Error(`State locked. Use mutations to change ${prop} value in ${this.name}.`);\n            }\n\n            // Check any data change.\n            if (JSON.stringify(obj[prop]) === JSON.stringify(value)) {\n                return true;\n            }\n\n            let action = (obj[prop] !== undefined) ? 'updated' : 'created';\n\n            // Proxy value if necessary (used at state root level).\n            if (this.proxyvalues) {\n                if (Array.isArray(value)) {\n                    obj[prop] = new StateMap(prop, this.statemanager).loadValues(value);\n                } else {\n                    obj[prop] = new Proxy(value, handler(prop, this.statemanager));\n                }\n            } else {\n                obj[prop] = value;\n            }\n\n            // If the state is not ready yet means the initial state is not yet loaded.\n            if (this.statemanager.state === undefined) {\n                return true;\n            }\n\n            this.statemanager.registerStateAction(this.name, prop, action, receiver);\n\n            return true;\n        },\n\n        /**\n         * Delete property trap to trigger state change events.\n         *\n         * @param {*} obj the affected object (not proxied)\n         * @param {*} prop the prop to delete\n         * @returns {boolean} if prop is deleted\n         */\n        deleteProperty: function(obj, prop) {\n            // Only mutations should be able to set state values.\n            if (this.statemanager.readonly) {\n                throw new Error(`State locked. Use mutations to delete ${prop} in ${this.name}.`);\n            }\n            if (prop in obj) {\n\n                delete obj[prop];\n\n                this.statemanager.registerStateAction(this.name, prop, 'deleted', obj);\n            }\n            return true;\n        },\n    };\n};\n\n/**\n * Class to add event trigger into the JS Map class.\n *\n * When the state has a list of objects (with IDs) it will be converted into a StateMap.\n * StateMap is used in the same way as a regular JS map. Because all elements have an\n * id attribute, it has some specific methods:\n *  - add: a convenient method to add an element without specifying the key (ID will be used as a key).\n *  - loadValues: to add many elements at once wihout specifying keys (IDs will be used).\n *\n * Apart, the main difference between regular Map and MapState is that this one triggers events\n * every time an element is added or removed from the list:\n *  - A specific element updated, created or deleted (example: \"cm[42]:created\")\n *  - A generic list updated, created or deleted (example: \"cm:created\")\n */\nclass StateMap extends Map {\n\n    /**\n     * Create a reactive Map.\n     *\n     * @param {string} name the property name\n     * @param {StateManager} statemanager the state manager\n     * @param {iterable} iterable an iterable object to create the Map\n     */\n    constructor(name, statemanager, iterable) {\n        // We don't have any \"this\" until be call super.\n        super(iterable);\n        this.name = name;\n        this.statemanager = statemanager;\n    }\n    /**\n     * Set an element into the map\n     *\n     * Each value needs it's own id attribute. Objects without id will be rejected.\n     * The function will throw an error if the value id and the key are not the same.\n     *\n     * @param {*} key the key to store\n     * @param {*} value the value to store\n     * @returns {Map} the resulting Map object\n     */\n    set(key, value) {\n        // Only mutations should be able to set state values.\n        if (this.statemanager.readonly) {\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\n        }\n\n        this.checkValue(value);\n\n        if (key === undefined || key === null) {\n            throw Error('State lists keys cannot be null or undefined');\n        }\n\n        // ID is mandatory and should be the same as the key.\n        if (value.id !== key) {\n            throw new Error(`State error: ${this.name} list element ID (${value.id}) and key (${key}) mismatch`);\n        }\n\n        let action = (super.has(key)) ? 'updated' : 'created';\n\n        // Save proxied data into the list.\n        const result = super.set(key, new Proxy(value, handler(this.name, this.statemanager)));\n\n        // If the state is not ready yet means the initial state is not yet loaded.\n        if (this.statemanager.state === undefined) {\n            return result;\n        }\n\n        this.statemanager.registerStateAction(this.name, null, action, super.get(key));\n\n        return result;\n    }\n\n    /**\n     * Check a value is valid to be stored in a a State List.\n     *\n     * Only objects with id attribute can be stored in State lists.\n     *\n     * This method throws an error if the value is not valid.\n     *\n     * @param {object} value (with ID)\n     */\n    checkValue(value) {\n        if (!typeof value === 'object' && value !== null) {\n            throw Error('State lists can contain objects only');\n        }\n\n        if (value.id === undefined) {\n            throw Error('State lists elements must contain at least an id attribute');\n        }\n    }\n\n    /**\n     * Insert a new element int a list.\n     *\n     * Each value needs it's own id attribute. Objects withouts id will be rejected.\n     *\n     * @param {object} value the value to add (needs an id attribute)\n     * @returns {Map} the resulting Map object\n     */\n    add(value) {\n        this.checkValue(value);\n        return this.set(value.id, value);\n    }\n\n    /**\n     * Delete an element from the map\n     *\n     * @param {*} key\n     * @returns {boolean}\n     */\n    delete(key) {\n\n        // Only mutations should be able to set state values.\n        if (this.statemanager.readonly) {\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\n        }\n\n        const previous = super.get(key);\n\n        const result = super.delete(key);\n        if (!result) {\n            return result;\n        }\n\n        this.statemanager.registerStateAction(this.name, null, 'deleted', previous);\n\n        return result;\n    }\n\n    /**\n     * Return a suitable structure for JSON conversion.\n     *\n     * This function is needed because new values are compared in JSON. StateMap has Private\n     * attributes which cannot be stringified (like this.statemanager which will produce an\n     * infinite recursivity).\n     *\n     * @returns {array}\n     */\n    toJSON() {\n        let result = [];\n        this.forEach((value) => {\n            result.push(value);\n        });\n        return result;\n    }\n\n    /**\n     * Insert a full list of values using the id attributes as keys.\n     *\n     * This method is used mainly to initialize the list. Note each element is indexed by its \"id\" attribute.\n     * This is a basic restriction of StateMap. All elements need an id attribute, otherwise it won't be saved.\n     *\n     * @param {iterable} values the values to load\n     * @returns {StateMap} return the this value\n     */\n    loadValues(values) {\n        values.forEach((data) => {\n            this.checkValue(data);\n            let key = data.id;\n            let newvalue = new Proxy(data, handler(this.name, this.statemanager));\n            this.set(key, newvalue);\n        });\n        return this;\n    }\n}\n"],"file":"statemanager.min.js"}