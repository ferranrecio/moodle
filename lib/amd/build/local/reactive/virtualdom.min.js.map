{"version":3,"file":"virtualdom.min.js","sources":["../../../src/local/reactive/virtualdom.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Templates from 'core/templates';\n\n/**\n * @typedef {import('./basecomponent').BaseComponent} BaseComponent\n */\n\n/**\n * Attributes that are protected from being removed.\n * @type {Array}\n */\nconst protectecAttributes = [\n    'data-mdl-component-hash',\n    'data-mdl-refresh'\n];\n\n/**\n * Basic VirtualDOM differ for reactive components.\n *\n * This code is loosely based on the following articles:\n * https://dev.to/joydeep-bhowmik/virtual-dom-diffing-algorithm-implementation-in-vanilla-javascript-2324\n * https://dev.to/joydeep-bhowmik/adding-keys-our-dom-diffing-algorithm-4d7g\n *\n * @module     core/local/reactive/virtualdom\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    /**\n     * The constructor.\n     *\n     * @private\n     * @param {BaseComponent} component\n     */\n    constructor(component) {\n        this.component = component;\n        this.keyIndex = null;\n    }\n\n    /**\n     * Static method to apply the template to a component.\n     *\n     * @param {BaseComponent} component the reactive component\n     * @param {String} html\n     * @param {String} js\n     */\n    static applyTemplate(component, html, js) {\n        const virtualDom = new this(component);\n        virtualDom._applyVirtualDom(html, js);\n    }\n\n    /**\n     * Apply the virtual dom to the component.\n     *\n     * @private\n     * @param {String} newContent the new content\n     * @param {String} newJs the new js\n     */\n    _applyVirtualDom(newContent, newJs) {\n        const dom = this.component.getElement();\n        const vdom = this._parseHTML(newContent);\n        this.keyIndex = this._getKeyElementsIndex(vdom, dom);\n        this._diff(vdom, dom);\n        Templates.runTemplateJS(newJs);\n    }\n\n    /**\n     * Scan all key elements present in the virtual dom and return the list of the dom ones.\n     *\n     * @private\n     * @param {HTMLElement} vdom the virtual dom element\n     * @param {HTMLElement} dom the real dom element\n     * @returns {Map}\n     */\n    _getKeyElementsIndex(vdom, dom) {\n        const result = new Map();\n        const elementsWithDataMdlKey = vdom.querySelectorAll('[data-mdl-key]');\n        elementsWithDataMdlKey.forEach(element => {\n            const key = element.getAttribute('data-mdl-key');\n            const newElement = dom.querySelector(`[data-mdl-key=\"${key}\"]`);\n            if (!newElement) {\n                return;\n            }\n            // Subcomponents can have the same keys as the parent. We ignore any key that is not part of this component.\n            const parentComponent = newElement.closest('[data-mdl-component-hash]');\n            if (parentComponent.getAttribute('data-mdl-component-hash') != this.component.getComponentHash()) {\n                return;\n            }\n            result.set(key, newElement);\n        });\n        return result;\n    }\n\n    /**\n     * Execute a diff.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _diff(vdom, dom) {\n        if (!this._needsToDiffed(vdom, dom)) {\n            return;\n        }\n        // If dom has no childs then append the childs from vdom.\n        if (dom.hasChildNodes() === false && vdom.hasChildNodes() === true) {\n            for (let i = 0; i < vdom.childNodes.length; i++) {\n                dom.append(vdom.childNodes[i].cloneNode(true));\n            }\n            return;\n        }\n\n        this._diffChilds(vdom, dom);\n    }\n\n    /**\n     * Validate if the element needs to be diffed.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     * @returns\n     */\n    _needsToDiffed(vdom, dom) {\n        if (dom.getAttribute('data-mdl-refresh') === 'static') {\n            return false;\n        }\n        if (\n            dom.hasAttribute('data-mdl-component-hash') &&\n            dom.getAttribute('data-mdl-component-hash') !== this.component.getComponentHash()\n        ) {\n            return false;\n        }\n        if (vdom.isEqualNode(dom)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Move all child elements with data-mdl-key attribute to the same position as the vdom.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _sortChildKeyElements(vdom, dom) {\n        if (vdom.querySelector(':scope > [data-mdl-key]') === null) {\n            return;\n        }\n        for (let i = 0; i < vdom.childNodes.length; i++) {\n            const key = vdom.childNodes[i].getAttribute('data-mdl-key');\n            if (!key || !this.keyIndex.has(key)) {\n                continue;\n            }\n            const newElement = this.keyIndex.get(key);\n            dom.insertBefore(newElement, dom.childNodes[i]);\n        }\n    }\n\n    /**\n     * Remove all unnecessary childs from the dom before the diff.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _removeUnnecessaryChilds(vdom, dom) {\n        if (dom.childNodes.length > vdom.childNodes.length) {\n            let count = dom.childNodes.length - vdom.childNodes.length;\n            if (count > 0) {\n                for (; count > 0; count--) {\n                    // Remove.\n                    // dom.childNodes[dom.childNodes.length - count].remove();\n                    dom.lastChild.remove();\n                }\n            }\n        }\n    }\n\n    /**\n     * Diff all childs.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _diffChilds(vdom, dom) {\n        this._sortChildKeyElements(vdom, dom);\n        this._removeUnnecessaryChilds(vdom, dom);\n        for (let i = 0; i < vdom.childNodes.length; i++) {\n            if (dom.childNodes[i] === undefined) {\n                dom.append(vdom.childNodes[i].cloneNode(true));\n            } else {\n                this._diffElement(vdom.childNodes[i], dom.childNodes[i]);\n            }\n            if (vdom.childNodes[i].nodeType !== Node.TEXT_NODE) {\n                this._diff(vdom.childNodes[i], dom.childNodes[i]);\n            }\n        }\n    }\n\n    /**\n     * Diff a single element.\n     *\n     * @private\n     * @param {HTMLElement} vdomNode\n     * @param {HTMLElement} domNode\n     */\n    _diffElement(vdomNode, domNode) {\n        if (this._getNodeType(vdomNode) !== this._getNodeType(domNode)) {\n            domNode.replaceWith(vdomNode.cloneNode(true));\n            return;\n        }\n\n        if (vdomNode.nodeType === Node.TEXT_NODE) {\n            // We check if the text content is not same.\n            if (vdomNode.textContent !== domNode.textContent) {\n                // Replace the text content.\n                domNode.textContent = vdomNode.textContent;\n            }\n        } else {\n            this._patchAttributes(vdomNode, domNode);\n        }\n    }\n\n    /**\n     * Return the node type.\n     *\n     * @private\n     * @param {HTMLElement} node\n     * @returns {String}\n     */\n    _getNodeType(node) {\n        if (node.nodeType == Node.ELEMENT_NODE) {\n            return node.tagName.toLowerCase();\n        } else {\n            return node.nodeType;\n        }\n    }\n\n    /**\n     * Create an index of the attributes of the element.\n     *\n     * @private\n     * @param {HTMLElement} vdom the virtual dom element\n     * @param {HTMLElement} dom the real dom element\n     */\n    _patchAttributes(vdom, dom) {\n        let vdomAttributes = this._attributesIndex(vdom);\n        let domAttributes = this._attributesIndex(dom);\n        if (vdomAttributes == domAttributes) {\n            return;\n        }\n        Object.keys(vdomAttributes).forEach(key => {\n            if (!dom.getAttribute(key)) {\n                dom.setAttribute(key, vdomAttributes[key]);\n            } else if (dom.getAttribute(key)) {\n                if (vdomAttributes[key] != domAttributes[key]) {\n                    dom.setAttribute(key, vdomAttributes[key]);\n                }\n            }\n        });\n        Object.keys(domAttributes).forEach(key => {\n            // If the attribute is not present in vdom than remove it.\n            if (!vdom.getAttribute(key) && !protectecAttributes.includes(key)) {\n                dom.removeAttribute(key);\n            }\n        });\n    }\n\n    /**\n     * Create an index of the attributes of the element.\n     *\n     * @private\n     * @param {HTMLElement} element\n     */\n    _attributesIndex(element) {\n        var attributes = {};\n        if (element.attributes == undefined) {\n            return attributes;\n        }\n        for (var i = 0, atts = element.attributes, n = atts.length; i < n; i++) {\n            attributes[atts[i].name] = atts[i].value;\n        }\n        return attributes;\n    }\n\n    /**\n     * Parse the html string and return the main element.\n     *\n     * @private\n     * @param {String} html\n     * @returns {HTMLElement}\n     */\n    _parseHTML(html) {\n        let parser = new DOMParser();\n        let doc = parser.parseFromString(html, 'text/html');\n\n        this._clean(doc.body);\n\n        if (doc.body.childElementCount != 1) {\n            throw new Error('The HTML must have only one root element');\n        }\n\n        return doc.body.firstChild;\n    }\n\n    /**\n     * Clean the node from comments and empty text nodes.\n     *\n     * @private\n     * @param {Node} node\n     */\n    _clean(node) {\n        for (let n = 0; n < node.childNodes.length; n++) {\n            const child = node.childNodes[n];\n            if (\n                child.nodeType === Node.COMMENT_NODE ||\n                (child.nodeType === Node.TEXT_NODE && !/\\S/.test(child.nodeValue) && child.nodeValue.includes('\\n'))\n            ) {\n                node.removeChild(child);\n                n--;\n            } else if (child.nodeType === Node.ELEMENT_NODE) {\n                this._clean(child);\n            }\n        }\n    }\n}\n"],"names":["protectecAttributes","constructor","component","keyIndex","html","js","this","_applyVirtualDom","newContent","newJs","dom","getElement","vdom","_parseHTML","_getKeyElementsIndex","_diff","runTemplateJS","result","Map","querySelectorAll","forEach","element","key","getAttribute","newElement","querySelector","closest","getComponentHash","set","_needsToDiffed","hasChildNodes","_diffChilds","i","childNodes","length","append","cloneNode","hasAttribute","isEqualNode","_sortChildKeyElements","has","get","insertBefore","_removeUnnecessaryChilds","count","lastChild","remove","undefined","_diffElement","nodeType","Node","TEXT_NODE","vdomNode","domNode","_getNodeType","textContent","_patchAttributes","replaceWith","node","ELEMENT_NODE","tagName","toLowerCase","vdomAttributes","_attributesIndex","domAttributes","Object","keys","setAttribute","includes","removeAttribute","attributes","atts","n","name","value","doc","DOMParser","parseFromString","_clean","body","childElementCount","Error","firstChild","child","COMMENT_NODE","test","nodeValue","removeChild"],"mappings":"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"}