{"version":3,"file":"virtualdom.min.js","sources":["../../../src/local/reactive/virtualdom.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Templates from 'core/templates';\n\n/**\n * @typedef {import('./templatecomponent').TemplateComponent} TemplateComponent\n */\n\n/**\n * Attributes that are protected from being removed.\n * @type {Array}\n */\nconst protectecAttributes = [\n    'data-mdl-component-hash',\n    'data-mdl-refresh'\n];\n\n/**\n * Basic VirtualDOM differ for reactive components.\n *\n * This code is loosely based on the following articles:\n * https://dev.to/joydeep-bhowmik/virtual-dom-diffing-algorithm-implementation-in-vanilla-javascript-2324\n * https://dev.to/joydeep-bhowmik/adding-keys-our-dom-diffing-algorithm-4d7g\n *\n * @module     core/local/reactive/virtualdom\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    /**\n     * The constructor.\n     *\n     * @private\n     * @param {TemplateComponent} component\n     */\n    constructor(component) {\n        this.component = component;\n        this.keyIndex = null;\n    }\n\n    /**\n     * Static method to apply the template to a component.\n     *\n     * @param {TemplateComponent} component the reactive component\n     * @param {String} html\n     * @param {String} js\n     */\n    static applyTemplate(component, html, js) {\n        const virtualDom = new this(component);\n        virtualDom._applyVirtualDomFromTemplate(html, js);\n    }\n\n    /**\n     * Static method to apply a virtual dom element to a component.\n     *\n     * @param {TemplateComponent} component the reactive component\n     * @param {HTMLElement} vdom the virtual dom element\n     */\n    static applyHTMLElement(component, vdom) {\n        const virtualDom = new this(component);\n        virtualDom._applyVirtualDomFromElement(vdom);\n    }\n\n    /**\n     * Apply the virtual dom to the component from a loaded template.\n     *\n     * @private\n     * @param {String} newContent the new content\n     * @param {String} [newJs] the new js\n     */\n    _applyVirtualDomFromTemplate(newContent, newJs) {\n        const vdom = this._parseHTML(newContent);\n        this._applyVirtualDomFromElement(vdom);\n        if (newJs !== undefined) {\n            Templates.runTemplateJS(newJs);\n        }\n    }\n\n    /**\n     * Apply the virtual dom to the component from an virtual dom element.\n     *\n     * @private\n     * @param {HTMLElement} vdom the element to diff\n     */\n    _applyVirtualDomFromElement(vdom) {\n        const dom = this.component.getElement();\n        this.keyIndex = this._getKeyElementsIndex(vdom, dom);\n        this._diff(vdom, dom);\n    }\n\n    /**\n     * Scan all key elements present in the virtual dom and return the list of the dom ones.\n     *\n     * @private\n     * @param {HTMLElement} vdom the virtual dom element\n     * @param {HTMLElement} dom the real dom element\n     * @returns {Map}\n     */\n    _getKeyElementsIndex(vdom, dom) {\n        const result = new Map();\n        const elementsWithDataMdlKey = vdom.querySelectorAll('[data-mdl-key]');\n        elementsWithDataMdlKey.forEach(element => {\n            const key = element.getAttribute('data-mdl-key');\n            const newElement = dom.querySelector(`[data-mdl-key=\"${key}\"]`);\n            if (!newElement) {\n                return;\n            }\n            // Subcomponents can have the same keys as the parent. We ignore any key that is not part of this component.\n            const parentComponent = newElement.closest('[data-mdl-component-hash]');\n            if (parentComponent.getAttribute('data-mdl-component-hash') != this.component.getComponentHash()) {\n                return;\n            }\n            result.set(key, newElement);\n        });\n        return result;\n    }\n\n    /**\n     * Execute a diff.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _diff(vdom, dom) {\n        if (!this._needsToDiffed(vdom, dom)) {\n            return;\n        }\n        // If dom has no childs then append the childs from vdom.\n        if (dom.hasChildNodes() === false && vdom.hasChildNodes() === true) {\n            for (let i = 0; i < vdom.childNodes.length; i++) {\n                dom.append(vdom.childNodes[i].cloneNode(true));\n            }\n            return;\n        }\n\n        this._diffChilds(vdom, dom);\n    }\n\n    /**\n     * Validate if the element needs to be diffed.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     * @returns\n     */\n    _needsToDiffed(vdom, dom) {\n        if (dom.getAttribute('data-mdl-refresh') === 'static') {\n            return false;\n        }\n        if (dom.getAttribute('data-mdl-refresh') === 'inject') {\n            return true;\n        }\n        if (\n            dom.hasAttribute('data-mdl-component-hash') &&\n            dom.getAttribute('data-mdl-component-hash') !== this.component.getComponentHash()\n        ) {\n            const subcomponent = this.component.getElementComponent(dom);\n            if (subcomponent && subcomponent.allowTemplateInjection()) {\n                subcomponent.injectContent(vdom);\n            }\n            return false;\n        }\n        if (vdom.isEqualNode(dom)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Move all child elements with data-mdl-key attribute to the same position as the vdom.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _sortChildKeyElements(vdom, dom) {\n        if (vdom.querySelector(':scope > [data-mdl-key]') === null) {\n            return;\n        }\n        for (let i = 0; i < vdom.childNodes.length; i++) {\n            const key = vdom.childNodes[i].getAttribute('data-mdl-key');\n            if (!key || !this.keyIndex.has(key)) {\n                continue;\n            }\n            const newElement = this.keyIndex.get(key);\n            dom.insertBefore(newElement, dom.childNodes[i]);\n        }\n    }\n\n    /**\n     * Remove all unnecessary childs from the dom before the diff.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _removeUnnecessaryChilds(vdom, dom) {\n        if (dom.childNodes.length > vdom.childNodes.length) {\n            let count = dom.childNodes.length - vdom.childNodes.length;\n            if (count > 0) {\n                for (; count > 0; count--) {\n                    // Remove.\n                    // dom.childNodes[dom.childNodes.length - count].remove();\n                    dom.lastChild.remove();\n                }\n            }\n        }\n    }\n\n    /**\n     * Diff all childs.\n     *\n     * @private\n     * @param {HTMLElement} vdom virtual dom element\n     * @param {HTMLElement} dom real dom element\n     */\n    _diffChilds(vdom, dom) {\n        this._sortChildKeyElements(vdom, dom);\n        this._removeUnnecessaryChilds(vdom, dom);\n        for (let i = 0; i < vdom.childNodes.length; i++) {\n            if (dom.childNodes[i] === undefined) {\n                dom.append(vdom.childNodes[i].cloneNode(true));\n            } else {\n                this._diffElement(vdom.childNodes[i], dom.childNodes[i]);\n            }\n            if (vdom.childNodes[i].nodeType !== Node.TEXT_NODE) {\n                this._diff(vdom.childNodes[i], dom.childNodes[i]);\n            }\n        }\n    }\n\n    /**\n     * Diff a single element.\n     *\n     * @private\n     * @param {HTMLElement} vdomNode\n     * @param {HTMLElement} domNode\n     */\n    _diffElement(vdomNode, domNode) {\n        if (this._getNodeType(vdomNode) !== this._getNodeType(domNode)) {\n            domNode.replaceWith(vdomNode.cloneNode(true));\n            return;\n        }\n\n        if (vdomNode.nodeType === Node.TEXT_NODE) {\n            // We check if the text content is not same.\n            if (vdomNode.textContent !== domNode.textContent) {\n                // Replace the text content.\n                domNode.textContent = vdomNode.textContent;\n            }\n        } else {\n            this._patchAttributes(vdomNode, domNode);\n        }\n    }\n\n    /**\n     * Return the node type.\n     *\n     * @private\n     * @param {HTMLElement} node\n     * @returns {String}\n     */\n    _getNodeType(node) {\n        if (node.nodeType == Node.ELEMENT_NODE) {\n            return node.tagName.toLowerCase();\n        } else {\n            return node.nodeType;\n        }\n    }\n\n    /**\n     * Create an index of the attributes of the element.\n     *\n     * @private\n     * @param {HTMLElement} vdom the virtual dom element\n     * @param {HTMLElement} dom the real dom element\n     */\n    _patchAttributes(vdom, dom) {\n        let vdomAttributes = this._attributesIndex(vdom);\n        let domAttributes = this._attributesIndex(dom);\n        if (vdomAttributes == domAttributes) {\n            return;\n        }\n        Object.keys(vdomAttributes).forEach(key => {\n            if (!dom.getAttribute(key)) {\n                dom.setAttribute(key, vdomAttributes[key]);\n            } else if (dom.getAttribute(key)) {\n                if (vdomAttributes[key] != domAttributes[key]) {\n                    dom.setAttribute(key, vdomAttributes[key]);\n                }\n            }\n        });\n        Object.keys(domAttributes).forEach(key => {\n            // If the attribute is not present in vdom than remove it.\n            if (!vdom.getAttribute(key) && !protectecAttributes.includes(key)) {\n                dom.removeAttribute(key);\n            }\n        });\n    }\n\n    /**\n     * Create an index of the attributes of the element.\n     *\n     * @private\n     * @param {HTMLElement} element\n     */\n    _attributesIndex(element) {\n        var attributes = {};\n        if (element.attributes == undefined) {\n            return attributes;\n        }\n        for (var i = 0, atts = element.attributes, n = atts.length; i < n; i++) {\n            attributes[atts[i].name] = atts[i].value;\n        }\n        return attributes;\n    }\n\n    /**\n     * Parse the html string and return the main element.\n     *\n     * @private\n     * @param {String} html\n     * @returns {HTMLElement}\n     */\n    _parseHTML(html) {\n        let parser = new DOMParser();\n        let doc = parser.parseFromString(html, 'text/html');\n\n        this._clean(doc.body);\n\n        if (doc.body.childElementCount != 1) {\n            throw new Error('The HTML must have only one root element');\n        }\n\n        return doc.body.firstChild;\n    }\n\n    /**\n     * Clean the node from comments and empty text nodes.\n     *\n     * @private\n     * @param {Node} node\n     */\n    _clean(node) {\n        for (let n = 0; n < node.childNodes.length; n++) {\n            const child = node.childNodes[n];\n            if (\n                child.nodeType === Node.COMMENT_NODE ||\n                (child.nodeType === Node.TEXT_NODE && !/\\S/.test(child.nodeValue) && child.nodeValue.includes('\\n'))\n            ) {\n                node.removeChild(child);\n                n--;\n            } else if (child.nodeType === Node.ELEMENT_NODE) {\n                this._clean(child);\n            }\n        }\n    }\n}\n"],"names":["protectecAttributes","constructor","component","keyIndex","html","js","this","_applyVirtualDomFromTemplate","vdom","_applyVirtualDomFromElement","newContent","newJs","_parseHTML","undefined","runTemplateJS","dom","getElement","_getKeyElementsIndex","_diff","result","Map","querySelectorAll","forEach","element","key","getAttribute","newElement","querySelector","closest","getComponentHash","set","_needsToDiffed","hasChildNodes","_diffChilds","i","childNodes","length","append","cloneNode","hasAttribute","subcomponent","getElementComponent","allowTemplateInjection","injectContent","isEqualNode","_sortChildKeyElements","has","get","insertBefore","_removeUnnecessaryChilds","count","lastChild","remove","_diffElement","nodeType","Node","TEXT_NODE","vdomNode","domNode","_getNodeType","textContent","_patchAttributes","replaceWith","node","ELEMENT_NODE","tagName","toLowerCase","vdomAttributes","_attributesIndex","domAttributes","Object","keys","setAttribute","includes","removeAttribute","attributes","atts","n","name","value","doc","DOMParser","parseFromString","_clean","body","childElementCount","Error","firstChild","child","COMMENT_NODE","test","nodeValue","removeChild"],"mappings":"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"}