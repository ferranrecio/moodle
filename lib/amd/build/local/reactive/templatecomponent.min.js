define("core/local/reactive/templatecomponent",["exports","core/local/reactive/virtualdom","core/local/reactive/basecomponent","core/notification","core/templates"],(function(_exports,_virtualdom,_basecomponent,_notification,_templates){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_virtualdom=_interopRequireDefault(_virtualdom),_basecomponent=_interopRequireDefault(_basecomponent),_notification=_interopRequireDefault(_notification),_templates=_interopRequireDefault(_templates);const instances=new WeakMap;
/**
   * TODO describe module templatecomponent
   *
   * @module     core/local/reactive/templatecomponent
   * @class     core/local/reactive/templatecomponent
   * @copyright  2024 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */class _default extends _basecomponent.default{constructor(descriptor){super(descriptor),this.currentTemplateData=null}static createTemplateComponent(descriptor){if(void 0===descriptor.element||!(descriptor.element instanceof HTMLElement))throw Error("Missing a main DOM element to create a template component.");if(instances.has(descriptor.element))return instances.get(descriptor.element);const newInstance=new this(descriptor);return instances.set(descriptor.element,newInstance),newInstance}getTemplateName(){return null}getTemplateData(){return null}async refreshTemplate(){const templateName=this.getTemplateName();if(!templateName)throw new Error("The getTemplateName method must return the template name.");let templateData=this.getTemplateData();if(null===templateData)throw new Error("The getTemplateData method must return some template data.");const templateDataJson=JSON.stringify(templateData);if(templateData=JSON.parse(templateDataJson),templateDataJson!==JSON.stringify(this.currentTemplateData))try{const{html:html,js:js}=await _templates.default.renderForPromise(templateName,templateData);_virtualdom.default.applyTemplate(this,html,js),this.currentTemplateData=templateData}catch(error){_notification.default.exception(error)}}getWatchers(){return[{watch:"state:updated",handler:this.refreshTemplate}]}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=templatecomponent.min.js.map