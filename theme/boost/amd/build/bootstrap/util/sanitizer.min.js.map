{"version":3,"file":"sanitizer.min.js","sources":["../../../src/bootstrap/util/sanitizer.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst uriAttrs = new Set([\n  'background',\n  'cite',\n  'href',\n  'itemtype',\n  'longdesc',\n  'poster',\n  'src',\n  'xlink:href'\n])\n\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i\n\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n *\n * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i\n\nconst allowedAttribute = (attr, allowedAttributeList) => {\n  const attrName = attr.nodeName.toLowerCase()\n\n  if (allowedAttributeList.includes(attrName)) {\n    if (uriAttrs.has(attrName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attr.nodeValue) || DATA_URL_PATTERN.test(attr.nodeValue))\n    }\n\n    return true\n  }\n\n  const regExp = allowedAttributeList.filter(attrRegex => attrRegex instanceof RegExp)\n\n  // Check if a regular expression validates the attribute.\n  for (let i = 0, len = regExp.length; i < len; i++) {\n    if (regExp[i].test(attrName)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport const DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  div: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n}\n\nexport function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml\n  }\n\n  if (sanitizeFn && typeof sanitizeFn === 'function') {\n    return sanitizeFn(unsafeHtml)\n  }\n\n  const domParser = new window.DOMParser()\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')\n  const allowlistKeys = Object.keys(allowList)\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'))\n\n  for (let i = 0, len = elements.length; i < len; i++) {\n    const el = elements[i]\n    const elName = el.nodeName.toLowerCase()\n\n    if (!allowlistKeys.includes(elName)) {\n      el.remove()\n\n      continue\n    }\n\n    const attributeList = [].concat(...el.attributes)\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elName] || [])\n\n    attributeList.forEach(attr => {\n      if (!allowedAttribute(attr, allowedAttributes)) {\n        el.removeAttribute(attr.nodeName)\n      }\n    })\n  }\n\n  return createdDocument.body.innerHTML\n}\n"],"names":["unsafeHtml","allowList","sanitizeFn","length","createdDocument","window","DOMParser","parseFromString","allowlistKeys","Object","keys","elements","concat","body","querySelectorAll","i","len","el","elName","nodeName","toLowerCase","includes","remove","attributeList","attributes","allowedAttributes","forEach","attr","allowedAttribute","removeAttribute","innerHTML","uriAttrs","Set","SAFE_URL_PATTERN","DATA_URL_PATTERN","allowedAttributeList","attrName","has","Boolean","test","nodeValue","regExp","filter","attrRegex","RegExp","DefaultAllowlist","a","area","b","br","col","code","div","em","hr","h1","h2","h3","h4","h5","h6","img","li","ol","p","pre","s","small","span","sub","sup","strong","u","ul"],"mappings":"sMA2F6BA,WAAYC,UAAWC,gBAC7CF,WAAWG,cACPH,cAGLE,YAAoC,mBAAfA,kBAChBA,WAAWF,kBAIdI,iBADY,IAAIC,OAAOC,WACKC,gBAAgBP,WAAY,aACxDQ,cAAgBC,OAAOC,KAAKT,WAC5BU,SAAW,GAAGC,UAAUR,gBAAgBS,KAAKC,iBAAiB,UAE/D,IAAIC,EAAI,EAAGC,IAAML,SAASR,OAAQY,EAAIC,IAAKD,IAAK,OAC7CE,GAAKN,SAASI,GACdG,OAASD,GAAGE,SAASC,kBAEtBZ,cAAca,SAASH,QAAS,CACnCD,GAAGK,wBAKCC,cAAgB,GAAGX,UAAUK,GAAGO,YAChCC,kBAAoB,GAAGb,OAAOX,UAAU,MAAQ,GAAIA,UAAUiB,SAAW,IAE/EK,cAAcG,SAAQC,OACfC,iBAAiBD,KAAMF,oBAC1BR,GAAGY,gBAAgBF,KAAKR,oBAKvBf,gBAAgBS,KAAKiB,iBAtHxBC,SAAW,IAAIC,IAAI,CACvB,aACA,OACA,OACA,WACA,WACA,SACA,MACA,eAUIC,iBAAmB,6DAOnBC,iBAAmB,qIAEnBN,iBAAmB,CAACD,KAAMQ,8BACxBC,SAAWT,KAAKR,SAASC,iBAE3Be,qBAAqBd,SAASe,iBAC5BL,SAASM,IAAID,WACRE,QAAQL,iBAAiBM,KAAKZ,KAAKa,YAAcN,iBAAiBK,KAAKZ,KAAKa,kBAMjFC,OAASN,qBAAqBO,QAAOC,WAAaA,qBAAqBC,aAGxE,IAAI7B,EAAI,EAAGC,IAAMyB,OAAOtC,OAAQY,EAAIC,IAAKD,OACxC0B,OAAO1B,GAAGwB,KAAKH,iBACV,SAIJ,GAGIS,iBAAmB,KAEzB,CAAC,QAAS,MAAO,KAAM,OAAQ,OAzCP,kBA0C7BC,EAAG,CAAC,SAAU,OAAQ,QAAS,OAC/BC,KAAM,GACNC,EAAG,GACHC,GAAI,GACJC,IAAK,GACLC,KAAM,GACNC,IAAK,GACLC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJ7C,EAAG,GACH8C,IAAK,CAAC,MAAO,SAAU,MAAO,QAAS,QAAS,UAChDC,GAAI,GACJC,GAAI,GACJC,EAAG,GACHC,IAAK,GACLC,EAAG,GACHC,MAAO,GACPC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,OAAQ,GACRC,EAAG,GACHC,GAAI"}